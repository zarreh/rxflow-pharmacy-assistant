{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"RxFlow Pharmacy Assistant","text":"<p>AI-powered prescription refill assistance system with comprehensive pharmacy workflow management</p> <p>RxFlow is an intelligent pharmacy assistant that guides patients through safe and efficient prescription refill processes using advanced AI and comprehensive safety protocols.</p>"},{"location":"#key-features","title":"\u2728 Key Features","text":""},{"location":"#conversational-ai-interface","title":"\ud83e\udd16 Conversational AI Interface","text":"<ul> <li>Interactive step-by-step guidance through prescription refills</li> <li>Natural language processing for patient queries</li> <li>Context-aware conversation management with session persistence</li> </ul>"},{"location":"#comprehensive-pharmacy-integration","title":"\ud83c\udfe5 Comprehensive Pharmacy Integration","text":"<ul> <li>Multi-pharmacy network support (CVS, Walgreens, Walmart, and more)</li> <li>Real-time inventory checking and availability status</li> <li>Location-based pharmacy finder with distance calculations</li> <li>Wait time estimates and appointment scheduling</li> </ul>"},{"location":"#medication-safety-systems","title":"\ud83d\udc8a Medication Safety Systems","text":"<ul> <li>RxNorm integration for authoritative medication verification</li> <li>Automatic escalation for controlled substances and safety concerns</li> <li>Drug interaction analysis and allergy checking</li> <li>Dosage verification against FDA guidelines</li> </ul>"},{"location":"#cost-optimization","title":"\ud83d\udcb0 Cost Optimization","text":"<ul> <li>Insurance formulary checking and prior authorization support</li> <li>Generic vs brand comparison with savings calculations</li> <li>GoodRx integration for discount pricing</li> <li>Multi-pharmacy cost comparison</li> </ul>"},{"location":"#safety-compliance","title":"\ud83d\udd12 Safety &amp; Compliance","text":"<ul> <li>Mandatory safety checks at every workflow step</li> <li>Regulatory compliance with DEA and FDA guidelines</li> <li>Comprehensive audit logging for healthcare standards</li> <li>Privacy protection with secure session management</li> </ul>"},{"location":"#use-cases","title":"\ud83c\udfaf Use Cases","text":"<p>Patient Scenarios</p> <ul> <li>Routine Refills: \"I need to refill my blood pressure medication\"</li> <li>Cost Savings: \"Find me the cheapest option for omeprazole\"</li> <li>Pharmacy Selection: \"Which nearby pharmacy has the shortest wait time?\"</li> <li>Insurance Issues: \"My insurance denied my prescription, what are my options?\"</li> </ul>"},{"location":"#architecture-overview","title":"\ud83c\udfd7\ufe0f Architecture Overview","text":"<pre><code>graph TB\n    A[Patient Interface] --&gt; B[Conversation Manager]\n    B --&gt; C[LangChain Agent]\n    C --&gt; D[19 Specialized Tools]\n\n    D --&gt; E[Patient Tools]\n    D --&gt; F[Pharmacy Tools]\n    D --&gt; G[Medication Tools]\n    D --&gt; H[Cost Tools]\n    D --&gt; I[Safety Tools]\n\n    E --&gt; J[Patient Database]\n    F --&gt; K[Pharmacy Network]\n    G --&gt; L[RxNorm API]\n    H --&gt; M[Insurance Systems]\n    I --&gt; N[Safety Protocols]</code></pre>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>Get started with RxFlow using Docker:</p>"},{"location":"#docker-deployment-recommended","title":"\ud83d\udc33 Docker Deployment (Recommended)","text":"<pre><code># Pull and run the production image\ndocker run -d -p 8080:8080 \\\n  -e OPENAI_API_KEY=your_key_here \\\n  zarreh/rxflow-pharmacy-assistant:latest\n\n# Access at http://localhost:8080\n</code></pre>"},{"location":"#docker-compose","title":"\ud83d\udce6 Docker Compose","text":"<pre><code>git clone https://github.com/zarreh/rxflow-pharmacy-assistant.git\ncd rxflow-pharmacy-assistant\ncp .env.production.example .env\n# Edit .env with your OpenAI API key\ndocker-compose up -d\n</code></pre>"},{"location":"#development-setup","title":"\ud83d\udee0\ufe0f Development Setup","text":"<pre><code>poetry install\ncp .env.example .env\n# Edit .env with your API keys\npoetry run streamlit run app.py\n# Access at http://localhost:8501\n</code></pre>"},{"location":"#try-a-demo-conversation","title":"\ud83d\udcac Try a Demo Conversation","text":"<p>Navigate to the application and try:</p> <p>\"I need to refill my omeprazole 20mg\"</p>"},{"location":"#system-statistics","title":"\ud83d\udcca System Statistics","text":"Core MetricsSafety FeaturesPerformance <ul> <li>19 Specialized Tools for comprehensive pharmacy operations</li> <li>100% Class Documentation coverage with professional docstrings</li> <li>86.8% Function Coverage with detailed parameter documentation</li> <li>Multi-Network Support for major pharmacy chains</li> </ul> <ul> <li>Automatic Escalation for 200+ controlled substances</li> <li>Drug Interaction checking across 1000+ medication pairs</li> <li>Allergy Verification with severity-based recommendations</li> <li>Regulatory Compliance with FDA and DEA guidelines</li> </ul> <ul> <li>&lt; 2 second average response time</li> <li>Real-time inventory and pricing updates</li> <li>Session Persistence for complex multi-step workflows</li> <li>Concurrent Users supported with isolated sessions</li> </ul>"},{"location":"#for-healthcare-professionals","title":"\ud83c\udfe5 For Healthcare Professionals","text":"<p>RxFlow is designed with healthcare standards in mind:</p> <ul> <li>Clinical Decision Support: Evidence-based recommendations</li> <li>Audit Trails: Comprehensive logging for regulatory compliance</li> <li>Safety First: Multiple validation layers prevent dangerous operations</li> <li>Professional Integration: APIs for EMR and pharmacy systems</li> </ul>"},{"location":"#safety-privacy","title":"\ud83d\udee1\ufe0f Safety &amp; Privacy","text":"<ul> <li>HIPAA Considerations: Session-based architecture protects patient data</li> <li>Secure Processing: No permanent storage of sensitive information</li> <li>Controlled Access: Escalation protocols for restricted medications</li> <li>Error Prevention: Multi-layer validation prevents medication errors</li> </ul>"},{"location":"#supported-platforms","title":"\ud83d\udcf1 Supported Platforms","text":"<ul> <li>Web Interface: Responsive design for desktop and mobile</li> <li>API Integration: RESTful APIs for healthcare system integration</li> <li>Docker Support: Containerized deployment for scalability</li> <li>Cloud Ready: Kubernetes and cloud platform compatible</li> </ul> <p>Getting Help</p> <ul> <li>\ud83d\udcd6 User Guide - Complete usage instructions</li> <li>\ud83d\udd27 Developer Guide - Technical documentation</li> <li>\ud83d\ude80 Quick Start - Get running in minutes</li> <li>\ud83d\udca1 API Reference - Complete API documentation</li> </ul> <p>Ready to transform your pharmacy experience? Get started now!</p>"},{"location":"COMPREHENSIVE_DOCUMENTATION/","title":"RxFlow Pharmacy Assistant - Complete Documentation","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Project Overview</li> <li>User Guide </li> <li>API Reference</li> <li>Developer Guide</li> <li>Deployment Guide</li> <li>Enhanced Workflow System</li> <li>Interactive Conversation Implementation</li> <li>Technical Fixes and Improvements</li> <li>Project Retrospective</li> </ol>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#project-overview","title":"Project Overview","text":"<p>RxFlow Pharmacy Assistant is an AI-powered conversational system designed to streamline prescription refill processes. Built using LangChain, Streamlit, and OpenAI's GPT models, it provides an intelligent, step-by-step interaction for medication management.</p>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#key-features","title":"Key Features","text":"<ul> <li>Intelligent Medication Identification: Recognizes medications by condition or name</li> <li>Interactive Step-by-Step Workflow: Guides users through a systematic 5-step process</li> <li>Cost Optimization: Compares brand vs generic prices and finds cheapest pharmacies</li> <li>Pharmacy Integration: Real-time inventory and pricing from multiple pharmacy chains</li> <li>Order Management: Complete order submission and tracking system</li> <li>Drug Safety: Interaction checking and dosage verification</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#system-architecture","title":"System Architecture","text":"<ul> <li>Frontend: Streamlit web interface</li> <li>Backend: LangChain agent system with 19 specialized tools</li> <li>AI Model: OpenAI GPT-4o-mini for conversation management</li> <li>Data Sources: Mock pharmacy, patient, and insurance data for demonstration</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#user-guide","title":"User Guide","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#getting-started","title":"Getting Started","text":"<ol> <li>Access the Application</li> <li>Open your browser to <code>http://localhost:8501</code></li> <li> <p>The interface will display a chat-like conversation</p> </li> <li> <p>Requesting a Refill</p> </li> <li>Simply describe your need: \"I need my acid reflux medicine\"</li> <li>The system will guide you through each step</li> </ol>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#the-5-step-interactive-workflow","title":"The 5-Step Interactive Workflow","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#step-1-medication-identification","title":"Step 1: Medication Identification","text":"<ul> <li>System looks up your medication history based on condition or name</li> <li>Confirms the specific medication and dosage</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#step-2-dosage-verification","title":"Step 2: Dosage Verification","text":"<ul> <li>Validates the prescribed dosage is appropriate</li> <li>Checks for any dosage-related safety concerns</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#step-3-cost-optimization","title":"Step 3: Cost Optimization","text":"<ul> <li>Compares brand name vs generic pricing</li> <li>Recommends most cost-effective option</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#step-4-pharmacy-selection","title":"Step 4: Pharmacy Selection","text":"<ul> <li>Searches all nearby pharmacies for best prices</li> <li>Considers promotions, discounts, and availability</li> <li>Provides top 3 options with detailed comparison</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#step-5-order-submission","title":"Step 5: Order Submission","text":"<ul> <li>Confirms all order details</li> <li>Submits prescription refill request</li> <li>Provides order confirmation and pickup information</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#sample-conversation-flow","title":"Sample Conversation Flow","text":"<pre><code>User: \"I need my acid reflux medicine\"\nAI: \"I found your medication for acid reflux: omeprazole 20mg capsules. Is this the medication you want to refill?\"\n\nUser: \"Yes\"\nAI: \"The dosage of omeprazole 20mg is valid. Would you like to proceed to check the cost options?\"\n\nUser: \"Yes\"  \nAI: \"Generic (omeprazole): $2.36, Brand (Prilosec): $65.00. You can save $62.64 (96.4%). Would you prefer generic?\"\n\nUser: \"Generic please\"\nAI: \"The cheapest option is Walmart Pharmacy #98765 at $9.60. Would you like to proceed with placing the order?\"\n\nUser: \"Yes\"\nAI: \"Order RX132531 submitted successfully! Pickup time: 7:07 PM today at Walmart Pharmacy.\"\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#supported-medications","title":"Supported Medications","text":"<ul> <li>Acid reflux: omeprazole, famotidine</li> <li>Blood pressure: lisinopril, amlodipine</li> <li>Diabetes: metformin, insulin</li> <li>Pain management: meloxicam, methocarbamol</li> <li>Anxiety: lorazepam (controlled substance)</li> <li>And many more...</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#api-reference","title":"API Reference","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#core-tools-available","title":"Core Tools Available","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#1-patient-history-tools","title":"1. Patient History Tools","text":"<ul> <li><code>patient_medication_history(condition_or_medication)</code>: Lookup patient's prescription history</li> <li><code>check_prescription_status(medication)</code>: Verify refill eligibility and remaining refills</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#2-medication-verification-tools","title":"2. Medication Verification Tools","text":"<ul> <li><code>verify_medication_dosage(medication:dosage)</code>: Validate dosage appropriateness</li> <li><code>check_drug_interactions(medication)</code>: Screen for dangerous drug interactions</li> <li><code>get_medication_alternatives(medication)</code>: Find therapeutic alternatives</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#3-cost-optimization-tools","title":"3. Cost Optimization Tools","text":"<ul> <li><code>compare_brand_generic_prices(medication)</code>: Compare brand vs generic pricing</li> <li><code>get_goodrx_prices(medication:dosage:quantity)</code>: Get discount pricing information</li> <li><code>check_insurance_coverage(medication)</code>: Verify insurance formulary coverage</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#4-pharmacy-tools","title":"4. Pharmacy Tools","text":"<ul> <li><code>find_cheapest_pharmacy(medication)</code>: Search all pharmacies for best pricing</li> <li><code>check_pharmacy_inventory(pharmacy_id:medication)</code>: Verify medication availability</li> <li><code>get_pharmacy_wait_times()</code>: Get current wait times at nearby pharmacies</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#5-order-management-tools","title":"5. Order Management Tools","text":"<ul> <li><code>submit_refill_order(medication:dosage:quantity:pharmacy_id:patient_id)</code>: Submit prescription order</li> <li><code>track_prescription_order(order_id)</code>: Check order status and pickup readiness</li> <li><code>cancel_prescription_order(order_id)</code>: Cancel pending orders</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#6-safety-and-compliance-tools","title":"6. Safety and Compliance Tools","text":"<ul> <li><code>escalate_to_pharmacist(issue)</code>: Route complex issues to human pharmacist</li> <li><code>check_controlled_substance_eligibility(medication)</code>: Verify controlled substance protocols</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#tool-response-formats","title":"Tool Response Formats","text":"<p>All tools return standardized JSON responses:</p> <pre><code>{\n  \"success\": true/false,\n  \"data\": {...},\n  \"error\": \"error message if applicable\",\n  \"source\": \"data_source_identifier\"\n}\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#integration-examples","title":"Integration Examples","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#python-integration","title":"Python Integration","text":"<pre><code>from rxflow.tools import patient_history_tool\n\n# Look up patient medication history\nresult = patient_history_tool.lookup_history(\"acid reflux\")\nif result[\"success\"]:\n    medications = result[\"medications\"]\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#langchain-integration","title":"LangChain Integration","text":"<pre><code>from rxflow.tools.order_tools import order_submission_tool\n\n# Use as LangChain tool\nagent = initialize_agent(\n    tools=[order_submission_tool, ...],\n    llm=llm,\n    agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION\n)\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#developer-guide","title":"Developer Guide","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8+</li> <li>Poetry for dependency management</li> <li>OpenAI API key</li> <li>Git for version control</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#installation-setup","title":"Installation &amp; Setup","text":"<ol> <li> <p>Clone the repository <pre><code>git clone https://github.com/zarreh/rxflow-pharmacy-assistant.git\ncd rxflow-pharmacy-assistant\n</code></pre></p> </li> <li> <p>Install dependencies <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Environment setup <pre><code>cp .env.example .env\n# Edit .env with your OpenAI API key\n</code></pre></p> </li> <li> <p>Run the application <pre><code>make run\n# or\npoetry run streamlit run app.py\n</code></pre></p> </li> </ol>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#project-structure","title":"Project Structure","text":"<pre><code>rxflow-pharmacy-assistant/\n\u251c\u2500\u2500 rxflow/                    # Main package\n\u2502   \u251c\u2500\u2500 config/               # Configuration management\n\u2502   \u251c\u2500\u2500 tools/                # LangChain tools (19 total)\n\u2502   \u251c\u2500\u2500 workflow/             # Conversation management\n\u2502   \u251c\u2500\u2500 services/             # Data services and mock data\n\u2502   \u2514\u2500\u2500 utils/                # Utilities and logging\n\u251c\u2500\u2500 data/                     # Mock data files (JSON)\n\u251c\u2500\u2500 docs/                     # Documentation\n\u251c\u2500\u2500 tests/                    # Test files\n\u251c\u2500\u2500 app.py                    # Streamlit main application\n\u2514\u2500\u2500 pyproject.toml           # Poetry configuration\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#key-components","title":"Key Components","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#1-conversation-manager-rxflowworkflowconversation_managerpy","title":"1. Conversation Manager (<code>rxflow/workflow/conversation_manager.py</code>)","text":"<ul> <li>Orchestrates the interactive 5-step workflow</li> <li>Manages LangChain agent execution</li> <li>Handles session state and conversation history</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#2-tool-system-rxflowtools","title":"2. Tool System (<code>rxflow/tools/</code>)","text":"<ul> <li>19 specialized tools for different aspects of pharmacy operations</li> <li>Each tool implements specific business logic</li> <li>Structured input/output for reliable AI integration</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#3-mock-data-services-rxflowservicesmock_datapy","title":"3. Mock Data Services (<code>rxflow/services/mock_data.py</code>)","text":"<ul> <li>Comprehensive test data for development</li> <li>Patient records, pharmacy inventory, insurance data</li> <li>Realistic scenarios for testing workflows</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#development-workflow","title":"Development Workflow","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#adding-new-tools","title":"Adding New Tools","text":"<ol> <li>Create tool file in <code>rxflow/tools/</code></li> <li>Implement tool class with required methods</li> <li>Register tool in conversation manager</li> <li>Add comprehensive logging</li> <li>Create test cases</li> </ol>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#modifying-conversation-flow","title":"Modifying Conversation Flow","text":"<ol> <li>Update prompts in <code>conversation_manager.py</code></li> <li>Modify workflow state transitions</li> <li>Test interactive scenarios</li> <li>Update documentation</li> </ol>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#testing-strategy","title":"Testing Strategy","text":"<ul> <li>Unit tests for individual tools</li> <li>Integration tests for complete workflows</li> <li>Manual testing via Streamlit interface</li> <li>Mock data validation</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#code-quality-standards","title":"Code Quality Standards","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#logging","title":"Logging","text":"<pre><code>from rxflow.utils.logger import get_logger\nlogger = get_logger(__name__)\n\n# Usage\nlogger.info(f\"[AI USAGE] Tool called with parameter: {param}\")\nlogger.error(f\"[ERROR] Operation failed: {error}\")\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#error-handling","title":"Error Handling","text":"<pre><code>def tool_function(self, input_param):\n    try:\n        # Tool logic\n        return {\"success\": True, \"data\": result}\n    except Exception as e:\n        logger.error(f\"Tool failed: {str(e)}\")\n        return {\"success\": False, \"error\": str(e)}\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#documentation-standards","title":"Documentation Standards","text":"<ul> <li>Comprehensive docstrings for all functions</li> <li>Type hints for parameters and returns</li> <li>Clear parameter descriptions</li> <li>Usage examples</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#deployment-guide","title":"Deployment Guide","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#production-deployment","title":"Production Deployment","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#docker-deployment","title":"Docker Deployment","text":"<pre><code>FROM python:3.11-slim\n\nWORKDIR /app\nCOPY . .\n\nRUN pip install poetry\nRUN poetry config virtualenvs.create false\nRUN poetry install --no-dev\n\nEXPOSE 8501\n\nCMD [\"streamlit\", \"run\", \"app.py\", \"--server.address\", \"0.0.0.0\"]\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#environment-variables","title":"Environment Variables","text":"<pre><code># Required\nOPENAI_API_KEY=your_openai_api_key\n\n# Optional\nSTREAMLIT_SERVER_PORT=8501\nLOG_LEVEL=INFO\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#cloud-deployment-options","title":"Cloud Deployment Options","text":"<p>AWS ECS/Fargate - Container-based deployment - Auto-scaling capabilities - Load balancer integration</p> <p>Google Cloud Run - Serverless container platform - Automatic HTTPS - Pay-per-use pricing</p> <p>Azure Container Instances - Simple container deployment - Integrated monitoring - Custom domain support</p>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#application-metrics","title":"Application Metrics","text":"<ul> <li>Conversation completion rates</li> <li>Tool usage statistics</li> <li>Error rates and types</li> <li>Response times</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#logging-configuration","title":"Logging Configuration","text":"<pre><code># Production logging setup\nLOGGING_CONFIG = {\n    'version': 1,\n    'handlers': {\n        'file': {\n            'class': 'logging.FileHandler',\n            'filename': 'rxflow.log',\n            'level': 'INFO'\n        }\n    },\n    'root': {\n        'level': 'INFO',\n        'handlers': ['file']\n    }\n}\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#security-considerations","title":"Security Considerations","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#api-key-management","title":"API Key Management","text":"<ul> <li>Use environment variables for secrets</li> <li>Implement key rotation policies</li> <li>Monitor API usage and costs</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#data-privacy","title":"Data Privacy","text":"<ul> <li>No real patient data in logs</li> <li>Sanitize sensitive information</li> <li>Implement session isolation</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#input-validation","title":"Input Validation","text":"<ul> <li>Validate all user inputs</li> <li>Sanitize medication names</li> <li>Rate limiting for API calls</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#performance-optimization","title":"Performance Optimization","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#caching-strategy","title":"Caching Strategy","text":"<pre><code># Tool result caching\n@lru_cache(maxsize=100)\ndef expensive_tool_operation(param):\n    # Cached operation\n    pass\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#database-optimization","title":"Database Optimization","text":"<ul> <li>Index frequently queried fields</li> <li>Implement connection pooling</li> <li>Use read replicas for scaling</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#enhanced-workflow-system","title":"Enhanced Workflow System","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#overview","title":"Overview","text":"<p>The Enhanced Workflow System represents a major evolution in the RxFlow assistant, implementing a systematic, tool-first approach that ensures reliable, step-by-step medication refill processing.</p>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#core-principles","title":"Core Principles","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#1-tool-mandatory-approach","title":"1. Tool-Mandatory Approach","text":"<ul> <li>Every workflow step MUST use designated tools</li> <li>AI cannot rely on internal knowledge without tool validation</li> <li>Systematic verification at each stage</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#2-interactive-step-by-step-process","title":"2. Interactive Step-by-Step Process","text":"<ul> <li>One step at a time with user confirmation</li> <li>No \"all-at-once\" responses</li> <li>Clear progress indication</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#3-cost-optimization-focus","title":"3. Cost Optimization Focus","text":"<ul> <li>Brand vs generic comparison mandatory</li> <li>Pharmacy price comparison with promotions</li> <li>Smart recommendation based on savings</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#4-comprehensive-validation","title":"4. Comprehensive Validation","text":"<ul> <li>Dosage verification for all medications</li> <li>Drug interaction checking</li> <li>Inventory availability confirmation</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#workflow-state-machine","title":"Workflow State Machine","text":"<pre><code>class WorkflowState(Enum):\n    GREETING = \"greeting\"\n    MEDICATION_IDENTIFICATION = \"medication_identification\"\n    DOSAGE_VERIFICATION = \"dosage_verification\"\n    COST_OPTIMIZATION = \"cost_optimization\"\n    PHARMACY_SELECTION = \"pharmacy_selection\"\n    ORDER_SUBMISSION = \"order_submission\"\n    COMPLETED = \"completed\"\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#step-by-step-implementation","title":"Step-by-Step Implementation","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#step-1-medication-identification_1","title":"Step 1: Medication Identification","text":"<pre><code># System Prompt Enhancement\n\"STEP 1 WORKFLOW: Use patient_medication_history tool to identify the specific medication...\"\n\n# Tool Usage\npatient_medication_history(\"acid reflux\")\n# Returns: omeprazole 20mg with full details\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#step-2-dosage-verification_1","title":"Step 2: Dosage Verification","text":"<pre><code># System Prompt\n\"STEP 2 WORKFLOW: Use verify_medication_dosage tool to confirm dosage appropriateness...\"\n\n# Tool Usage  \nverify_medication_dosage(\"omeprazole:20mg\")\n# Returns: validation with available dosages\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#step-3-cost-optimization_1","title":"Step 3: Cost Optimization","text":"<pre><code># System Prompt\n\"STEP 3 WORKFLOW: Use compare_brand_generic_prices tool to show cost savings...\"\n\n# Tool Usage\ncompare_brand_generic_prices(\"omeprazole\") \n# Returns: Brand: $65.00, Generic: $2.36, Savings: 96.4%\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#step-4-pharmacy-selection_1","title":"Step 4: Pharmacy Selection","text":"<pre><code># System Prompt\n\"STEP 4 WORKFLOW: Use find_cheapest_pharmacy tool to identify best pricing options...\"\n\n# Tool Usage\nfind_cheapest_pharmacy(\"omeprazole\")\n# Returns: Top 3 pharmacies with prices, promotions, wait times\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#step-5-order-submission_1","title":"Step 5: Order Submission","text":"<pre><code># System Prompt\n\"STEP 5 WORKFLOW: Use submit_refill_order tool to place the order...\"\n\n# Tool Usage (StructuredTool)\nsubmit_refill_order(\n    medication=\"omeprazole\",\n    dosage=\"20mg\", \n    quantity=\"30\",\n    pharmacy_id=\"WALMART_98765\",\n    patient_id=\"12345\"\n)\n# Returns: Order confirmation with pickup details\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#enhanced-system-prompts","title":"Enhanced System Prompts","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#tool-first-enforcement","title":"Tool-First Enforcement","text":"<pre><code>You are a pharmacy refill assistant that MUST use tools for all operations.\nCRITICAL: You cannot provide medication information without using the appropriate tools first.\nNever rely on your training data for medication, dosage, or pharmacy information.\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#interactive-conversation-rules","title":"Interactive Conversation Rules","text":"<pre><code>CONVERSATION RULES:\n1. Process ONE step at a time\n2. Wait for user confirmation before proceeding\n3. Use the designated tool for each workflow step\n4. Provide clear step indicators (Step 1 of 5, etc.)\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#example-conversation-flow","title":"Example Conversation Flow","text":"<pre><code>AI: [Step 1/5] Let me look up your acid reflux medication...\n   *Uses patient_medication_history tool*\n   \"I found omeprazole 20mg. Is this correct?\"\n\nUser: \"Yes\"\n\nAI: [Step 2/5] Verifying the dosage is appropriate...\n   *Uses verify_medication_dosage tool*\n   \"The dosage is valid. Ready for cost comparison?\"\n\nUser: \"Yes\"\n\nAI: [Step 3/5] Comparing brand vs generic prices...\n   *Uses compare_brand_generic_prices tool*\n   \"Generic saves $62.64 (96.4%). Choose generic?\"\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#benefits-achieved","title":"Benefits Achieved","text":"<ol> <li>Reliability: Every decision backed by tool validation</li> <li>Transparency: Clear step-by-step process visible to users  </li> <li>Cost Savings: Systematic comparison ensures best pricing</li> <li>User Control: Confirmation required at each step</li> <li>Scalability: Consistent workflow regardless of complexity</li> </ol>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#interactive-conversation-implementation","title":"Interactive Conversation Implementation","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#technical-architecture","title":"Technical Architecture","text":"<p>The interactive conversation system was redesigned to provide a natural, step-by-step user experience while maintaining the systematic workflow requirements.</p>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#key-components_1","title":"Key Components","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#1-enhanced-conversation-manager","title":"1. Enhanced Conversation Manager","text":"<pre><code>class EnhancedConversationManager:\n    def __init__(self):\n        self.agent_executor = self._create_agent_executor()\n        self.session_states = {}  # Track conversation state\n\n    def process_message(self, session_id: str, message: str) -&gt; str:\n        # Process one step at a time\n        # Maintain conversation history\n        # Ensure tool usage at each step\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#2-interactive-system-prompts","title":"2. Interactive System Prompts","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#core-interactive-rules","title":"Core Interactive Rules","text":"<pre><code>INTERACTIVE CONVERSATION GUIDELINES:\n\n1. PROCESS ONE STEP AT A TIME\n   - Complete current step fully before moving to next\n   - Wait for user confirmation to proceed\n   - Provide clear step indicators\n\n2. TOOL USAGE REQUIREMENTS\n   - MUST use designated tools for each workflow step\n   - Cannot provide medication info without tool validation\n   - Use tools proactively, not reactively\n\n3. CONVERSATION FLOW\n   - Step 1: Identify medication using patient_medication_history\n   - Step 2: Verify dosage using verify_medication_dosage  \n   - Step 3: Compare costs using compare_brand_generic_prices\n   - Step 4: Find pharmacy using find_cheapest_pharmacy\n   - Step 5: Submit order using submit_refill_order\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#enhanced-prompts-for-each-step","title":"Enhanced Prompts for Each Step","text":"<pre><code>STEP_PROMPTS = {\n    \"medication_identification\": \"\"\"\n    STEP 1 WORKFLOW: Use patient_medication_history tool to identify \n    the specific medication the patient needs. Ask for confirmation \n    before proceeding to dosage verification.\n    \"\"\",\n\n    \"dosage_verification\": \"\"\"\n    STEP 2 WORKFLOW: Use verify_medication_dosage tool to confirm \n    the dosage is appropriate. Ask if ready for cost comparison.\n    \"\"\",\n\n    \"cost_optimization\": \"\"\"\n    STEP 3 WORKFLOW: Use compare_brand_generic_prices tool to show \n    cost savings. Get user preference before pharmacy search.\n    \"\"\",\n\n    \"pharmacy_selection\": \"\"\"  \n    STEP 4 WORKFLOW: Use find_cheapest_pharmacy tool to identify \n    best options. Present top choices and get selection.\n    \"\"\",\n\n    \"order_submission\": \"\"\"\n    STEP 5 WORKFLOW: Use submit_refill_order tool to place order.\n    Confirm all details before submission.\n    \"\"\"\n}\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#3-conversation-examples","title":"3. Conversation Examples","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#example-1-condition-based-request","title":"Example 1: Condition-Based Request","text":"<pre><code>User: \"I need my acid reflux medicine\"\n\nAI: [Step 1/5] Let me look up your acid reflux medication history...\n    *Calls patient_medication_history(\"acid reflux\")*\n\n    I found your medication for acid reflux: omeprazole 20mg capsules. \n    You take 1 capsule daily before breakfast. Is this the medication \n    you want to refill?\n\nUser: \"Yes\"\n\nAI: [Step 2/5] Verifying the dosage is appropriate...\n    *Calls verify_medication_dosage(\"omeprazole:20mg\")*\n\n    The dosage of omeprazole 20mg is valid and available. Would you \n    like to proceed with checking the cost options for this medication?\n\nUser: \"Yes\"  \n\nAI: [Step 3/5] Comparing brand vs generic prices...\n    *Calls compare_brand_generic_prices(\"omeprazole\")*\n\n    Here are the cost options for omeprazole:\n    \u2022 Generic (omeprazole): $2.36\n    \u2022 Brand (Prilosec): $65.00\n\n    You can save $62.64 (96.4%) by choosing the generic version. \n    Would you prefer the generic or the brand name medication?\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#example-2-cost-conscious-flow","title":"Example 2: Cost-Conscious Flow","text":"<pre><code>User: \"Generic please\"\n\nAI: [Step 4/5] Finding the cheapest pharmacy options for generic omeprazole...\n    *Calls find_cheapest_pharmacy(\"omeprazole\")*\n\n    The cheapest option for your generic omeprazole is:\n\n    **Walmart Pharmacy #98765**\n    \u2022 Address: 4515 S Lamar Blvd  \n    \u2022 Phone: (555) 123-0002\n    \u2022 Price: $9.60\n    \u2022 Wait Time: Approximately 30 minutes\n\n    Would you like to proceed with placing the refill order at this pharmacy?\n\nUser: \"Yes\"\n\nAI: [Step 5/5] Confirming order details before submission...\n\n    \u2022 Medication: omeprazole\n    \u2022 Dosage: 20mg  \n    \u2022 Quantity: 30 capsules\n    \u2022 Pharmacy: Walmart Pharmacy #98765\n\n    Is everything correct? Would you like to proceed with the order?\n\nUser: \"Yes, proceed\"\n\nAI: *Calls submit_refill_order(...)*\n\n    \ud83c\udf89 Your refill order has been successfully placed!\n\n    **Order Details:**\n    \u2022 Order ID: RX132531\n    \u2022 Estimated Pickup: 7:07 PM on September 28, 2025\n    \u2022 Estimated Cost: $9.60 (payment due at pickup)\n\n    Next steps:\n    \u2022 You will receive SMS/email confirmation\n    \u2022 Bring valid ID for pickup  \n    \u2022 Call pharmacy if you have questions\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#4-state-management","title":"4. State Management","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#session-state-tracking","title":"Session State Tracking","text":"<pre><code>class ConversationState:\n    def __init__(self):\n        self.current_step = WorkflowState.GREETING\n        self.medication_identified = None\n        self.dosage_verified = None\n        self.cost_preference = None\n        self.selected_pharmacy = None\n        self.order_submitted = False\n\n    def advance_step(self):\n        # Move to next workflow step\n        # Validate prerequisites completed\n        # Update conversation context\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#history-management","title":"History Management","text":"<pre><code>def maintain_conversation_history(session_id: str, message: str, response: str):\n    \"\"\"Maintain conversation context across interactions\"\"\"\n    if session_id not in self.session_states:\n        self.session_states[session_id] = ConversationState()\n\n    # Update state based on current interaction\n    # Preserve context for tool calls\n    # Enable continuation of workflow\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#implementation-benefits","title":"Implementation Benefits","text":"<ol> <li>Natural Flow: Feels like talking to a knowledgeable pharmacist</li> <li>User Control: User confirms each step before proceeding  </li> <li>Transparency: Clear step indicators show progress</li> <li>Reliability: Tool validation ensures accuracy</li> <li>Flexibility: Can handle interruptions and clarifications</li> </ol>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#technical-challenges-solved","title":"Technical Challenges Solved","text":"<ol> <li>Tool Integration: Seamless LangChain agent tool usage</li> <li>State Persistence: Maintaining conversation context</li> <li>Error Handling: Graceful recovery from tool failures</li> <li>User Experience: Balancing thoroughness with simplicity</li> </ol>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#technical-fixes-and-improvements","title":"Technical Fixes and Improvements","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#major-issues-resolved","title":"Major Issues Resolved","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#1-order-submission-tool-format-mismatch","title":"1. Order Submission Tool Format Mismatch","text":"<p>Problem: AI was calling <code>submit_refill_order</code> with structured arguments, but the tool expected a single string input, causing \"Too many arguments to single-input tool\" error.</p> <p>Solution: Implemented StructuredTool with proper Pydantic schema <pre><code>from langchain.tools import StructuredTool\nfrom pydantic import BaseModel, Field\n\nclass OrderSubmissionInput(BaseModel):\n    medication: str = Field(description=\"Name of the medication\")\n    dosage: str = Field(description=\"Dosage of the medication\")\n    quantity: str = Field(description=\"Quantity to order\")\n    pharmacy_id: str = Field(description=\"Pharmacy ID or name\")\n    patient_id: str = Field(default=\"12345\", description=\"Patient ID\")\n\norder_submission_tool = StructuredTool.from_function(\n    name=\"submit_refill_order\",\n    description=\"Submit a prescription refill order...\",\n    func=structured_order_submission,\n    args_schema=OrderSubmissionInput\n)\n</code></pre></p> <p>Result: \u2705 AI can now call tool with proper structured arguments without errors</p>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#2-pharmacy-id-mapping-issues","title":"2. Pharmacy ID Mapping Issues","text":"<p>Problem: AI was passing pharmacy display names like \"Walmart Pharmacy #98765\" but the system expected internal IDs like \"WALMART_98765\".</p> <p>Solution: Enhanced pharmacy ID mapping with dynamic JSON-based lookup <pre><code>def _map_pharmacy_id(self, pharmacy_input: str) -&gt; str:\n    \"\"\"Map pharmacy display names to internal IDs using JSON data\"\"\"\n    # Load pharmacy data dynamically\n    # Create reverse mapping from names to IDs  \n    # Support partial matching and variations\n    # Fall back to static mapping if needed\n</code></pre></p> <p>Result: \u2705 Seamless mapping from display names to internal IDs</p>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#3-patient-history-lookup-improvements","title":"3. Patient History Lookup Improvements","text":"<p>Problem: AI was asking users for patient IDs instead of proactively using tools to find medication history.</p> <p>Solution: Enhanced condition-to-medication mapping and proactive tool usage <pre><code>CONDITION_MEDICATION_MAP = {\n    \"acid reflux\": [\"omeprazole\", \"famotidine\"],\n    \"heartburn\": [\"omeprazole\", \"famotidine\"], \n    \"gerd\": [\"omeprazole\", \"pantoprazole\"],\n    \"high blood pressure\": [\"lisinopril\", \"amlodipine\"],\n    \"hypertension\": [\"lisinopril\", \"amlodipine\"],\n    \"diabetes\": [\"metformin\", \"insulin\"],\n    # ... comprehensive mapping\n}\n</code></pre></p> <p>Result: \u2705 AI proactively finds patient medications without asking for IDs</p>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#4-interactive-vs-batch-response-issue","title":"4. Interactive vs Batch Response Issue","text":"<p>Problem: AI was providing all workflow steps at once instead of interactive step-by-step process.</p> <p>Solution: Enhanced system prompts with strict interaction rules <pre><code>INTERACTIVE_RULES = \"\"\"\nCRITICAL INTERACTION REQUIREMENTS:\n1. Process ONLY ONE step at a time\n2. Wait for user confirmation before proceeding to next step\n3. Use clear step indicators (Step 1/5, Step 2/5, etc.)  \n4. Ask specific questions to guide user through workflow\n5. NEVER provide all steps in a single response\n\"\"\"\n</code></pre></p> <p>Result: \u2705 True interactive conversation with user control at each step</p>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#performance-optimizations","title":"Performance Optimizations","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#1-tool-response-caching","title":"1. Tool Response Caching","text":"<pre><code>@lru_cache(maxsize=100)\ndef cached_pharmacy_lookup(medication: str):\n    # Cache pharmacy search results\n    # Reduce API calls for common medications\n    # Improve response times\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#2-efficient-data-loading","title":"2. Efficient Data Loading","text":"<pre><code># Lazy loading of JSON data\nclass DataLoader:\n    _pharmacy_data = None\n\n    @classmethod\n    def get_pharmacy_data(cls):\n        if cls._pharmacy_data is None:\n            cls._pharmacy_data = load_pharmacy_json()\n        return cls._pharmacy_data\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#3-streamlined-tool-registration","title":"3. Streamlined Tool Registration","text":"<pre><code>def register_tools_efficiently():\n    \"\"\"Register all tools with optimized initialization\"\"\"\n    tools = []\n\n    # Batch register tools to avoid repeated initialization\n    # Use factory pattern for consistent tool creation\n    # Implement error handling for tool registration failures\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#code-quality-improvements","title":"Code Quality Improvements","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#1-comprehensive-error-handling","title":"1. Comprehensive Error Handling","text":"<pre><code>def safe_tool_execution(func):\n    \"\"\"Decorator for safe tool execution with comprehensive error handling\"\"\"\n    def wrapper(*args, **kwargs):\n        try:\n            result = func(*args, **kwargs)\n            return {\"success\": True, \"data\": result}\n        except ValidationError as e:\n            return {\"success\": False, \"error\": f\"Validation failed: {e}\"}\n        except ConnectionError as e:\n            return {\"success\": False, \"error\": f\"Connection failed: {e}\"}\n        except Exception as e:\n            return {\"success\": False, \"error\": f\"Unexpected error: {e}\"}\n    return wrapper\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#2-enhanced-logging-system","title":"2. Enhanced Logging System","text":"<pre><code>class StructuredLogger:\n    def __init__(self, name: str):\n        self.logger = logging.getLogger(name)\n\n    def log_tool_usage(self, tool_name: str, parameters: dict, result: dict):\n        self.logger.info(f\"[TOOL] {tool_name} called with {parameters} -&gt; {result['success']}\")\n\n    def log_workflow_step(self, step: str, session_id: str):\n        self.logger.info(f\"[WORKFLOW] Session {session_id} entering {step}\")\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#3-input-validation-and-sanitization","title":"3. Input Validation and Sanitization","text":"<pre><code>def validate_medication_input(medication: str) -&gt; str:\n    \"\"\"Validate and sanitize medication names\"\"\"\n    # Remove special characters\n    # Normalize to lowercase\n    # Check against known medication list\n    # Return sanitized version or raise validation error\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#testing-framework-enhancements","title":"Testing Framework Enhancements","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#1-comprehensive-test-coverage","title":"1. Comprehensive Test Coverage","text":"<pre><code>class TestOrderSubmission:\n    def test_dictionary_input(self):\n        \"\"\"Test order submission with dictionary input\"\"\"\n\n    def test_json_string_input(self):\n        \"\"\"Test order submission with JSON string input\"\"\"\n\n    def test_colon_separated_input(self):\n        \"\"\"Test order submission with colon-separated input\"\"\"\n\n    def test_pharmacy_id_mapping(self):\n        \"\"\"Test pharmacy display name to ID mapping\"\"\"\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#2-integration-test-suite","title":"2. Integration Test Suite","text":"<pre><code>def test_complete_workflow():\n    \"\"\"Test end-to-end workflow from medication request to order completion\"\"\"\n    # Simulate user requesting acid reflux medicine\n    # Verify each workflow step executes correctly\n    # Confirm order submission and JSON file creation\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#security-enhancements","title":"Security Enhancements","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#1-api-key-management","title":"1. API Key Management","text":"<pre><code>class SecureAPIKeyHandler:\n    def __init__(self):\n        self.api_key = SecretStr(os.getenv(\"OPENAI_API_KEY\"))\n\n    def get_api_key(self) -&gt; str:\n        return self.api_key.get_secret_value()\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#2-input-sanitization","title":"2. Input Sanitization","text":"<pre><code>def sanitize_user_input(user_input: str) -&gt; str:\n    \"\"\"Sanitize user input to prevent injection attacks\"\"\"\n    # Remove potentially dangerous characters\n    # Limit input length\n    # Validate against expected patterns\n</code></pre>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#project-retrospective","title":"Project Retrospective","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#project-evolution-timeline","title":"Project Evolution Timeline","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#phase-1-foundation-initial-setup","title":"Phase 1: Foundation (Initial Setup)","text":"<ul> <li>Goals: Basic Streamlit app with LangChain integration</li> <li>Challenges: Tool registration and basic conversation flow</li> <li>Achievements: Working prototype with simple medication lookup</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#phase-2-enhanced-workflow-implementation","title":"Phase 2: Enhanced Workflow Implementation","text":"<ul> <li>Goals: Systematic 5-step workflow with tool-mandatory approach</li> <li>Challenges: Balancing AI flexibility with systematic requirements</li> <li>Achievements: Reliable tool-first approach with cost optimization</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#phase-3-interactive-conversation-design","title":"Phase 3: Interactive Conversation Design","text":"<ul> <li>Goals: Step-by-step user interaction instead of batch responses</li> <li>Challenges: Maintaining conversation state and user control</li> <li>Achievements: Natural conversational flow with clear step progression</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#phase-4-technical-refinement","title":"Phase 4: Technical Refinement","text":"<ul> <li>Goals: Resolve tool compatibility and order submission issues</li> <li>Challenges: LangChain tool format mismatches and pharmacy ID mapping</li> <li>Achievements: Fully functional end-to-end workflow with order completion</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#key-lessons-learned","title":"Key Lessons Learned","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#1-ai-system-design-principles","title":"1. AI System Design Principles","text":"<p>Tool-First Architecture is Critical - AI models are powerful but unreliable for factual information - Every decision must be backed by tool validation - System prompts must enforce tool usage, not just suggest it</p> <p>Interactive Design Requires Careful Prompt Engineering - AI naturally wants to provide comprehensive responses - Strict rules needed to enforce step-by-step interaction - User confirmation gates prevent runaway automation</p> <p>State Management is Complex but Essential - Conversation context must persist across interactions - Workflow state helps guide AI behavior - Session isolation prevents cross-conversation contamination</p>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#2-langchain-integration-insights","title":"2. LangChain Integration Insights","text":"<p>StructuredTool vs Tool Choice Matters - StructuredTool provides better type safety and validation - Pydantic schemas prevent argument mismatch errors - Tool descriptions significantly impact AI usage patterns</p> <p>Agent Configuration is Critical - Max iterations must balance thoroughness with performance - Agent type affects tool calling behavior - System prompts are more influential than tool descriptions</p>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#3-data-architecture-decisions","title":"3. Data Architecture Decisions","text":"<p>Mock Data Quality Impacts Development - Realistic test data enables better development decisions - Comprehensive edge cases in mock data prevent production issues - JSON structure consistency across all data sources is essential</p> <p>Dynamic Data Loading vs Static Imports - Runtime data loading enables easier testing and modification - Caching strategies important for performance - Error handling for data loading failures is critical</p>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#technical-debt-and-future-improvements","title":"Technical Debt and Future Improvements","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#1-current-technical-debt","title":"1. Current Technical Debt","text":"<ul> <li>Mock Data Dependency: System relies on static mock data instead of real APIs</li> <li>Limited Error Recovery: Basic error handling without sophisticated retry logic  </li> <li>Monolithic Conversation Manager: Single large file handles all conversation logic</li> <li>Testing Coverage: Limited automated test coverage for edge cases</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#2-scalability-considerations","title":"2. Scalability Considerations","text":"<p>Database Integration <pre><code># Future: Replace mock data with real database\nclass DatabasePharmacyService:\n    def __init__(self, connection_string: str):\n        self.db = DatabaseConnection(connection_string)\n\n    def find_pharmacies(self, medication: str) -&gt; List[Pharmacy]:\n        # Real-time pharmacy inventory lookup\n        # Dynamic pricing integration\n        # Live availability checking\n</code></pre></p> <p>Microservices Architecture <pre><code># Future: Split into focused services\nservices = {\n    \"patient_service\": PatientHistoryService(),\n    \"pharmacy_service\": PharmacyInventoryService(), \n    \"pricing_service\": CostOptimizationService(),\n    \"order_service\": OrderManagementService()\n}\n</code></pre></p> <p>Real-time Integration <pre><code># Future: Live pharmacy API integration\nclass LivePharmacyIntegration:\n    def __init__(self):\n        self.cvs_api = CVSPharmacyAPI()\n        self.walgreens_api = WalgreensAPI()\n        self.walmart_api = WalmartPharmacyAPI()\n</code></pre></p>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#3-user-experience-enhancements","title":"3. User Experience Enhancements","text":"<p>Multi-modal Interface - Voice input/output capability - Mobile-responsive design - Accessibility compliance (screen readers, etc.)</p> <p>Personalization Features - Preferred pharmacy memory - Cost preference learning - Medication schedule integration</p> <p>Advanced Features - Prescription image upload and OCR - Insurance card scanning - Medication adherence tracking</p>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#success-metrics-achieved","title":"Success Metrics Achieved","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#1-functional-requirements","title":"1. Functional Requirements \u2705","text":"<ul> <li>Complete Workflow: 5-step process from identification to order completion</li> <li>Cost Optimization: Brand vs generic comparison with pharmacy price search</li> <li>Interactive Design: Step-by-step user confirmation at each stage</li> <li>Order Management: Successful order submission with confirmation details</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#2-technical-requirements","title":"2. Technical Requirements \u2705","text":"<ul> <li>Tool Integration: 19 specialized tools working seamlessly with AI</li> <li>Error Handling: Graceful failure recovery with informative messages</li> <li>Data Persistence: Orders saved to JSON file for demonstration</li> <li>Scalable Architecture: Modular design supports future enhancements</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#3-user-experience-goals","title":"3. User Experience Goals \u2705","text":"<ul> <li>Natural Conversation: Feels like talking to a knowledgeable pharmacist</li> <li>Transparency: Clear step indicators and progress tracking</li> <li>Control: User confirmation required at each decision point</li> <li>Reliability: Consistent behavior across different medication types</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#recommendations-for-future-development","title":"Recommendations for Future Development","text":""},{"location":"COMPREHENSIVE_DOCUMENTATION/#1-production-readiness","title":"1. Production Readiness","text":"<ul> <li>Implement comprehensive logging and monitoring</li> <li>Add rate limiting and API usage controls</li> <li>Integrate with real pharmacy APIs and databases</li> <li>Implement proper authentication and authorization</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#2-advanced-features","title":"2. Advanced Features","text":"<ul> <li>Multi-language support for diverse user base</li> <li>Integration with electronic health records (EHR)</li> <li>Prescription synchronization across multiple medications</li> <li>Insurance pre-authorization workflow automation</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#3-business-integration","title":"3. Business Integration","text":"<ul> <li>Pharmacy partnership API development</li> <li>Revenue sharing model implementation</li> <li>Compliance with healthcare regulations (HIPAA, etc.)</li> <li>Integration with existing pharmacy management systems</li> </ul>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#conclusion","title":"Conclusion","text":"<p>The RxFlow Pharmacy Assistant represents a successful implementation of an AI-powered conversational system for medication management. Through iterative development and careful attention to user experience, we've created a reliable, interactive system that demonstrates the potential for AI to streamline healthcare processes.</p> <p>The systematic approach to workflow design, emphasis on tool validation, and commitment to interactive user experience have resulted in a system that balances AI capabilities with human control and oversight. This project serves as a strong foundation for future development in AI-powered healthcare assistance.</p>"},{"location":"COMPREHENSIVE_DOCUMENTATION/#final-architecture-summary","title":"Final Architecture Summary","text":"<ul> <li>19 Specialized Tools: Complete coverage of pharmacy workflow requirements</li> <li>Interactive 5-Step Process: Systematic approach ensuring reliability and user control  </li> <li>Comprehensive Cost Optimization: Brand/generic comparison with pharmacy price analysis</li> <li>Robust Error Handling: Graceful failure recovery with informative user feedback</li> <li>Scalable Design: Modular architecture supporting future enhancements and integrations</li> </ul> <p>The project successfully demonstrates how AI can augment human decision-making in healthcare while maintaining the necessary safeguards and validation mechanisms for safe, reliable operation.</p>"},{"location":"about/","title":"About RxFlow Pharmacy Assistant","text":""},{"location":"about/#project-overview","title":"Project Overview","text":"<p>RxFlow Pharmacy Assistant is an advanced AI-powered healthcare application designed to streamline pharmacy operations, improve patient safety, and enhance medication management workflows. Built with modern Python technologies and LLM capabilities, RxFlow bridges the gap between traditional pharmacy systems and intelligent automation.</p>"},{"location":"about/#mission-statement","title":"Mission Statement","text":"<p>Our mission is to leverage artificial intelligence to create safer, more efficient pharmacy operations while maintaining the highest standards of patient care and regulatory compliance. We believe that technology should enhance human expertise, not replace it, creating better outcomes for patients, pharmacists, and healthcare providers.</p>"},{"location":"about/#key-features","title":"Key Features","text":""},{"location":"about/#ai-powered-conversations","title":"\ud83e\udd16 AI-Powered Conversations","text":"<ul> <li>Natural language interaction for pharmacy tasks</li> <li>Context-aware responses based on patient history</li> <li>Multi-turn conversations with state management</li> <li>Support for complex medication queries</li> </ul>"},{"location":"about/#comprehensive-patient-management","title":"\ud83d\udc64 Comprehensive Patient Management","text":"<ul> <li>Complete medication history tracking</li> <li>Adherence monitoring and analytics</li> <li>Allergy verification and safety checks</li> <li>Clinical decision support integration</li> </ul>"},{"location":"about/#pharmacy-operations","title":"\ud83c\udfe5 Pharmacy Operations","text":"<ul> <li>Multi-pharmacy inventory checking</li> <li>Real-time availability verification</li> <li>Price comparison across providers</li> <li>Insurance optimization recommendations</li> </ul>"},{"location":"about/#safety-systems","title":"\ud83d\udee1\ufe0f Safety Systems","text":"<ul> <li>Drug interaction checking via RxNorm</li> <li>Clinical contraindication warnings</li> <li>Escalation protocols for safety concerns</li> <li>Comprehensive audit logging</li> </ul>"},{"location":"about/#workflow-automation","title":"\ud83d\udd27 Workflow Automation","text":"<ul> <li>Prescription refill automation</li> <li>Medication synchronization</li> <li>Adherence improvement programs</li> <li>Clinical workflow optimization</li> </ul>"},{"location":"about/#technology-stack","title":"Technology Stack","text":""},{"location":"about/#core-technologies","title":"Core Technologies","text":"<ul> <li>Python 3.11+: Primary development language</li> <li>LangChain: AI conversation framework</li> <li>OpenAI GPT-4: Advanced language model</li> <li>Streamlit: Interactive web interface</li> <li>Poetry: Dependency and package management</li> </ul>"},{"location":"about/#architecture-components","title":"Architecture Components","text":"<ul> <li>Conversation Manager: Handles AI interactions and state</li> <li>Tool System: Modular pharmacy operations</li> <li>Safety Layer: Comprehensive error handling and validation</li> <li>State Machine: Conversation flow management</li> <li>Mock Services: Development and testing infrastructure</li> </ul>"},{"location":"about/#integration-capabilities","title":"Integration Capabilities","text":"<ul> <li>RxNorm API: Drug information and interactions</li> <li>Pharmacy APIs: Real-time inventory and pricing</li> <li>EHR Systems: Patient history integration</li> <li>Insurance Providers: Coverage verification</li> </ul>"},{"location":"about/#development-team","title":"Development Team","text":"<p>RxFlow is developed with healthcare expertise and technical excellence:</p>"},{"location":"about/#core-development-principles","title":"Core Development Principles","text":"<ul> <li>Safety First: All operations include comprehensive safety checks</li> <li>Healthcare Compliance: HIPAA-compliant design and logging</li> <li>Modular Architecture: Extensible and maintainable codebase</li> <li>Test-Driven Development: Comprehensive testing at all levels</li> <li>Documentation: Complete API and user documentation</li> </ul>"},{"location":"about/#quality-assurance","title":"Quality Assurance","text":"<ul> <li>Automated Testing: Unit, integration, and performance tests</li> <li>Code Quality: Linting, type checking, and style enforcement</li> <li>Security Review: Regular security audits and vulnerability assessments</li> <li>Healthcare Validation: Clinical workflow verification</li> </ul>"},{"location":"about/#use-cases","title":"Use Cases","text":""},{"location":"about/#prescription-refills","title":"Prescription Refills","text":"<p>Streamline the prescription refill process with automated safety checks: - Verify patient medication history - Check for drug interactions and allergies - Find optimal pharmacy options by price and convenience - Automate insurance verification - Generate refill recommendations</p>"},{"location":"about/#medication-adherence","title":"Medication Adherence","text":"<p>Improve patient outcomes through adherence monitoring: - Track medication pickup patterns - Identify adherence risks and opportunities - Generate personalized improvement recommendations - Coordinate with healthcare providers - Implement medication synchronization programs</p>"},{"location":"about/#clinical-decision-support","title":"Clinical Decision Support","text":"<p>Enhance pharmacist decision-making with AI assistance: - Real-time drug interaction checking - Clinical contraindication warnings - Evidence-based therapy recommendations - Alternative medication suggestions - Escalation to clinical specialists when needed</p>"},{"location":"about/#pharmacy-operations_1","title":"Pharmacy Operations","text":"<p>Optimize daily pharmacy workflows: - Multi-location inventory management - Price comparison and optimization - Insurance verification automation - Patient communication automation - Regulatory compliance tracking</p>"},{"location":"about/#healthcare-compliance","title":"Healthcare Compliance","text":""},{"location":"about/#hipaa-compliance","title":"HIPAA Compliance","text":"<p>RxFlow is designed with healthcare privacy regulations in mind: - Encryption: All patient data encrypted in transit and at rest - Access Controls: Role-based access with audit logging - Data Minimization: Only necessary data collected and stored - Audit Trails: Comprehensive logging of all patient interactions - Secure Communications: TLS 1.3 for all network communications</p>"},{"location":"about/#regulatory-alignment","title":"Regulatory Alignment","text":"<ul> <li>FDA Guidelines: Medication information accuracy</li> <li>DEA Requirements: Controlled substance handling</li> <li>State Pharmacy Laws: Compliance with local regulations</li> <li>Clinical Standards: Evidence-based recommendations</li> </ul>"},{"location":"about/#open-source-commitment","title":"Open Source Commitment","text":""},{"location":"about/#license-and-availability","title":"License and Availability","text":"<p>RxFlow Pharmacy Assistant is committed to open source principles: - MIT License: Permissive licensing for maximum flexibility - GitHub Repository: Public development and collaboration - Community Contributions: Welcome contributions from developers and clinicians - Transparent Development: Open roadmap and issue tracking</p>"},{"location":"about/#contributing","title":"Contributing","text":"<p>We welcome contributions from: - Software Developers: Feature development and bug fixes - Healthcare Professionals: Clinical validation and requirements - UX/UI Designers: User experience improvements - Security Experts: Security reviews and enhancements - Documentation Writers: User guides and API documentation</p>"},{"location":"about/#future-roadmap","title":"Future Roadmap","text":""},{"location":"about/#short-term-goals-3-6-months","title":"Short-term Goals (3-6 months)","text":"<ul> <li>Enhanced Safety Features: Advanced drug interaction checking</li> <li>Mobile Application: iOS and Android companion apps</li> <li>EHR Integration: Direct integration with major EHR systems</li> <li>Performance Optimization: Improved response times and scalability</li> </ul>"},{"location":"about/#medium-term-goals-6-12-months","title":"Medium-term Goals (6-12 months)","text":"<ul> <li>Clinical Analytics: Advanced adherence and outcome analytics</li> <li>Pharmacy Network: Multi-pharmacy chain integration</li> <li>AI Recommendations: Enhanced clinical decision support</li> <li>Telemedicine Integration: Virtual consultation capabilities</li> </ul>"},{"location":"about/#long-term-vision-1-2-years","title":"Long-term Vision (1-2 years)","text":"<ul> <li>Predictive Analytics: Medication adherence prediction models</li> <li>Personalized Medicine: Genetic and biomarker integration</li> <li>Population Health: Community-level medication management</li> <li>Global Expansion: International regulatory compliance</li> </ul>"},{"location":"about/#contact-and-support","title":"Contact and Support","text":""},{"location":"about/#getting-help","title":"Getting Help","text":"<ul> <li>Documentation: Comprehensive guides and API reference</li> <li>GitHub Issues: Bug reports and feature requests</li> <li>Community Forum: Developer and user discussions</li> <li>Professional Support: Enterprise support options available</li> </ul>"},{"location":"about/#development-team-contact","title":"Development Team Contact","text":"<ul> <li>Project Maintainer: [Your Name/Organization]</li> <li>Email: support@rxflow.com</li> <li>GitHub: @your-github-org/rxflow_pharmacy_assistant</li> <li>Website: https://rxflow.com</li> </ul>"},{"location":"about/#healthcare-partnerships","title":"Healthcare Partnerships","text":"<p>We collaborate with healthcare organizations to ensure RxFlow meets real-world pharmacy needs. If you're interested in partnerships, pilot programs, or enterprise deployment, please contact our healthcare team.</p>"},{"location":"about/#acknowledgments","title":"Acknowledgments","text":""},{"location":"about/#healthcare-advisors","title":"Healthcare Advisors","text":"<p>Special thanks to the pharmacists, physicians, and healthcare IT professionals who provide clinical guidance and validation for RxFlow development.</p>"},{"location":"about/#technology-partners","title":"Technology Partners","text":"<ul> <li>OpenAI: Advanced language model capabilities</li> <li>LangChain: Conversation framework and tooling</li> <li>RxNorm/NIH: Drug information and terminology</li> <li>Healthcare Standards Organizations: Regulatory guidance</li> </ul>"},{"location":"about/#open-source-community","title":"Open Source Community","text":"<p>RxFlow builds upon the work of countless open source contributors in the Python, AI, and healthcare technology communities. We're grateful for the foundation that makes projects like this possible.</p> <p>RxFlow Pharmacy Assistant - Enhancing healthcare through intelligent automation</p> <p>Version: 1.0.0 Last Updated: January 2025 License: MIT License Healthcare Compliance: HIPAA, FDA Guidelines, DEA Requirements</p>"},{"location":"api/conversation-manager/","title":"Conversation Manager API","text":"<p>The ConversationManager is the core orchestration layer for RxFlow, coordinating between LangChain agents, specialized pharmacy tools, and conversation state management.</p>"},{"location":"api/conversation-manager/#overview","title":"Overview","text":""},{"location":"api/conversation-manager/#conversationmanager","title":"ConversationManager","text":"<p>The <code>ConversationManager</code> class orchestrates different types of conversations and manages their lifecycles in the RxFlow system.</p> <pre><code># Note: Full API documentation will be auto-generated when the module is available\n# ::: rxflow.workflow.conversation_manager.ConversationManager\n</code></pre>"},{"location":"api/conversation-manager/#conversationresponse","title":"ConversationResponse","text":""},{"location":"api/conversation-manager/#rxflow.workflow.conversation_manager.ConversationResponse","title":"<code>ConversationResponse(message: str, session_id: str, current_state: WorkflowState, tool_results: Optional[List[Dict[str, Any]]] = None, next_steps: Optional[str] = None, error: Optional[str] = None)</code>  <code>dataclass</code>","text":"<p>Structured response object for conversation interactions in pharmacy workflows.</p> <p>This dataclass encapsulates all information returned from a conversation turn, including the agent's response message, session management data, workflow state, and any tool execution results or errors that occurred during processing.</p> <p>Attributes:</p> Name Type Description <code>message</code> <code>str</code> <p>The formatted response message from the AI agent to display  to the user. Contains step-by-step guidance and instructions.</p> <code>session_id</code> <code>str</code> <p>Unique identifier for the conversation session to maintain state persistence across multiple message exchanges.</p> <code>current_state</code> <code>WorkflowState</code> <p>The current workflow state after processing the message, used for state machine transitions.</p> <code>tool_results</code> <code>Optional[List[Dict[str, Any]]]</code> <p>Results from any pharmacy tools executed during message processing, including patient data, medication info, pharmacy details, or cost calculations.</p> <code>next_steps</code> <code>Optional[str]</code> <p>Suggested next actions or prompts to guide the user through the workflow process.</p> <code>error</code> <code>Optional[str]</code> <p>Error message if any issues occurred during processing, including tool failures, validation errors, or safety escalations.</p> Example <pre><code>response = ConversationResponse(\n    message=\"I found your omeprazole 20mg. Is this correct?\",\n    session_id=\"user_123\",\n    current_state=WorkflowState.MEDICATION_VERIFIED,\n    tool_results=[{\"medication\": \"omeprazole\", \"strength\": \"20mg\"}],\n    next_steps=\"Confirm medication before proceeding to cost options\"\n)\n</code></pre>"},{"location":"api/conversation-manager/#usage-examples","title":"Usage Examples","text":""},{"location":"api/conversation-manager/#basic-conversation-processing","title":"Basic Conversation Processing","text":"<pre><code>from rxflow.workflow.conversation_manager import ConversationManager\n\n# Initialize the conversation manager\nmanager = ConversationManager()\n\n# Process a patient request\nresponse = await manager.process_message(\n    session_id=\"user_123\",\n    message=\"I need to refill my omeprazole\"\n)\n\nprint(f\"AI Response: {response.message}\")\nprint(f\"Current State: {response.current_state}\")\n\nif response.error:\n    print(f\"Error occurred: {response.error}\")\n</code></pre>"},{"location":"api/conversation-manager/#session-management","title":"Session Management","text":"<pre><code># Create a new session\nsession_data = manager.create_session(\"new_user_456\")\nprint(f\"Created session: {session_data['session_id']}\")\n\n# Retrieve existing session\nexisting_session = manager.get_session(\"new_user_456\")\nif existing_session:\n    print(f\"Session state: {existing_session['state']}\")\n\n# Get conversation history\nhistory = manager.get_conversation_history(\"new_user_456\")\nfor message in history:\n    print(f\"{message['role']}: {message['content']}\")\n\n# Clear session when done\nmanager.clear_session(\"new_user_456\")\n</code></pre>"},{"location":"api/conversation-manager/#advanced-workflow-management","title":"Advanced Workflow Management","text":"<pre><code>import asyncio\nfrom rxflow.workflow.workflow_types import WorkflowState\n\nasync def process_medication_refill():\n    \"\"\"Complete medication refill workflow example\"\"\"\n    manager = ConversationManager()\n    session_id = \"patient_workflow_001\"\n\n    # Step 1: Initial medication request\n    response1 = await manager.process_message(\n        session_id=session_id,\n        message=\"I need to refill my blood pressure medication\"\n    )\n\n    print(f\"Step 1 - {response1.current_state}: {response1.message}\")\n\n    # Step 2: Confirm medication\n    response2 = await manager.process_message(\n        session_id=session_id,\n        message=\"Yes, that's the correct medication\"\n    )\n\n    print(f\"Step 2 - {response2.current_state}: {response2.message}\")\n\n    # Step 3: Choose cost option\n    response3 = await manager.process_message(\n        session_id=session_id,\n        message=\"I'll take the generic option\"\n    )\n\n    print(f\"Step 3 - {response3.current_state}: {response3.message}\")\n\n    # Continue until workflow completion\n    return response3.current_state == WorkflowState.COMPLETED\n\n# Run the workflow\nresult = asyncio.run(process_medication_refill())\nprint(f\"Workflow completed successfully: {result}\")\n</code></pre>"},{"location":"api/conversation-manager/#integration-patterns","title":"Integration Patterns","text":""},{"location":"api/conversation-manager/#tool-result-processing","title":"Tool Result Processing","text":"<pre><code>async def process_with_tool_monitoring():\n    \"\"\"Monitor tool execution during conversation processing\"\"\"\n    manager = ConversationManager()\n\n    response = await manager.process_message(\n        session_id=\"monitoring_session\",\n        message=\"Find the cheapest omeprazole near me\"\n    )\n\n    # Check what tools were executed\n    if response.tool_results:\n        print(f\"Tools executed: {len(response.tool_results)}\")\n        for tool_result in response.tool_results:\n            print(f\"Tool: {tool_result.get('tool_name', 'unknown')}\")\n            print(f\"Result: {tool_result.get('result', 'no result')}\")\n\n    return response\n</code></pre>"},{"location":"api/conversation-manager/#error-handling-patterns","title":"Error Handling Patterns","text":"<pre><code>async def robust_conversation_processing():\n    \"\"\"Robust conversation processing with error handling\"\"\"\n    manager = ConversationManager()\n\n    try:\n        response = await manager.process_message(\n            session_id=\"error_handling_session\",\n            message=\"I need help with my prescription\"\n        )\n\n        if response.error:\n            # Handle application-level errors\n            print(f\"Application error: {response.error}\")\n            # Could implement retry logic or user notification\n\n        elif response.current_state == WorkflowState.ESCALATED:\n            # Handle escalation scenarios\n            print(f\"Escalated: {response.message}\")\n            # Notify pharmacist or physician\n\n        else:\n            # Normal processing\n            print(f\"Success: {response.message}\")\n\n    except Exception as e:\n        # Handle system-level exceptions\n        print(f\"System error: {str(e)}\")\n        # Implement fallback behavior\n</code></pre>"},{"location":"api/conversation-manager/#batch-processing","title":"Batch Processing","text":"<pre><code>async def batch_process_messages():\n    \"\"\"Process multiple messages for analytics or testing\"\"\"\n    manager = ConversationManager()\n\n    test_messages = [\n        \"I need to refill omeprazole\",\n        \"What pharmacies are nearby?\", \n        \"Check my insurance coverage\",\n        \"Find the cheapest option\"\n    ]\n\n    results = []\n    session_id = \"batch_session\"\n\n    for message in test_messages:\n        response = await manager.process_message(session_id, message)\n        results.append({\n            'message': message,\n            'response': response.message,\n            'state': response.current_state,\n            'success': not bool(response.error)\n        })\n\n        # Small delay between messages for realistic testing\n        await asyncio.sleep(1)\n\n    return results\n</code></pre>"},{"location":"api/conversation-manager/#configuration-and-customization","title":"Configuration and Customization","text":""},{"location":"api/conversation-manager/#custom-tool-registration","title":"Custom Tool Registration","text":"<pre><code>from rxflow.workflow.conversation_manager import ConversationManager\nfrom langchain.tools import Tool\n\nclass CustomConversationManager(ConversationManager):\n    \"\"\"Extended conversation manager with custom tools\"\"\"\n\n    def _register_tools(self) -&gt; None:\n        # Call parent method to get standard tools\n        super()._register_tools()\n\n        # Add custom tool\n        custom_tool = Tool(\n            name=\"CustomPharmacyTool\",\n            description=\"Custom pharmacy integration\",\n            func=self._custom_pharmacy_function\n        )\n\n        self.tools.append(custom_tool)\n        print(f\"Registered {len(self.tools)} tools (including custom)\")\n\n    def _custom_pharmacy_function(self, query: str) -&gt; str:\n        \"\"\"Custom pharmacy integration logic\"\"\"\n        return f\"Custom pharmacy result for: {query}\"\n\n# Use custom manager\ncustom_manager = CustomConversationManager()\n</code></pre>"},{"location":"api/conversation-manager/#session-persistence","title":"Session Persistence","text":"<pre><code>import json\nfrom pathlib import Path\n\nclass PersistentConversationManager(ConversationManager):\n    \"\"\"Conversation manager with session persistence\"\"\"\n\n    def __init__(self, session_file: str = \"sessions.json\"):\n        super().__init__()\n        self.session_file = Path(session_file)\n        self._load_sessions()\n\n    def _load_sessions(self):\n        \"\"\"Load sessions from file\"\"\"\n        if self.session_file.exists():\n            with open(self.session_file, 'r') as f:\n                self.sessions = json.load(f)\n\n    def _save_sessions(self):\n        \"\"\"Save sessions to file\"\"\"\n        with open(self.session_file, 'w') as f:\n            json.dump(self.sessions, f, indent=2, default=str)\n\n    def create_session(self, session_id: str):\n        \"\"\"Override to add persistence\"\"\"\n        result = super().create_session(session_id)\n        self._save_sessions()\n        return result\n\n    def clear_session(self, session_id: str) -&gt; bool:\n        \"\"\"Override to add persistence\"\"\"\n        result = super().clear_session(session_id)\n        if result:\n            self._save_sessions()\n        return result\n\n# Use persistent manager\npersistent_manager = PersistentConversationManager(\"my_sessions.json\")\n</code></pre>"},{"location":"api/conversation-manager/#performance-considerations","title":"Performance Considerations","text":""},{"location":"api/conversation-manager/#async-best-practices","title":"Async Best Practices","text":"<pre><code>import asyncio\nfrom typing import List\n\nasync def concurrent_session_processing():\n    \"\"\"Handle multiple concurrent sessions efficiently\"\"\"\n    manager = ConversationManager()\n\n    # Process multiple sessions concurrently\n    tasks = []\n    for i in range(5):\n        task = manager.process_message(\n            session_id=f\"concurrent_session_{i}\",\n            message=\"I need medication help\"\n        )\n        tasks.append(task)\n\n    # Wait for all sessions to complete\n    responses = await asyncio.gather(*tasks, return_exceptions=True)\n\n    # Process results\n    successful = [r for r in responses if not isinstance(r, Exception)]\n    errors = [r for r in responses if isinstance(r, Exception)]\n\n    print(f\"Processed {len(successful)} sessions successfully\")\n    if errors:\n        print(f\"Encountered {len(errors)} errors\")\n\n    return successful\n</code></pre>"},{"location":"api/conversation-manager/#memory-management","title":"Memory Management","text":"<pre><code>class OptimizedConversationManager(ConversationManager):\n    \"\"\"Memory-optimized conversation manager\"\"\"\n\n    def __init__(self, max_sessions: int = 100):\n        super().__init__()\n        self.max_sessions = max_sessions\n\n    def create_session(self, session_id: str):\n        \"\"\"Override with session limit enforcement\"\"\"\n        # Clean up old sessions if at limit\n        if len(self.sessions) &gt;= self.max_sessions:\n            # Remove oldest sessions\n            oldest_sessions = sorted(\n                self.sessions.items(),\n                key=lambda x: x[1].get('created_at', 0)\n            )\n\n            for old_session_id, _ in oldest_sessions[:10]:\n                self.clear_session(old_session_id)\n\n        return super().create_session(session_id)\n\n# Use optimized manager for high-traffic scenarios\noptimized_manager = OptimizedConversationManager(max_sessions=50)\n</code></pre>"},{"location":"api/conversation-manager/#testing-and-debugging","title":"Testing and Debugging","text":""},{"location":"api/conversation-manager/#unit-testing-pattern","title":"Unit Testing Pattern","text":"<pre><code>import pytest\nfrom unittest.mock import AsyncMock, patch\n\n@pytest.mark.asyncio\nasync def test_conversation_manager():\n    \"\"\"Test conversation manager functionality\"\"\"\n    manager = ConversationManager()\n\n    # Test session creation\n    session = manager.create_session(\"test_session\")\n    assert session['session_id'] == \"test_session\"\n\n    # Test message processing\n    with patch.object(manager, 'agent_executor') as mock_agent:\n        mock_agent.ainvoke = AsyncMock(return_value={'output': 'Test response'})\n\n        response = await manager.process_message(\n            session_id=\"test_session\",\n            message=\"Test message\"\n        )\n\n        assert response.message == \"Test response\"\n        assert response.session_id == \"test_session\"\n\n    # Test session cleanup\n    result = manager.clear_session(\"test_session\")\n    assert result is True\n</code></pre>"},{"location":"api/conversation-manager/#debug-information","title":"Debug Information","text":"<pre><code>async def debug_conversation_flow():\n    \"\"\"Enable detailed debugging for conversation flow\"\"\"\n    import logging\n\n    # Enable debug logging\n    logging.getLogger('rxflow').setLevel(logging.DEBUG)\n\n    manager = ConversationManager()\n\n    response = await manager.process_message(\n        session_id=\"debug_session\",\n        message=\"Debug test message\"\n    )\n\n    # Access debug information\n    session = manager.get_session(\"debug_session\")\n    print(f\"Session data: {session}\")\n    print(f\"Tool count: {len(manager.tools)}\")\n    print(f\"LLM model: {manager.llm.model_name}\")\n\n    return response\n</code></pre>"},{"location":"api/patient-tools/","title":"Patient Tools API","text":"<p>The Patient Tools module provides comprehensive patient data management, medication history tracking, and safety validation capabilities.</p>"},{"location":"api/patient-tools/#patienthistorytool","title":"PatientHistoryTool","text":"<p>The <code>PatientHistoryTool</code> class provides comprehensive patient data management, medication history tracking, and safety validation capabilities.</p> <pre><code># Note: Full API documentation will be auto-generated when the module is available\n# ::: rxflow.tools.patient_history_tool.PatientHistoryTool\n</code></pre>"},{"location":"api/patient-tools/#safety-wrapper-functions","title":"Safety Wrapper Functions","text":""},{"location":"api/patient-tools/#medication-history-lookup","title":"Medication History Lookup","text":"<p>Safe wrapper function for medication history retrieval with comprehensive error handling.</p> <pre><code># ::: rxflow.tools.patient_history_tool.safe_medication_history\n</code></pre>"},{"location":"api/patient-tools/#adherence-analysis","title":"Adherence Analysis","text":"<p>Safe wrapper for medication adherence checking and analysis.</p> <pre><code># ::: rxflow.tools.patient_history_tool.safe_adherence_check\n</code></pre>"},{"location":"api/patient-tools/#allergy-verification","title":"Allergy Verification","text":"<p>Safe wrapper for patient allergy verification and conflict detection.</p> <pre><code># ::: rxflow.tools.patient_history_tool.safe_allergy_check\n</code></pre>"},{"location":"api/patient-tools/#usage-examples","title":"Usage Examples","text":""},{"location":"api/patient-tools/#basic-medication-history","title":"Basic Medication History","text":"<pre><code>from rxflow.tools.patient_history_tool import PatientHistoryTool\n\n# Initialize the tool\nhistory_tool = PatientHistoryTool()\n\n# Get patient medication history\nhistory = history_tool.get_medication_history(\"omeprazole\")\n\nprint(f\"Found {history['total_medications']} medications\")\nfor med in history['medications']:\n    print(f\"- {med['name']} ({med['strength']}) for {med['condition']}\")\n</code></pre>"},{"location":"api/patient-tools/#adherence-monitoring","title":"Adherence Monitoring","text":"<pre><code># Check medication adherence\nadherence = history_tool.check_adherence(\"12345:lisinopril\")\n\nprint(f\"Adherence Score: {adherence['adherence_score']:.1f}%\")\nprint(f\"Level: {adherence['adherence_level']}\")\n\nif adherence['adherence_score'] &lt; 80:\n    print(\"Recommendations:\")\n    for rec in adherence['recommendations']:\n        print(f\"- {rec}\")\n</code></pre>"},{"location":"api/patient-tools/#safety-verification","title":"Safety Verification","text":"<pre><code># Check patient allergies\nallergies = history_tool.get_allergies(\"12345\")\n\nprint(f\"Patient has {allergies['allergy_count']} documented allergies\")\n\n# Check for high-risk allergies\nif allergies['high_risk_allergies']:\n    print(\"\u26a0\ufe0f HIGH RISK ALLERGIES:\")\n    for allergy in allergies['high_risk_allergies']:\n        print(f\"- {allergy}\")\n</code></pre>"},{"location":"api/patient-tools/#using-safety-wrappers","title":"Using Safety Wrappers","text":"<pre><code>from rxflow.tools.patient_history_tool import (\n    safe_medication_history,\n    safe_adherence_check, \n    safe_allergy_check\n)\n\n# Safe medication lookup with error handling\nresult = safe_medication_history(\"omeprazole\")\nif result.get(\"success\"):\n    medications = result[\"medications\"]\nelse:\n    print(f\"Error: {result.get('error')}\")\n\n# Safe adherence check\nadherence_result = safe_adherence_check({\n    \"patient_id\": \"12345\",\n    \"medication\": \"lisinopril\"\n})\n\n# Safe allergy verification\nallergy_result = safe_allergy_check(\"12345\")\n</code></pre>"},{"location":"api/patient-tools/#clinical-applications","title":"Clinical Applications","text":""},{"location":"api/patient-tools/#prescription-refill-workflow","title":"Prescription Refill Workflow","text":"<pre><code>def prescription_refill_workflow(patient_id: str, medication_name: str):\n    \"\"\"Complete prescription refill safety workflow\"\"\"\n    history_tool = PatientHistoryTool()\n\n    # Step 1: Verify medication in history\n    history = safe_medication_history(f\"{patient_id}:{medication_name}\")\n    if not history.get(\"success\"):\n        return {\"error\": \"Medication not found in patient history\"}\n\n    # Step 2: Check adherence patterns\n    adherence = safe_adherence_check(f\"{patient_id}:{medication_name}\")\n    if adherence[\"adherence_score\"] &lt; 50:\n        return {\"warning\": \"Poor adherence detected\", \"adherence\": adherence}\n\n    # Step 3: Verify no allergy conflicts\n    allergies = safe_allergy_check(patient_id)\n    medication_conflicts = []\n\n    for allergy in allergies.get(\"allergies\", []):\n        if medication_name.lower() in allergy[\"allergen\"].lower():\n            medication_conflicts.append(allergy)\n\n    if medication_conflicts:\n        return {\"error\": \"Allergy conflict detected\", \"conflicts\": medication_conflicts}\n\n    # All checks passed\n    return {\n        \"success\": True,\n        \"medication\": history[\"medications\"][0],\n        \"adherence\": adherence,\n        \"safe_to_proceed\": True\n    }\n\n# Usage\nresult = prescription_refill_workflow(\"12345\", \"omeprazole\")\nif result.get(\"success\"):\n    print(\"\u2705 Safe to proceed with refill\")\nelse:\n    print(f\"\u26a0\ufe0f Issue detected: {result.get('error', result.get('warning'))}\")\n</code></pre>"},{"location":"api/patient-tools/#adherence-improvement-program","title":"Adherence Improvement Program","text":"<pre><code>def generate_adherence_report(patient_id: str) -&gt; dict:\n    \"\"\"Generate comprehensive adherence report for patient\"\"\"\n    history_tool = PatientHistoryTool()\n\n    # Get all patient medications\n    all_meds = safe_medication_history(f\"{patient_id}:all\")\n\n    adherence_report = {\n        \"patient_id\": patient_id,\n        \"medications\": [],\n        \"overall_score\": 0,\n        \"recommendations\": []\n    }\n\n    total_score = 0\n    medication_count = 0\n\n    for med in all_meds.get(\"medications\", []):\n        adherence = safe_adherence_check(f\"{patient_id}:{med['name']}\")\n\n        med_report = {\n            \"medication\": med[\"name\"],\n            \"condition\": med[\"condition\"],\n            \"adherence_score\": adherence[\"adherence_score\"],\n            \"level\": adherence[\"adherence_level\"],\n            \"recommendations\": adherence.get(\"recommendations\", [])\n        }\n\n        adherence_report[\"medications\"].append(med_report)\n        total_score += adherence[\"adherence_score\"]\n        medication_count += 1\n\n    # Calculate overall score\n    adherence_report[\"overall_score\"] = total_score / medication_count if medication_count &gt; 0 else 0\n\n    # Generate global recommendations\n    if adherence_report[\"overall_score\"] &lt; 70:\n        adherence_report[\"recommendations\"].extend([\n            \"Consider medication synchronization program\",\n            \"Set up automatic refill reminders\",\n            \"Schedule medication therapy management consultation\"\n        ])\n\n    return adherence_report\n\n# Generate report\nreport = generate_adherence_report(\"12345\")\nprint(f\"Overall Adherence: {report['overall_score']:.1f}%\")\n</code></pre>"},{"location":"api/patient-tools/#data-models","title":"Data Models","text":""},{"location":"api/patient-tools/#medication-record-structure","title":"Medication Record Structure","text":"<pre><code>medication_record = {\n    \"name\": \"omeprazole\",\n    \"generic_name\": \"omeprazole\", \n    \"brand_names\": [\"Prilosec\", \"Losec\"],\n    \"strength\": \"20mg\",\n    \"condition\": \"GERD\",\n    \"prescriber\": \"Dr. Smith\",\n    \"last_filled\": \"2025-09-15\",\n    \"days_supply\": 90,\n    \"quantity\": 90,\n    \"status\": \"active\",\n    \"refills_remaining\": 2\n}\n</code></pre>"},{"location":"api/patient-tools/#adherence-analysis-structure","title":"Adherence Analysis Structure","text":"<pre><code>adherence_analysis = {\n    \"patient_id\": \"12345\",\n    \"medication\": \"lisinopril\", \n    \"adherence_score\": 87.5,\n    \"adherence_level\": \"Good\",\n    \"days_since_last_fill\": 28,\n    \"refill_pattern\": \"Consistent\",\n    \"recommendations\": [\n        \"Continue current adherence pattern\",\n        \"Set reminder for next refill in 62 days\"\n    ],\n    \"risk_factors\": []\n}\n</code></pre>"},{"location":"api/patient-tools/#allergy-profile-structure","title":"Allergy Profile Structure","text":"<pre><code>allergy_profile = {\n    \"patient_id\": \"12345\",\n    \"allergies\": [\n        {\n            \"allergen\": \"penicillin\",\n            \"reaction\": \"rash\", \n            \"severity\": \"Moderate\",\n            \"date_reported\": \"2023-03-15\",\n            \"verified\": True\n        }\n    ],\n    \"allergy_count\": 1,\n    \"high_risk_allergies\": [],\n    \"contraindications\": [\"amoxicillin\", \"ampicillin\"]\n}\n</code></pre>"},{"location":"api/patient-tools/#integration-patterns","title":"Integration Patterns","text":""},{"location":"api/patient-tools/#langchain-tool-integration","title":"LangChain Tool Integration","text":"<pre><code>from langchain.tools import Tool\nfrom rxflow.tools.patient_history_tool import safe_medication_history\n\n# Create LangChain tool wrapper\npatient_history_tool = Tool(\n    name=\"patient_medication_history\",\n    description=\"Retrieve patient medication history and details\",\n    func=safe_medication_history\n)\n\n# Use in LangChain agent\nfrom langchain.agents import create_openai_tools_agent\nfrom langchain_openai import ChatOpenAI\n\nllm = ChatOpenAI(model=\"gpt-4\")\ntools = [patient_history_tool]\n\nagent = create_openai_tools_agent(llm, tools, prompt_template)\n</code></pre>"},{"location":"api/patient-tools/#error-handling-patterns","title":"Error Handling Patterns","text":"<pre><code>def robust_patient_lookup(query: str) -&gt; dict:\n    \"\"\"Robust patient data lookup with comprehensive error handling\"\"\"\n    try:\n        # Primary lookup\n        result = safe_medication_history(query)\n\n        if result.get(\"success\"):\n            return result\n\n        # Fallback strategies\n        if \"not found\" in result.get(\"error\", \"\").lower():\n            # Try alternative spellings or generic names\n            alternative_queries = generate_alternative_queries(query)\n            for alt_query in alternative_queries:\n                alt_result = safe_medication_history(alt_query)\n                if alt_result.get(\"success\"):\n                    return alt_result\n\n        # Final fallback - return informative error\n        return {\n            \"success\": False,\n            \"error\": \"Medication not found in patient history\",\n            \"suggestions\": [\n                \"Check spelling of medication name\",\n                \"Try using generic name instead of brand name\",\n                \"Verify patient ID is correct\"\n            ]\n        }\n\n    except Exception as e:\n        return {\n            \"success\": False, \n            \"error\": f\"System error: {str(e)}\",\n            \"contact_support\": True\n        }\n</code></pre>"},{"location":"api/pharmacy-tools/","title":"Pharmacy Tools API","text":"<p>The Pharmacy Tools module provides comprehensive pharmacy management, medication lookup, availability checking, and pricing information.</p>"},{"location":"api/pharmacy-tools/#pharmacytool","title":"PharmacyTool","text":"<p>The <code>PharmacyTool</code> class provides comprehensive pharmacy management, medication lookup, availability checking, and pricing information.</p> <pre><code># Note: Full API documentation will be auto-generated when the module is available\n# ::: rxflow.tools.pharmacy_tools.PharmacyTool\n</code></pre>"},{"location":"api/pharmacy-tools/#safety-wrapper-functions","title":"Safety Wrapper Functions","text":""},{"location":"api/pharmacy-tools/#pharmacy-lookup","title":"Pharmacy Lookup","text":"<p>Safe wrapper function for pharmacy search and location services.</p> <pre><code># ::: rxflow.tools.pharmacy_tools.safe_pharmacy_lookup\n</code></pre>"},{"location":"api/pharmacy-tools/#medication-availability","title":"Medication Availability","text":"<p>Safe wrapper for medication availability checking across pharmacies.</p> <pre><code># ::: rxflow.tools.pharmacy_tools.safe_medication_availability\n</code></pre>"},{"location":"api/pharmacy-tools/#pricing-information","title":"Pricing Information","text":"<p>Safe wrapper for medication pricing lookup and comparison.</p> <pre><code># ::: rxflow.tools.pharmacy_tools.safe_pricing_lookup\n</code></pre>"},{"location":"api/pharmacy-tools/#usage-examples","title":"Usage Examples","text":""},{"location":"api/pharmacy-tools/#basic-pharmacy-search","title":"Basic Pharmacy Search","text":"<pre><code>from rxflow.tools.pharmacy_tools import PharmacyTool\n\n# Initialize the tool\npharmacy_tool = PharmacyTool()\n\n# Find pharmacies by location\npharmacies = pharmacy_tool.find_nearby_pharmacies(\"90210\")\n\nprint(f\"Found {pharmacies['count']} pharmacies in area\")\nfor pharmacy in pharmacies['pharmacies']:\n    print(f\"- {pharmacy['name']}: {pharmacy['distance']} miles\")\n    print(f\"  Address: {pharmacy['address']}\")\n    print(f\"  Hours: {pharmacy['hours']}\")\n</code></pre>"},{"location":"api/pharmacy-tools/#medication-availability-check","title":"Medication Availability Check","text":"<pre><code># Check medication availability at specific pharmacy\navailability = pharmacy_tool.check_medication_availability({\n    \"pharmacy_id\": \"CVS001\", \n    \"medication\": \"lisinopril 10mg\",\n    \"quantity\": 90\n})\n\nif availability['in_stock']:\n    print(f\"\u2705 In stock: {availability['available_quantity']} units\")\n    print(f\"Ready for pickup: {availability['pickup_time']}\")\nelse:\n    print(f\"\u274c Out of stock - Expected: {availability['expected_date']}\")\n</code></pre>"},{"location":"api/pharmacy-tools/#price-comparison","title":"Price Comparison","text":"<pre><code># Compare prices across multiple pharmacies\nprice_comparison = pharmacy_tool.compare_prices({\n    \"medication\": \"omeprazole 20mg\",\n    \"quantity\": 30,\n    \"insurance\": \"Aetna PPO\"\n})\n\nprint(\"Price Comparison:\")\nfor price in price_comparison['prices']:\n    print(f\"{price['pharmacy']}: ${price['copay']} (${price['cash_price']} cash)\")\n\n# Find lowest cost option\nbest_option = min(price_comparison['prices'], key=lambda x: x['copay'])\nprint(f\"\\nBest Option: {best_option['pharmacy']} - ${best_option['copay']}\")\n</code></pre>"},{"location":"api/pharmacy-tools/#using-safety-wrappers","title":"Using Safety Wrappers","text":"<pre><code>from rxflow.tools.pharmacy_tools import (\n    safe_pharmacy_lookup,\n    safe_medication_availability,\n    safe_pricing_lookup\n)\n\n# Safe pharmacy search with error handling\nresult = safe_pharmacy_lookup(\"90210\")\nif result.get(\"success\"):\n    pharmacies = result[\"pharmacies\"]\nelse:\n    print(f\"Error: {result.get('error')}\")\n\n# Safe availability check\navailability_result = safe_medication_availability({\n    \"pharmacy_id\": \"CVS001\",\n    \"medication\": \"lisinopril\",\n    \"quantity\": 90\n})\n\n# Safe pricing lookup\npricing_result = safe_pricing_lookup({\n    \"medication\": \"omeprazole\",\n    \"pharmacies\": [\"CVS001\", \"WAL001\", \"RIT001\"]\n})\n</code></pre>"},{"location":"api/pharmacy-tools/#pharmacy-management","title":"Pharmacy Management","text":""},{"location":"api/pharmacy-tools/#multi-pharmacy-workflow","title":"Multi-Pharmacy Workflow","text":"<pre><code>def find_best_pharmacy_option(medication: str, quantity: int, \n                            patient_location: str, insurance: str) -&gt; dict:\n    \"\"\"Find optimal pharmacy based on availability, price, and convenience\"\"\"\n    pharmacy_tool = PharmacyTool()\n\n    # Step 1: Find nearby pharmacies\n    nearby = safe_pharmacy_lookup(patient_location)\n    if not nearby.get(\"success\"):\n        return {\"error\": \"No pharmacies found in area\"}\n\n    # Step 2: Check availability and pricing at each pharmacy\n    options = []\n\n    for pharmacy in nearby[\"pharmacies\"][:5]:  # Check top 5 closest\n        # Check availability\n        availability = safe_medication_availability({\n            \"pharmacy_id\": pharmacy[\"id\"],\n            \"medication\": medication,\n            \"quantity\": quantity\n        })\n\n        if not availability.get(\"in_stock\"):\n            continue\n\n        # Get pricing\n        pricing = safe_pricing_lookup({\n            \"pharmacy_id\": pharmacy[\"id\"],\n            \"medication\": medication,\n            \"quantity\": quantity,\n            \"insurance\": insurance\n        })\n\n        option = {\n            \"pharmacy\": pharmacy,\n            \"availability\": availability,\n            \"pricing\": pricing,\n            \"score\": calculate_pharmacy_score(pharmacy, availability, pricing)\n        }\n        options.append(option)\n\n    # Step 3: Rank options by score\n    if not options:\n        return {\"error\": \"Medication not available at nearby pharmacies\"}\n\n    # Sort by score (higher is better)\n    options.sort(key=lambda x: x[\"score\"], reverse=True)\n\n    return {\n        \"success\": True,\n        \"recommended\": options[0],\n        \"alternatives\": options[1:3],\n        \"total_options\": len(options)\n    }\n\ndef calculate_pharmacy_score(pharmacy: dict, availability: dict, pricing: dict) -&gt; float:\n    \"\"\"Calculate pharmacy option score based on multiple factors\"\"\"\n    score = 100.0\n\n    # Distance factor (closer is better)\n    distance_penalty = min(pharmacy[\"distance\"] * 5, 25)  # Max 25 point penalty\n    score -= distance_penalty\n\n    # Price factor (lower copay is better) \n    copay = pricing.get(\"copay\", 999)\n    if copay &gt; 50:\n        score -= min((copay - 50) * 0.5, 20)  # Max 20 point penalty\n\n    # Availability factor\n    if availability.get(\"pickup_time\", \"\").lower() == \"same day\":\n        score += 10\n    elif \"next day\" in availability.get(\"pickup_time\", \"\").lower():\n        score += 5\n\n    # Pharmacy rating bonus\n    rating = pharmacy.get(\"rating\", 0)\n    score += rating * 2  # Up to 10 points for 5-star rating\n\n    # Hours convenience bonus\n    if pharmacy.get(\"24_hour\", False):\n        score += 5\n    elif \"8pm\" in pharmacy.get(\"hours\", \"\").lower():\n        score += 2\n\n    return max(score, 0)  # Ensure non-negative score\n\n# Usage\nbest_option = find_best_pharmacy_option(\n    medication=\"metformin 1000mg\",\n    quantity=90,\n    patient_location=\"10001\", \n    insurance=\"Medicare Part D\"\n)\n\nif best_option.get(\"success\"):\n    rec = best_option[\"recommended\"]\n    print(f\"Recommended: {rec['pharmacy']['name']}\")\n    print(f\"Price: ${rec['pricing']['copay']}\")\n    print(f\"Distance: {rec['pharmacy']['distance']} miles\")\n</code></pre>"},{"location":"api/pharmacy-tools/#inventory-management","title":"Inventory Management","text":"<pre><code>def check_pharmacy_inventory(pharmacy_id: str, medication_list: list) -&gt; dict:\n    \"\"\"Check inventory for multiple medications at once\"\"\"\n    pharmacy_tool = PharmacyTool()\n\n    inventory_report = {\n        \"pharmacy_id\": pharmacy_id,\n        \"pharmacy_name\": \"\",\n        \"medications\": [],\n        \"in_stock_count\": 0,\n        \"out_of_stock_count\": 0,\n        \"low_stock_count\": 0\n    }\n\n    # Get pharmacy details\n    pharmacy_info = safe_pharmacy_lookup(pharmacy_id)\n    if pharmacy_info.get(\"success\"):\n        inventory_report[\"pharmacy_name\"] = pharmacy_info[\"pharmacies\"][0][\"name\"]\n\n    for medication in medication_list:\n        availability = safe_medication_availability({\n            \"pharmacy_id\": pharmacy_id,\n            \"medication\": medication[\"name\"],\n            \"quantity\": medication[\"quantity\"]\n        })\n\n        med_status = {\n            \"medication\": medication[\"name\"],\n            \"requested_quantity\": medication[\"quantity\"],\n            \"available_quantity\": availability.get(\"available_quantity\", 0),\n            \"status\": \"unknown\"\n        }\n\n        if availability.get(\"in_stock\"):\n            available_qty = availability.get(\"available_quantity\", 0)\n            if available_qty &gt;= medication[\"quantity\"]:\n                med_status[\"status\"] = \"in_stock\"\n                inventory_report[\"in_stock_count\"] += 1\n            else:\n                med_status[\"status\"] = \"low_stock\"\n                inventory_report[\"low_stock_count\"] += 1\n        else:\n            med_status[\"status\"] = \"out_of_stock\"\n            med_status[\"expected_date\"] = availability.get(\"expected_date\")\n            inventory_report[\"out_of_stock_count\"] += 1\n\n        inventory_report[\"medications\"].append(med_status)\n\n    return inventory_report\n\n# Usage\nmedications_needed = [\n    {\"name\": \"lisinopril 10mg\", \"quantity\": 90},\n    {\"name\": \"metformin 1000mg\", \"quantity\": 180},\n    {\"name\": \"omeprazole 20mg\", \"quantity\": 30}\n]\n\ninventory = check_pharmacy_inventory(\"CVS001\", medications_needed)\nprint(f\"Inventory Status for {inventory['pharmacy_name']}:\")\nprint(f\"\u2705 In Stock: {inventory['in_stock_count']}\")\nprint(f\"\u26a0\ufe0f Low Stock: {inventory['low_stock_count']}\")\nprint(f\"\u274c Out of Stock: {inventory['out_of_stock_count']}\")\n</code></pre>"},{"location":"api/pharmacy-tools/#pricing-and-insurance","title":"Pricing and Insurance","text":""},{"location":"api/pharmacy-tools/#insurance-optimization","title":"Insurance Optimization","text":"<pre><code>def optimize_insurance_coverage(patient_insurance: dict, medications: list) -&gt; dict:\n    \"\"\"Optimize medication costs across insurance plans and pharmacies\"\"\"\n    pharmacy_tool = PharmacyTool()\n\n    optimization_report = {\n        \"patient_insurance\": patient_insurance,\n        \"medications\": [],\n        \"total_savings\": 0,\n        \"recommended_actions\": []\n    }\n\n    for medication in medications:\n        med_analysis = {\n            \"medication\": medication[\"name\"],\n            \"quantity\": medication[\"quantity\"],\n            \"pharmacy_options\": [],\n            \"best_option\": None,\n            \"potential_savings\": 0\n        }\n\n        # Check major pharmacy chains\n        pharmacy_chains = [\"CVS001\", \"WAL001\", \"RIT001\", \"TAR001\"]\n\n        for pharmacy_id in pharmacy_chains:\n            pricing = safe_pricing_lookup({\n                \"pharmacy_id\": pharmacy_id,\n                \"medication\": medication[\"name\"],\n                \"quantity\": medication[\"quantity\"],\n                \"insurance\": patient_insurance[\"plan_name\"]\n            })\n\n            if pricing.get(\"success\"):\n                option = {\n                    \"pharmacy_id\": pharmacy_id,\n                    \"pharmacy_name\": pricing.get(\"pharmacy_name\", \"Unknown\"),\n                    \"copay\": pricing.get(\"copay\", 999),\n                    \"cash_price\": pricing.get(\"cash_price\", 999),\n                    \"insurance_covers\": pricing.get(\"covered\", False),\n                    \"savings_vs_cash\": pricing.get(\"cash_price\", 999) - pricing.get(\"copay\", 999)\n                }\n                med_analysis[\"pharmacy_options\"].append(option)\n\n        # Find best option\n        if med_analysis[\"pharmacy_options\"]:\n            best = min(med_analysis[\"pharmacy_options\"], key=lambda x: x[\"copay\"])\n            med_analysis[\"best_option\"] = best\n\n            # Calculate savings vs average\n            avg_copay = sum(opt[\"copay\"] for opt in med_analysis[\"pharmacy_options\"]) / len(med_analysis[\"pharmacy_options\"])\n            med_analysis[\"potential_savings\"] = avg_copay - best[\"copay\"]\n            optimization_report[\"total_savings\"] += med_analysis[\"potential_savings\"]\n\n        optimization_report[\"medications\"].append(med_analysis)\n\n    # Generate recommendations\n    if optimization_report[\"total_savings\"] &gt; 50:\n        optimization_report[\"recommended_actions\"].append(\n            f\"Switch pharmacies to save ${optimization_report['total_savings']:.2f} per refill cycle\"\n        )\n\n    # Check for GoodRx alternatives\n    high_copay_meds = [med for med in optimization_report[\"medications\"] \n                      if med.get(\"best_option\", {}).get(\"copay\", 0) &gt; 30]\n\n    if high_copay_meds:\n        optimization_report[\"recommended_actions\"].append(\n            \"Consider GoodRx or pharmacy discount programs for high-copay medications\"\n        )\n\n    return optimization_report\n\n# Usage\npatient_insurance = {\n    \"plan_name\": \"Aetna PPO\",\n    \"group_number\": \"12345\",\n    \"member_id\": \"ABC123456\"\n}\n\npatient_medications = [\n    {\"name\": \"atorvastatin 40mg\", \"quantity\": 90},\n    {\"name\": \"lisinopril 20mg\", \"quantity\": 90}, \n    {\"name\": \"metformin 1000mg\", \"quantity\": 180}\n]\n\noptimization = optimize_insurance_coverage(patient_insurance, patient_medications)\nprint(f\"Potential Monthly Savings: ${optimization['total_savings']:.2f}\")\n\nfor action in optimization['recommended_actions']:\n    print(f\"\ud83d\udca1 {action}\")\n</code></pre>"},{"location":"api/pharmacy-tools/#data-models","title":"Data Models","text":""},{"location":"api/pharmacy-tools/#pharmacy-record-structure","title":"Pharmacy Record Structure","text":"<pre><code>pharmacy_record = {\n    \"id\": \"CVS001\",\n    \"name\": \"CVS Pharmacy #1234\",\n    \"chain\": \"CVS\",\n    \"address\": \"123 Main St, Anytown, CA 90210\",\n    \"phone\": \"(555) 123-4567\",\n    \"hours\": \"Mon-Fri 8AM-10PM, Sat-Sun 9AM-8PM\",\n    \"24_hour\": False,\n    \"drive_thru\": True,\n    \"distance\": 1.2,\n    \"rating\": 4.5,\n    \"services\": [\"immunizations\", \"medication_therapy\", \"pill_packing\"],\n    \"accepts_insurance\": [\"Aetna\", \"BCBS\", \"Cigna\", \"Medicare\", \"Medicaid\"]\n}\n</code></pre>"},{"location":"api/pharmacy-tools/#availability-response-structure","title":"Availability Response Structure","text":"<pre><code>availability_response = {\n    \"pharmacy_id\": \"CVS001\",\n    \"medication\": \"lisinopril 10mg\",\n    \"requested_quantity\": 90,\n    \"in_stock\": True,\n    \"available_quantity\": 120,\n    \"pickup_time\": \"Same day\",\n    \"ready_by\": \"2025-01-15T16:00:00Z\",\n    \"partial_fill_available\": True,\n    \"generic_available\": True,\n    \"brand_available\": False\n}\n</code></pre>"},{"location":"api/pharmacy-tools/#pricing-information-structure","title":"Pricing Information Structure","text":"<pre><code>pricing_info = {\n    \"pharmacy_id\": \"CVS001\",\n    \"pharmacy_name\": \"CVS Pharmacy #1234\",\n    \"medication\": \"omeprazole 20mg\",\n    \"quantity\": 30,\n    \"copay\": 15.00,\n    \"cash_price\": 89.99,\n    \"insurance_price\": 15.00,\n    \"covered\": True,\n    \"tier\": 2,\n    \"prior_auth_required\": False,\n    \"generic_alternative\": {\n        \"available\": True,\n        \"name\": \"omeprazole\",\n        \"copay\": 10.00\n    }\n}\n</code></pre>"},{"location":"api/pharmacy-tools/#integration-patterns","title":"Integration Patterns","text":""},{"location":"api/pharmacy-tools/#real-time-availability-monitoring","title":"Real-time Availability Monitoring","text":"<pre><code>import asyncio\nfrom typing import List, Dict\n\nasync def monitor_medication_availability(medications: List[str], \n                                        pharmacies: List[str]) -&gt; Dict:\n    \"\"\"Monitor medication availability across multiple pharmacies in real-time\"\"\"\n    pharmacy_tool = PharmacyTool()\n    monitoring_results = {}\n\n    async def check_single_pharmacy(pharmacy_id: str, medication: str):\n        \"\"\"Check availability at a single pharmacy\"\"\"\n        return await asyncio.to_thread(\n            safe_medication_availability,\n            {\n                \"pharmacy_id\": pharmacy_id,\n                \"medication\": medication,\n                \"quantity\": 90\n            }\n        )\n\n    # Create tasks for all pharmacy/medication combinations\n    tasks = []\n    for pharmacy_id in pharmacies:\n        for medication in medications:\n            task = check_single_pharmacy(pharmacy_id, medication)\n            tasks.append((pharmacy_id, medication, task))\n\n    # Execute all checks concurrently\n    for pharmacy_id, medication, task in tasks:\n        try:\n            result = await task\n\n            if pharmacy_id not in monitoring_results:\n                monitoring_results[pharmacy_id] = {}\n\n            monitoring_results[pharmacy_id][medication] = {\n                \"in_stock\": result.get(\"in_stock\", False),\n                \"quantity\": result.get(\"available_quantity\", 0),\n                \"last_checked\": \"2025-01-15T12:00:00Z\"\n            }\n\n        except Exception as e:\n            print(f\"Error checking {medication} at {pharmacy_id}: {e}\")\n\n    return monitoring_results\n\n# Usage\nasync def main():\n    medications = [\"lisinopril 10mg\", \"metformin 1000mg\", \"omeprazole 20mg\"]\n    pharmacies = [\"CVS001\", \"WAL001\", \"RIT001\"]\n\n    availability_status = await monitor_medication_availability(medications, pharmacies)\n\n    for pharmacy_id, medications_status in availability_status.items():\n        print(f\"\\n{pharmacy_id}:\")\n        for med, status in medications_status.items():\n            stock_status = \"\u2705 In Stock\" if status[\"in_stock\"] else \"\u274c Out of Stock\"\n            print(f\"  {med}: {stock_status} ({status['quantity']} units)\")\n\n# Run monitoring\n# asyncio.run(main())\n</code></pre>"},{"location":"api/pharmacy-tools/#pharmacy-network-integration","title":"Pharmacy Network Integration","text":"<pre><code>class PharmacyNetworkManager:\n    \"\"\"Manages integration with multiple pharmacy networks\"\"\"\n\n    def __init__(self):\n        self.pharmacy_tool = PharmacyTool()\n        self.network_configs = {\n            \"cvs\": {\"api_endpoint\": \"cvs.api\", \"auth_required\": True},\n            \"walgreens\": {\"api_endpoint\": \"wag.api\", \"auth_required\": True},\n            \"rite_aid\": {\"api_endpoint\": \"riteaid.api\", \"auth_required\": True}\n        }\n\n    def get_unified_availability(self, medication: str, zip_code: str) -&gt; dict:\n        \"\"\"Get availability across all supported pharmacy networks\"\"\"\n        all_pharmacies = safe_pharmacy_lookup(zip_code)\n\n        if not all_pharmacies.get(\"success\"):\n            return {\"error\": \"Unable to find pharmacies in area\"}\n\n        unified_results = {\n            \"medication\": medication,\n            \"search_area\": zip_code,\n            \"networks\": {},\n            \"summary\": {\n                \"total_pharmacies\": 0,\n                \"in_stock_count\": 0,\n                \"best_price\": None,\n                \"fastest_pickup\": None\n            }\n        }\n\n        for pharmacy in all_pharmacies[\"pharmacies\"]:\n            network = self.identify_network(pharmacy[\"id\"])\n\n            if network not in unified_results[\"networks\"]:\n                unified_results[\"networks\"][network] = {\n                    \"pharmacies\": [],\n                    \"avg_price\": 0,\n                    \"availability_rate\": 0\n                }\n\n            # Check availability at this pharmacy\n            availability = safe_medication_availability({\n                \"pharmacy_id\": pharmacy[\"id\"],\n                \"medication\": medication,\n                \"quantity\": 90\n            })\n\n            pharmacy_result = {\n                \"pharmacy\": pharmacy,\n                \"availability\": availability,\n                \"network\": network\n            }\n\n            unified_results[\"networks\"][network][\"pharmacies\"].append(pharmacy_result)\n            unified_results[\"summary\"][\"total_pharmacies\"] += 1\n\n            if availability.get(\"in_stock\"):\n                unified_results[\"summary\"][\"in_stock_count\"] += 1\n\n        # Calculate network statistics\n        for network, data in unified_results[\"networks\"].items():\n            if data[\"pharmacies\"]:\n                in_stock = sum(1 for p in data[\"pharmacies\"] \n                              if p[\"availability\"].get(\"in_stock\"))\n                data[\"availability_rate\"] = (in_stock / len(data[\"pharmacies\"])) * 100\n\n        return unified_results\n\n    def identify_network(self, pharmacy_id: str) -&gt; str:\n        \"\"\"Identify which network a pharmacy belongs to\"\"\"\n        if pharmacy_id.startswith(\"CVS\"):\n            return \"cvs\"\n        elif pharmacy_id.startswith(\"WAL\"):\n            return \"walgreens\"  \n        elif pharmacy_id.startswith(\"RIT\"):\n            return \"rite_aid\"\n        else:\n            return \"independent\"\n\n# Usage\nnetwork_manager = PharmacyNetworkManager()\navailability = network_manager.get_unified_availability(\"lisinopril 10mg\", \"90210\")\n\nprint(f\"Medication: {availability['medication']}\")\nprint(f\"Total Pharmacies: {availability['summary']['total_pharmacies']}\")\nprint(f\"In Stock: {availability['summary']['in_stock_count']}\")\n\nfor network, data in availability['networks'].items():\n    print(f\"\\n{network.upper()}:\")\n    print(f\"  Availability Rate: {data['availability_rate']:.1f}%\")\n    print(f\"  Locations: {len(data['pharmacies'])}\")\n</code></pre>"},{"location":"deployment/","title":"Deployment Guide","text":""},{"location":"deployment/#overview","title":"Overview","text":"<p>This guide covers deploying RxFlow Pharmacy Assistant using Docker and container orchestration. The application is available as a pre-built Docker image on Docker Hub for easy deployment.</p>"},{"location":"deployment/#docker-hub-image","title":"\ud83d\udc33 Docker Hub Image","text":"<p>Public Repository: <code>zarreh/rxflow-pharmacy-assistant:latest</code></p> <ul> <li>Image Size: 864MB (production optimized)</li> <li>Base: Python 3.12 slim</li> <li>Architecture: Multi-arch (amd64, arm64)</li> <li>Security: Non-root user execution</li> <li>Health Checks: Built-in container health monitoring</li> </ul>"},{"location":"deployment/#prerequisites","title":"Prerequisites","text":""},{"location":"deployment/#system-requirements","title":"System Requirements","text":"<ul> <li>Docker: 20.10+ and Docker Compose v2.0+</li> <li>Memory: Minimum 2GB RAM, recommended 4GB+ for production</li> <li>Storage: Minimum 5GB for image and logs</li> <li>CPU: 1+ core, 2+ cores recommended for production</li> <li>Network: Port 8080 available, HTTPS capability for production</li> </ul>"},{"location":"deployment/#required-environment-variables","title":"Required Environment Variables","text":"<ul> <li>OPENAI_API_KEY: Your OpenAI API key for production use</li> <li>DEFAULT_LLM_PROVIDER: Set to \"openai\" for production</li> </ul>"},{"location":"deployment/#quick-start-deployment","title":"\ud83d\ude80 Quick Start Deployment","text":""},{"location":"deployment/#1-docker-compose-recommended","title":"1. Docker Compose (Recommended)","text":"<pre><code># Clone the repository\ngit clone https://github.com/zarreh/rxflow-pharmacy-assistant.git\ncd rxflow-pharmacy-assistant\ngit checkout deployment\n\n# Configure environment\ncp .env.production.example .env\nnano .env  # Add your OpenAI API key\n\n# Deploy with Docker Compose\ndocker-compose up -d\n\n# Access at http://localhost:8080\n</code></pre>"},{"location":"deployment/#2-direct-docker-run","title":"2. Direct Docker Run","text":"<pre><code># Pull and run the image\ndocker run -d \\\n  --name rxflow-pharmacy-assistant \\\n  -p 8080:8080 \\\n  -e OPENAI_API_KEY=your_key_here \\\n  -e DEFAULT_LLM_PROVIDER=openai \\\n  -e USE_MOCK_DATA=true \\\n  zarreh/rxflow-pharmacy-assistant:latest\n</code></pre>"},{"location":"deployment/#3-vps-production-deployment","title":"3. VPS Production Deployment","text":"<pre><code># On your VPS (Ubuntu/Debian)\nsudo apt update &amp;&amp; sudo apt install -y docker.io docker-compose-v2\n\n# Clone and deploy\ngit clone https://github.com/zarreh/rxflow-pharmacy-assistant.git\ncd rxflow-pharmacy-assistant\ngit checkout deployment\n\n# Configure for production\ncp .env.production.example .env\n# Edit .env with your production settings\n\n# Deploy\ndocker-compose up -d\n\n# Optional: Set up reverse proxy (Nginx)\nsudo apt install -y nginx\n# Configure SSL and domain\n</code></pre>"},{"location":"deployment/#development-environment","title":"Development Environment","text":""},{"location":"deployment/#local-development-with-poetry","title":"Local Development with Poetry","text":"<pre><code># Build and run with Docker Compose\ndocker-compose -f docker-compose.dev.yml up --build\n\n# Access services:\n# - RxFlow App: http://localhost:8000\n# - Streamlit UI: http://localhost:8501\n# - PostgreSQL: localhost:5432\n# - Redis: localhost:6379\n</code></pre>"},{"location":"deployment/#environment-variables-for-development","title":"Environment Variables for Development","text":"<pre><code># .env.development\nENVIRONMENT=development\nDEBUG=true\n\n# LLM Configuration\nLLM_PROVIDER=openai\nLLM_API_KEY=your_openai_api_key_here\nLLM_MODEL=gpt-4\nLLM_TEMPERATURE=0.1\n\n# Database (optional for development)\nDB_HOST=localhost\nDB_PORT=5432\nDB_USERNAME=rxflow\nDB_PASSWORD=rxflow_dev_pass\nDB_DATABASE=rxflow_dev\n\n# Security (development only)\nSECRET_KEY=dev-secret-key-change-in-production\nENCRYPTION_KEY=dev-encryption-key-32-chars-long\n\n# Logging\nLOG_LEVEL=DEBUG\nLOG_FILE=logs/rxflow_dev.log\n</code></pre>"},{"location":"deployment/#staging-environment","title":"Staging Environment","text":""},{"location":"deployment/#staging-configuration","title":"Staging Configuration","text":"<p>Staging should mirror production as closely as possible while allowing for testing:</p> <pre><code># .env.staging\nENVIRONMENT=staging\nDEBUG=false\n\n# LLM Configuration (use staging API keys)\nLLM_PROVIDER=openai\nLLM_API_KEY=your_staging_openai_api_key\nLLM_MODEL=gpt-4\nLLM_TEMPERATURE=0.1\nLLM_MAX_TOKENS=1000\n\n# Database Configuration\nDB_HOST=staging-db.internal\nDB_PORT=5432\nDB_USERNAME=rxflow_staging\nDB_PASSWORD=secure_staging_password\nDB_DATABASE=rxflow_staging\nDB_SSL_MODE=require\n\n# Security\nSECRET_KEY=staging-secret-key-64-characters-minimum-for-security\nENCRYPTION_KEY=staging-encryption-key-must-be-32-chars\n\n# External Services\nREDIS_URL=redis://staging-redis.internal:6379\nPHARMACY_API_URL=https://staging-api.pharmacy.com\nPATIENT_API_URL=https://staging-patient-api.internal\n\n# Monitoring\nMETRICS_ENABLED=true\nHEALTH_CHECK_ENABLED=true\nLOG_LEVEL=INFO\n</code></pre>"},{"location":"deployment/#staging-docker-setup","title":"Staging Docker Setup","text":"<pre><code># docker-compose.staging.yml\nversion: '3.8'\n\nservices:\n  rxflow-app:\n    build:\n      context: .\n      dockerfile: Dockerfile.staging\n    environment:\n      - ENVIRONMENT=staging\n    env_file:\n      - .env.staging\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - postgres\n      - redis\n    networks:\n      - rxflow-staging\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:8000/health\"]\n      interval: 30s\n      timeout: 10s\n      retries: 3\n\n  postgres:\n    image: postgres:15\n    environment:\n      POSTGRES_DB: rxflow_staging\n      POSTGRES_USER: rxflow_staging\n      POSTGRES_PASSWORD: ${DB_PASSWORD}\n    volumes:\n      - postgres_staging_data:/var/lib/postgresql/data\n    networks:\n      - rxflow-staging\n\n  redis:\n    image: redis:7-alpine\n    command: redis-server --requirepass ${REDIS_PASSWORD}\n    volumes:\n      - redis_staging_data:/data\n    networks:\n      - rxflow-staging\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx/staging.conf:/etc/nginx/nginx.conf\n      - ./ssl/staging:/etc/nginx/ssl\n    depends_on:\n      - rxflow-app\n    networks:\n      - rxflow-staging\n\nvolumes:\n  postgres_staging_data:\n  redis_staging_data:\n\nnetworks:\n  rxflow-staging:\n    driver: bridge\n</code></pre>"},{"location":"deployment/#production-deployment","title":"Production Deployment","text":""},{"location":"deployment/#production-infrastructure-requirements","title":"Production Infrastructure Requirements","text":"<p>For healthcare applications, production deployment requires:</p> <ol> <li>High Availability: Multiple instances, load balancing, failover</li> <li>Security: WAF, DDoS protection, intrusion detection</li> <li>Compliance: HIPAA, SOC 2, logging and audit trails</li> <li>Monitoring: 24/7 monitoring, alerting, health checks</li> <li>Backup: Automated backups, disaster recovery plan</li> </ol>"},{"location":"deployment/#aws-production-deployment","title":"AWS Production Deployment","text":""},{"location":"deployment/#infrastructure-as-code-terraform","title":"Infrastructure as Code (Terraform)","text":"<pre><code># terraform/main.tf\nprovider \"aws\" {\n  region = var.aws_region\n}\n\n# VPC Configuration\nresource \"aws_vpc\" \"rxflow_vpc\" {\n  cidr_block           = \"10.0.0.0/16\"\n  enable_dns_hostnames = true\n  enable_dns_support   = true\n\n  tags = {\n    Name        = \"rxflow-vpc\"\n    Environment = \"production\"\n  }\n}\n\n# Private Subnets for Application\nresource \"aws_subnet\" \"private_subnets\" {\n  count             = length(var.availability_zones)\n  vpc_id            = aws_vpc.rxflow_vpc.id\n  cidr_block        = \"10.0.${count.index + 1}.0/24\"\n  availability_zone = var.availability_zones[count.index]\n\n  tags = {\n    Name = \"rxflow-private-subnet-${count.index + 1}\"\n  }\n}\n\n# RDS Database\nresource \"aws_db_instance\" \"rxflow_db\" {\n  identifier     = \"rxflow-production\"\n  engine         = \"postgres\"\n  engine_version = \"15.4\"\n  instance_class = \"db.r6g.large\"\n\n  allocated_storage     = 100\n  max_allocated_storage = 1000\n  storage_type          = \"gp3\"\n  storage_encrypted     = true\n\n  db_name  = \"rxflow_prod\"\n  username = \"rxflow\"\n  password = var.db_password\n\n  vpc_security_group_ids = [aws_security_group.rds_sg.id]\n  db_subnet_group_name   = aws_db_subnet_group.rxflow_db_subnet.name\n\n  backup_retention_period = 30\n  backup_window          = \"03:00-04:00\"\n  maintenance_window     = \"sun:04:00-sun:05:00\"\n\n  skip_final_snapshot = false\n  final_snapshot_identifier = \"rxflow-final-snapshot\"\n\n  tags = {\n    Name        = \"rxflow-production-db\"\n    Environment = \"production\"\n  }\n}\n\n# ECS Cluster for Application\nresource \"aws_ecs_cluster\" \"rxflow_cluster\" {\n  name = \"rxflow-production\"\n\n  configuration {\n    execute_command_configuration {\n      logging = \"OVERRIDE\"\n      log_configuration {\n        cloud_watch_log_group_name = aws_cloudwatch_log_group.ecs_logs.name\n      }\n    }\n  }\n\n  tags = {\n    Name        = \"rxflow-cluster\"\n    Environment = \"production\"\n  }\n}\n\n# Application Load Balancer\nresource \"aws_lb\" \"rxflow_alb\" {\n  name               = \"rxflow-alb\"\n  internal           = false\n  load_balancer_type = \"application\"\n  security_groups    = [aws_security_group.alb_sg.id]\n  subnets           = aws_subnet.public_subnets[*].id\n\n  enable_deletion_protection = true\n  enable_http2              = true\n\n  tags = {\n    Name        = \"rxflow-alb\"\n    Environment = \"production\"\n  }\n}\n</code></pre>"},{"location":"deployment/#ecs-task-definition","title":"ECS Task Definition","text":"<pre><code>{\n  \"family\": \"rxflow-production\",\n  \"networkMode\": \"awsvpc\",\n  \"requiresCompatibilities\": [\"FARGATE\"],\n  \"cpu\": \"1024\",\n  \"memory\": \"2048\",\n  \"executionRoleArn\": \"arn:aws:iam::account:role/ecsTaskExecutionRole\",\n  \"taskRoleArn\": \"arn:aws:iam::account:role/ecsTaskRole\",\n  \"containerDefinitions\": [\n    {\n      \"name\": \"rxflow-app\",\n      \"image\": \"your-account.dkr.ecr.us-west-2.amazonaws.com/rxflow:latest\",\n      \"portMappings\": [\n        {\n          \"containerPort\": 8000,\n          \"protocol\": \"tcp\"\n        }\n      ],\n      \"environment\": [\n        {\n          \"name\": \"ENVIRONMENT\",\n          \"value\": \"production\"\n        }\n      ],\n      \"secrets\": [\n        {\n          \"name\": \"LLM_API_KEY\",\n          \"valueFrom\": \"arn:aws:secretsmanager:us-west-2:account:secret:rxflow/llm-api-key\"\n        },\n        {\n          \"name\": \"DB_PASSWORD\",\n          \"valueFrom\": \"arn:aws:secretsmanager:us-west-2:account:secret:rxflow/db-password\"\n        }\n      ],\n      \"logConfiguration\": {\n        \"logDriver\": \"awslogs\",\n        \"options\": {\n          \"awslogs-group\": \"/ecs/rxflow-production\",\n          \"awslogs-region\": \"us-west-2\",\n          \"awslogs-stream-prefix\": \"ecs\"\n        }\n      },\n      \"healthCheck\": {\n        \"command\": [\n          \"CMD-SHELL\",\n          \"curl -f http://localhost:8000/health || exit 1\"\n        ],\n        \"interval\": 30,\n        \"timeout\": 5,\n        \"retries\": 3,\n        \"startPeriod\": 60\n      }\n    }\n  ]\n}\n</code></pre>"},{"location":"deployment/#production-environment-variables","title":"Production Environment Variables","text":"<pre><code># .env.production (stored in AWS Secrets Manager)\nENVIRONMENT=production\nDEBUG=false\n\n# LLM Configuration\nLLM_PROVIDER=openai\nLLM_API_KEY=prod_openai_api_key_from_secrets_manager\nLLM_MODEL=gpt-4\nLLM_TEMPERATURE=0.1\nLLM_MAX_TOKENS=1000\nLLM_RATE_LIMIT_PER_MINUTE=100\n\n# Database Configuration\nDB_HOST=rxflow-production.cluster-xyz.us-west-2.rds.amazonaws.com\nDB_PORT=5432\nDB_USERNAME=rxflow\nDB_PASSWORD=secure_production_password_from_secrets_manager\nDB_DATABASE=rxflow_prod\nDB_SSL_MODE=require\nDB_CONNECTION_POOL_SIZE=20\n\n# Security\nSECRET_KEY=production_secret_key_64_characters_minimum_stored_securely\nENCRYPTION_KEY=production_encryption_key_32_chars_secure\nJWT_EXPIRY_HOURS=24\nRATE_LIMIT_PER_MINUTE=60\n\n# External Services\nREDIS_URL=redis://rxflow-prod-cache.abc123.cache.amazonaws.com:6379\nPHARMACY_API_URL=https://api.pharmacy.com\nPATIENT_API_URL=https://patient-api.healthcare-org.com\nRXNORM_API_URL=https://rxnav.nlm.nih.gov/REST\n\n# Monitoring and Logging\nMETRICS_ENABLED=true\nHEALTH_CHECK_ENABLED=true\nLOG_LEVEL=INFO\nLOG_FORMAT=json\nSENTRY_DSN=https://your-sentry-dsn-here\n\n# Feature Flags\nENHANCED_DRUG_CHECKING=true\nMULTI_PHARMACY_COMPARISON=true\nREAL_TIME_INVENTORY=true\nAI_CLINICAL_RECOMMENDATIONS=true\n\n# Compliance\nAUDIT_LOGGING=true\nHIPAA_COMPLIANT_LOGGING=true\nDATA_RETENTION_DAYS=2555  # 7 years for healthcare\n</code></pre>"},{"location":"deployment/#kubernetes-production-deployment","title":"Kubernetes Production Deployment","text":""},{"location":"deployment/#namespace-and-configuration","title":"Namespace and Configuration","text":"<pre><code># k8s/namespace.yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: rxflow-production\n  labels:\n    name: rxflow-production\n    environment: production\n\n---\n# k8s/configmap.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: rxflow-config\n  namespace: rxflow-production\ndata:\n  ENVIRONMENT: \"production\"\n  DEBUG: \"false\"\n  LLM_PROVIDER: \"openai\"\n  LLM_MODEL: \"gpt-4\"\n  LLM_TEMPERATURE: \"0.1\"\n  DB_HOST: \"postgres-service.rxflow-production.svc.cluster.local\"\n  DB_PORT: \"5432\"\n  DB_USERNAME: \"rxflow\"\n  DB_DATABASE: \"rxflow_prod\"\n  LOG_LEVEL: \"INFO\"\n  METRICS_ENABLED: \"true\"\n\n---\n# k8s/secrets.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: rxflow-secrets\n  namespace: rxflow-production\ntype: Opaque\ndata:\n  LLM_API_KEY: &lt;base64-encoded-api-key&gt;\n  DB_PASSWORD: &lt;base64-encoded-db-password&gt;\n  SECRET_KEY: &lt;base64-encoded-secret-key&gt;\n  ENCRYPTION_KEY: &lt;base64-encoded-encryption-key&gt;\n</code></pre>"},{"location":"deployment/#production-deployment_1","title":"Production Deployment","text":"<pre><code># k8s/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: rxflow-app\n  namespace: rxflow-production\n  labels:\n    app: rxflow-app\n    version: v1.0.0\nspec:\n  replicas: 3\n  strategy:\n    type: RollingUpdate\n    rollingUpdate:\n      maxSurge: 1\n      maxUnavailable: 0\n  selector:\n    matchLabels:\n      app: rxflow-app\n  template:\n    metadata:\n      labels:\n        app: rxflow-app\n        version: v1.0.0\n    spec:\n      serviceAccountName: rxflow-service-account\n      securityContext:\n        runAsNonRoot: true\n        runAsUser: 1001\n        fsGroup: 1001\n      containers:\n      - name: rxflow-app\n        image: your-registry.com/rxflow:v1.0.0\n        imagePullPolicy: Always\n        ports:\n        - name: http\n          containerPort: 8000\n          protocol: TCP\n        envFrom:\n        - configMapRef:\n            name: rxflow-config\n        - secretRef:\n            name: rxflow-secrets\n        resources:\n          requests:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n          limits:\n            memory: \"2Gi\"\n            cpu: \"1000m\"\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: http\n          initialDelaySeconds: 30\n          periodSeconds: 10\n          timeoutSeconds: 5\n          failureThreshold: 3\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: http\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          timeoutSeconds: 3\n          failureThreshold: 3\n        securityContext:\n          allowPrivilegeEscalation: false\n          readOnlyRootFilesystem: true\n          capabilities:\n            drop:\n            - ALL\n        volumeMounts:\n        - name: tmp\n          mountPath: /tmp\n        - name: logs\n          mountPath: /app/logs\n      volumes:\n      - name: tmp\n        emptyDir: {}\n      - name: logs\n        persistentVolumeClaim:\n          claimName: rxflow-logs-pvc\n\n---\n# k8s/service.yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: rxflow-service\n  namespace: rxflow-production\n  labels:\n    app: rxflow-app\nspec:\n  type: ClusterIP\n  ports:\n  - port: 80\n    targetPort: http\n    protocol: TCP\n    name: http\n  selector:\n    app: rxflow-app\n\n---\n# k8s/ingress.yaml\napiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: rxflow-ingress\n  namespace: rxflow-production\n  annotations:\n    kubernetes.io/ingress.class: nginx\n    cert-manager.io/cluster-issuer: letsencrypt-prod\n    nginx.ingress.kubernetes.io/ssl-redirect: \"true\"\n    nginx.ingress.kubernetes.io/force-ssl-redirect: \"true\"\n    nginx.ingress.kubernetes.io/backend-protocol: \"HTTP\"\n    nginx.ingress.kubernetes.io/rate-limit-rps: \"10\"\nspec:\n  tls:\n  - hosts:\n    - rxflow.yourdomain.com\n    secretName: rxflow-tls-secret\n  rules:\n  - host: rxflow.yourdomain.com\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: rxflow-service\n            port:\n              number: 80\n</code></pre>"},{"location":"deployment/#horizontal-pod-autoscaler","title":"Horizontal Pod Autoscaler","text":"<pre><code># k8s/hpa.yaml\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: rxflow-hpa\n  namespace: rxflow-production\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: rxflow-app\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n  behavior:\n    scaleDown:\n      stabilizationWindowSeconds: 300\n      policies:\n      - type: Percent\n        value: 10\n        periodSeconds: 60\n    scaleUp:\n      stabilizationWindowSeconds: 0\n      policies:\n      - type: Percent\n        value: 100\n        periodSeconds: 15\n</code></pre>"},{"location":"deployment/#database-management","title":"Database Management","text":""},{"location":"deployment/#production-database-setup","title":"Production Database Setup","text":"<pre><code>-- init_production.sql\n-- Create production database with proper permissions and security\n\n-- Create read-only user for reporting\nCREATE USER rxflow_readonly WITH PASSWORD 'secure_readonly_password';\nGRANT CONNECT ON DATABASE rxflow_prod TO rxflow_readonly;\nGRANT USAGE ON SCHEMA public TO rxflow_readonly;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO rxflow_readonly;\n\n-- Create backup user\nCREATE USER rxflow_backup WITH PASSWORD 'secure_backup_password';\nGRANT CONNECT ON DATABASE rxflow_prod TO rxflow_backup;\nGRANT USAGE ON SCHEMA public TO rxflow_backup;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO rxflow_backup;\n\n-- Enable logging for audit trail\nALTER SYSTEM SET log_statement = 'all';\nALTER SYSTEM SET log_connections = 'on';\nALTER SYSTEM SET log_disconnections = 'on';\nALTER SYSTEM SET log_checkpoints = 'on';\n\n-- Configure for performance\nALTER SYSTEM SET shared_buffers = '256MB';\nALTER SYSTEM SET effective_cache_size = '1GB';\nALTER SYSTEM SET maintenance_work_mem = '64MB';\nALTER SYSTEM SET checkpoint_completion_target = 0.9;\n\nSELECT pg_reload_conf();\n</code></pre>"},{"location":"deployment/#database-migrations","title":"Database Migrations","text":"<pre><code># scripts/migrate_production.py\nimport os\nimport psycopg2\nfrom pathlib import Path\n\ndef run_production_migration():\n    \"\"\"Run database migrations in production environment\"\"\"\n\n    # Production database connection\n    conn_params = {\n        'host': os.getenv('DB_HOST'),\n        'port': os.getenv('DB_PORT', 5432),\n        'database': os.getenv('DB_DATABASE'),\n        'user': os.getenv('DB_USERNAME'),\n        'password': os.getenv('DB_PASSWORD'),\n        'sslmode': 'require'  # Always use SSL in production\n    }\n\n    migration_files = sorted(Path('migrations').glob('*.sql'))\n\n    with psycopg2.connect(**conn_params) as conn:\n        with conn.cursor() as cur:\n            # Create migration tracking table\n            cur.execute(\"\"\"\n                CREATE TABLE IF NOT EXISTS migration_history (\n                    id SERIAL PRIMARY KEY,\n                    filename VARCHAR(255) NOT NULL,\n                    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n                    checksum VARCHAR(64) NOT NULL\n                )\n            \"\"\")\n\n            # Get applied migrations\n            cur.execute(\"SELECT filename FROM migration_history\")\n            applied = {row[0] for row in cur.fetchall()}\n\n            # Apply new migrations\n            for migration_file in migration_files:\n                if migration_file.name not in applied:\n                    print(f\"Applying migration: {migration_file.name}\")\n\n                    # Read and execute migration\n                    with open(migration_file, 'r') as f:\n                        migration_sql = f.read()\n\n                    # Calculate checksum\n                    import hashlib\n                    checksum = hashlib.sha256(migration_sql.encode()).hexdigest()\n\n                    # Execute migration\n                    cur.execute(migration_sql)\n\n                    # Record migration\n                    cur.execute(\n                        \"INSERT INTO migration_history (filename, checksum) VALUES (%s, %s)\",\n                        (migration_file.name, checksum)\n                    )\n\n                    print(f\"\u2705 Migration {migration_file.name} applied successfully\")\n\n            conn.commit()\n            print(\"\ud83c\udf89 All migrations completed successfully\")\n\nif __name__ == \"__main__\":\n    run_production_migration()\n</code></pre>"},{"location":"deployment/#monitoring-and-alerting","title":"Monitoring and Alerting","text":""},{"location":"deployment/#prometheus-configuration","title":"Prometheus Configuration","text":"<pre><code># monitoring/prometheus.yml\nglobal:\n  scrape_interval: 15s\n  evaluation_interval: 15s\n\nrule_files:\n  - \"rxflow_alerts.yml\"\n\nscrape_configs:\n  - job_name: 'rxflow-app'\n    kubernetes_sd_configs:\n      - role: endpoints\n        namespaces:\n          names:\n            - rxflow-production\n    relabel_configs:\n      - source_labels: [__meta_kubernetes_service_name]\n        action: keep\n        regex: rxflow-service\n      - source_labels: [__meta_kubernetes_endpoint_port_name]\n        action: keep\n        regex: metrics\n\nalerting:\n  alertmanagers:\n    - kubernetes_sd_configs:\n        - role: endpoints\n          namespaces:\n            names:\n              - monitoring\n      relabel_configs:\n        - source_labels: [__meta_kubernetes_service_name]\n          regex: alertmanager\n          action: keep\n</code></pre>"},{"location":"deployment/#alert-rules","title":"Alert Rules","text":"<pre><code># monitoring/rxflow_alerts.yml\ngroups:\n- name: rxflow.rules\n  rules:\n  - alert: RxFlowHighErrorRate\n    expr: rate(http_requests_total{status=~\"5..\"}[5m]) &gt; 0.1\n    for: 2m\n    labels:\n      severity: critical\n    annotations:\n      summary: \"High error rate in RxFlow application\"\n      description: \"Error rate is {{ $value }} requests per second\"\n\n  - alert: RxFlowHighResponseTime\n    expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) &gt; 2\n    for: 5m\n    labels:\n      severity: warning\n    annotations:\n      summary: \"High response time in RxFlow application\"\n      description: \"95th percentile response time is {{ $value }} seconds\"\n\n  - alert: RxFlowDatabaseConnectionFailure\n    expr: up{job=\"rxflow-database\"} == 0\n    for: 1m\n    labels:\n      severity: critical\n    annotations:\n      summary: \"RxFlow database connection failure\"\n      description: \"Cannot connect to RxFlow database\"\n\n  - alert: RxFlowLowDiskSpace\n    expr: node_filesystem_avail_bytes{mountpoint=\"/\"} / node_filesystem_size_bytes{mountpoint=\"/\"} * 100 &lt; 10\n    for: 5m\n    labels:\n      severity: warning\n    annotations:\n      summary: \"Low disk space on RxFlow server\"\n      description: \"Disk space is below 10%\"\n</code></pre>"},{"location":"deployment/#backup-and-disaster-recovery","title":"Backup and Disaster Recovery","text":""},{"location":"deployment/#automated-database-backups","title":"Automated Database Backups","text":"<pre><code>#!/bin/bash\n# scripts/backup_production.sh\n\nset -e\n\n# Configuration\nBACKUP_DIR=\"/backups/rxflow\"\nRETENTION_DAYS=30\nS3_BUCKET=\"rxflow-production-backups\"\n\n# Database configuration from environment\nDB_HOST=${DB_HOST}\nDB_PORT=${DB_PORT:-5432}\nDB_NAME=${DB_DATABASE}\nDB_USER=${DB_USERNAME}\n\n# Create backup directory\nmkdir -p ${BACKUP_DIR}\n\n# Generate backup filename with timestamp\nBACKUP_FILE=\"${BACKUP_DIR}/rxflow_$(date +%Y%m%d_%H%M%S).sql\"\n\n# Create database backup\npg_dump \\\n  --host=${DB_HOST} \\\n  --port=${DB_PORT} \\\n  --username=${DB_USER} \\\n  --dbname=${DB_NAME} \\\n  --no-password \\\n  --format=custom \\\n  --compress=9 \\\n  --file=${BACKUP_FILE}\n\n# Compress backup\ngzip ${BACKUP_FILE}\nBACKUP_FILE=\"${BACKUP_FILE}.gz\"\n\necho \"\u2705 Database backup created: ${BACKUP_FILE}\"\n\n# Upload to S3\naws s3 cp ${BACKUP_FILE} s3://${S3_BUCKET}/database/\necho \"\u2705 Backup uploaded to S3\"\n\n# Clean up old backups locally\nfind ${BACKUP_DIR} -name \"*.sql.gz\" -mtime +${RETENTION_DAYS} -delete\necho \"\u2705 Old local backups cleaned up\"\n\n# Clean up old S3 backups (keep last 90 days)\naws s3 ls s3://${S3_BUCKET}/database/ --recursive | \\\n  awk '{if($1 &lt; \"'$(date -d '90 days ago' '+%Y-%m-%d')'\") print $4}' | \\\n  xargs -I {} aws s3 rm s3://${S3_BUCKET}/{}\n\necho \"\u2705 Old S3 backups cleaned up\"\necho \"\ud83c\udf89 Backup process completed successfully\"\n</code></pre>"},{"location":"deployment/#disaster-recovery-procedures","title":"Disaster Recovery Procedures","text":"<pre><code>#!/bin/bash\n# scripts/restore_production.sh\n\nset -e\n\n# Restore from backup file\nrestore_from_backup() {\n    local backup_file=$1\n\n    echo \"\ud83d\udd04 Starting database restore from ${backup_file}\"\n\n    # Stop application temporarily\n    kubectl scale deployment rxflow-app --replicas=0 -n rxflow-production\n\n    # Create new database for restore\n    createdb -h ${DB_HOST} -U ${DB_USER} rxflow_restored\n\n    # Restore data\n    pg_restore \\\n      --host=${DB_HOST} \\\n      --port=${DB_PORT} \\\n      --username=${DB_USER} \\\n      --dbname=rxflow_restored \\\n      --clean \\\n      --if-exists \\\n      ${backup_file}\n\n    echo \"\u2705 Database restored successfully\"\n\n    # Update application configuration to use restored database\n    kubectl patch configmap rxflow-config \\\n      -p '{\"data\":{\"DB_DATABASE\":\"rxflow_restored\"}}' \\\n      -n rxflow-production\n\n    # Restart application\n    kubectl scale deployment rxflow-app --replicas=3 -n rxflow-production\n\n    echo \"\ud83c\udf89 Disaster recovery completed successfully\"\n}\n\n# Point-in-time recovery\nrestore_point_in_time() {\n    local target_time=$1\n\n    echo \"\ud83d\udd04 Starting point-in-time recovery to ${target_time}\"\n\n    # This would use AWS RDS point-in-time recovery or PostgreSQL WAL-E\n    # Implementation depends on your backup strategy\n\n    aws rds restore-db-instance-to-point-in-time \\\n      --source-db-instance-identifier rxflow-production \\\n      --target-db-instance-identifier rxflow-pitr-restore \\\n      --restore-time ${target_time}\n\n    echo \"\u2705 Point-in-time recovery initiated\"\n}\n\n# Usage\ncase \"$1\" in\n    \"backup\")\n        backup_file=\"$2\"\n        restore_from_backup \"$backup_file\"\n        ;;\n    \"pitr\")\n        target_time=\"$2\"\n        restore_point_in_time \"$target_time\"\n        ;;\n    *)\n        echo \"Usage: $0 {backup|pitr} &lt;backup_file_or_target_time&gt;\"\n        exit 1\n        ;;\nesac\n</code></pre>"},{"location":"deployment/#security-hardening","title":"Security Hardening","text":""},{"location":"deployment/#production-security-checklist","title":"Production Security Checklist","text":"<ul> <li> SSL/TLS Configuration</li> <li> TLS 1.3 enabled</li> <li> Strong cipher suites only</li> <li> HSTS headers configured</li> <li> <p> Certificate auto-renewal setup</p> </li> <li> <p> Authentication &amp; Authorization</p> </li> <li> Multi-factor authentication enabled</li> <li> Role-based access control implemented</li> <li> API key rotation policy in place</li> <li> <p> Session management configured</p> </li> <li> <p> Data Protection</p> </li> <li> Database encryption at rest</li> <li> Application-level encryption for PII</li> <li> Secure key management (AWS KMS/HashiCorp Vault)</li> <li> <p> Data masking for non-production environments</p> </li> <li> <p> Network Security</p> </li> <li> VPC/Network segmentation</li> <li> Web Application Firewall (WAF) configured</li> <li> DDoS protection enabled</li> <li> <p> Intrusion detection system</p> </li> <li> <p> Compliance &amp; Auditing</p> </li> <li> HIPAA compliance validated</li> <li> Audit logging enabled</li> <li> Log retention policy configured</li> <li> Regular security assessments scheduled</li> </ul>"},{"location":"deployment/#security-configuration","title":"Security Configuration","text":"<pre><code># config/security_production.py\nimport os\nfrom cryptography.fernet import Fernet\n\nclass ProductionSecurityConfig:\n    \"\"\"Production security configuration\"\"\"\n\n    # Encryption\n    ENCRYPTION_KEY = os.getenv('ENCRYPTION_KEY')\n    FERNET_CIPHER = Fernet(ENCRYPTION_KEY.encode()) if ENCRYPTION_KEY else None\n\n    # Authentication\n    JWT_SECRET_KEY = os.getenv('JWT_SECRET_KEY')\n    JWT_ALGORITHM = 'HS256'\n    JWT_EXPIRY_HOURS = 24\n\n    # Password Requirements\n    MIN_PASSWORD_LENGTH = 12\n    REQUIRE_SPECIAL_CHARS = True\n    REQUIRE_MIXED_CASE = True\n    REQUIRE_NUMBERS = True\n\n    # Rate Limiting\n    API_RATE_LIMIT = '100/hour'\n    AUTH_RATE_LIMIT = '5/minute'\n\n    # Session Security\n    SESSION_COOKIE_SECURE = True\n    SESSION_COOKIE_HTTPONLY = True\n    SESSION_COOKIE_SAMESITE = 'Strict'\n\n    # CORS Configuration\n    ALLOWED_ORIGINS = [\n        'https://rxflow.yourdomain.com',\n        'https://admin.yourdomain.com'\n    ]\n\n    # Security Headers\n    SECURITY_HEADERS = {\n        'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\n        'X-Content-Type-Options': 'nosniff',\n        'X-Frame-Options': 'DENY',\n        'X-XSS-Protection': '1; mode=block',\n        'Content-Security-Policy': \"default-src 'self'; script-src 'self'\"\n    }\n</code></pre> <p>This comprehensive deployment guide provides everything needed to deploy RxFlow Pharmacy Assistant securely in production healthcare environments while maintaining compliance with healthcare regulations and security best practices.</p>"},{"location":"deployment/deployment-checklist/","title":"\u2705 Production Deployment Checklist","text":""},{"location":"deployment/deployment-checklist/#files-createdmodified-for-production-deployment","title":"Files Created/Modified for Production Deployment","text":""},{"location":"deployment/deployment-checklist/#docker-configuration","title":"\ud83d\udc33 Docker Configuration","text":"<ul> <li> <code>Dockerfile</code> - Multi-stage production build with Poetry</li> <li> <code>docker-compose.yml</code> - Production deployment configuration  </li> <li> <code>.dockerignore</code> - Optimized for minimal image size</li> </ul>"},{"location":"deployment/deployment-checklist/#environment-configuration","title":"\u2699\ufe0f Environment Configuration","text":"<ul> <li> <code>.env.production.example</code> - Production environment template</li> <li> Updated <code>.env.example</code> - Cleaned up for production use</li> </ul>"},{"location":"deployment/deployment-checklist/#dependencies-optimization","title":"\ud83d\udce6 Dependencies Optimization","text":"<ul> <li> <code>pyproject.toml</code> - Separated production vs development dependencies</li> <li> Removed <code>requirements.txt</code> (using Poetry)</li> </ul>"},{"location":"deployment/deployment-checklist/#deployment-scripts","title":"\ud83d\ude80 Deployment Scripts","text":"<ul> <li> <code>build-and-push.sh</code> - Automated build and push to Docker Hub</li> <li> <code>DEPLOYMENT.md</code> - Complete deployment guide</li> </ul>"},{"location":"deployment/deployment-checklist/#production-dependencies-analysis","title":"Production Dependencies Analysis","text":""},{"location":"deployment/deployment-checklist/#required-kept-in-production","title":"\u2705 Required (Kept in Production)","text":"<ul> <li><code>streamlit</code> - Web framework \u2713</li> <li><code>langchain</code> + <code>langgraph</code> - AI orchestration \u2713  </li> <li><code>langchain-community</code> + <code>langchain-openai</code> - LangChain integrations \u2713</li> <li><code>requests</code> - HTTP client \u2713</li> <li><code>python-dotenv</code> - Environment management \u2713</li> <li><code>pydantic</code> + <code>pydantic-settings</code> - Data validation \u2713</li> <li><code>geopy</code> - Location services (used in helpers.py) \u2713</li> <li><code>typing-extensions</code> - Type hints \u2713</li> </ul>"},{"location":"deployment/deployment-checklist/#removed-from-production-moved-to-dev","title":"\u274c Removed from Production (Moved to Dev)","text":"<ul> <li><code>langchain-ollama</code> - Local LLM (dev only) \u274c</li> <li><code>faiss-cpu</code> - Vector database (not used) \u274c</li> <li><code>sentence-transformers</code> - Embeddings (not implemented) \u274c</li> <li><code>numpy</code> - Data analysis (not imported) \u274c</li> <li><code>pandas</code> - Data analysis (not imported) \u274c</li> </ul>"},{"location":"deployment/deployment-checklist/#next-steps-for-deployment","title":"\ud83c\udfaf Next Steps for Deployment","text":"<ol> <li> <p>Test Local Build <pre><code>docker build -t zarreh/rxflow-pharmacy-assistant:latest .\n</code></pre></p> </li> <li> <p>Configure Production Environment <pre><code>cp .env.production.example .env\n# Edit .env with your OpenAI API key\n</code></pre></p> </li> <li> <p>Build and Push to Docker Hub <pre><code>./build-and-push.sh\n</code></pre></p> </li> <li> <p>Deploy to VPS <pre><code># On your VPS\ngit clone &lt;repo-url&gt;\ncd rxflow-pharmacy-assistant  \ngit checkout deployment\ncp .env.production.example .env\n# Configure .env\ndocker-compose up -d\n</code></pre></p> </li> </ol>"},{"location":"deployment/deployment-checklist/#estimated-image-size-reduction","title":"\ud83d\udcca Estimated Image Size Reduction","text":"<ul> <li>Before: ~1.2GB (with all dependencies)</li> <li>After: ~500MB (production optimized)</li> <li>Reduction: ~58% smaller image</li> </ul>"},{"location":"deployment/deployment-checklist/#security-features","title":"\ud83d\udd10 Security Features","text":"<ul> <li>Non-root user execution</li> <li>Minimal base image (python:3.12-slim)</li> <li>Production-only dependencies</li> <li>Health checks for monitoring</li> <li>Resource limits configured</li> </ul>"},{"location":"deployment/deployment-checklist/#access-points","title":"\ud83c\udf10 Access Points","text":"<ul> <li>Application: http://your-vps:8080</li> <li>Health Check: http://your-vps:8080/_stcore/health</li> <li>Docker Hub: https://hub.docker.com/r/zarreh/rxflow-pharmacy-assistant</li> </ul>"},{"location":"deployment/docker-deployment/","title":"\ufffd Docker Deployment Guide","text":"<p>This comprehensive guide covers deploying RxFlow Pharmacy Assistant using Docker in production environments.</p>"},{"location":"deployment/docker-deployment/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<ul> <li>Docker and Docker Compose installed</li> <li>Docker Hub account (username: <code>zarreh</code>)</li> <li>OpenAI API key for production use</li> </ul>"},{"location":"deployment/docker-deployment/#production-dependencies","title":"\ud83c\udfd7\ufe0f Production Dependencies","text":"<p>The production build includes only essential dependencies:</p> <p>Production Dependencies: - <code>streamlit</code> - Web framework - <code>langchain</code> &amp; <code>langgraph</code> - AI orchestration - <code>langchain-community</code> &amp; <code>langchain-openai</code> - LangChain integrations - <code>requests</code> - HTTP client - <code>python-dotenv</code> - Environment management - <code>pydantic</code> &amp; <code>pydantic-settings</code> - Data validation - <code>geopy</code> - Location services (for pharmacy distance calculations) - <code>typing-extensions</code> - Type hints</p> <p>Excluded from Production (Dev only): - <code>langchain-ollama</code> - Local LLM (dev only) - <code>faiss-cpu</code> - Vector database (not implemented) - <code>sentence-transformers</code> - Embeddings (not implemented) - <code>numpy</code> &amp; <code>pandas</code> - Data analysis (not used) - All development tools (pytest, black, mypy, etc.)</p>"},{"location":"deployment/docker-deployment/#docker-deployment","title":"\ud83d\udc33 Docker Deployment","text":""},{"location":"deployment/docker-deployment/#1-configure-environment","title":"1. Configure Environment","text":"<pre><code># Copy production environment template\ncp .env.production.example .env\n\n# Edit with your production settings\nnano .env\n</code></pre> <p>Required Environment Variables: <pre><code>OPENAI_API_KEY=your_production_openai_key\nDEFAULT_LLM_PROVIDER=openai\nOPENAI_MODEL=gpt-4o-mini\nDEBUG=false\nLOG_LEVEL=INFO\n</code></pre></p>"},{"location":"deployment/docker-deployment/#2-build-and-push-to-docker-hub","title":"2. Build and Push to Docker Hub","text":"<pre><code># Build and push the image\n./build-and-push.sh\n\n# Or specify a version\n./build-and-push.sh v1.0.0\n</code></pre>"},{"location":"deployment/docker-deployment/#3-deploy-with-docker-compose","title":"3. Deploy with Docker Compose","text":"<pre><code># Pull and run the latest image\ndocker-compose up -d\n\n# Check status\ndocker-compose ps\ndocker-compose logs -f\n</code></pre>"},{"location":"deployment/docker-deployment/#4-manual-docker-run","title":"4. Manual Docker Run","text":"<pre><code># Run the container directly\ndocker run -d \\\n  --name rxflow-pharmacy-assistant \\\n  -p 8080:8080 \\\n  --env-file .env \\\n  zarreh/rxflow-pharmacy-assistant:latest\n</code></pre>"},{"location":"deployment/docker-deployment/#vps-deployment","title":"\ud83c\udf10 VPS Deployment","text":""},{"location":"deployment/docker-deployment/#1-server-setup","title":"1. Server Setup","text":"<pre><code># Install Docker on your VPS\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsh get-docker.sh\n\n# Install Docker Compose\nsudo curl -L \"https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n</code></pre>"},{"location":"deployment/docker-deployment/#2-deploy-to-vps","title":"2. Deploy to VPS","text":"<pre><code># Clone the repository on your VPS\ngit clone https://github.com/zarreh/rxflow-pharmacy-assistant.git\ncd rxflow-pharmacy-assistant\n\n# Switch to deployment branch\ngit checkout deployment\n\n# Configure environment\ncp .env.production.example .env\nnano .env  # Add your production values\n\n# Deploy\ndocker-compose up -d\n</code></pre>"},{"location":"deployment/docker-deployment/#3-configure-reverse-proxy-nginx","title":"3. Configure Reverse Proxy (Nginx)","text":"<pre><code># /etc/nginx/sites-available/rxflow\nserver {\n    listen 80;\n    server_name your-domain.com;\n\n    location / {\n        proxy_pass http://localhost:8080;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection 'upgrade';\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n</code></pre>"},{"location":"deployment/docker-deployment/#monitoring-and-health-checks","title":"\ud83d\udd0d Monitoring and Health Checks","text":""},{"location":"deployment/docker-deployment/#health-check-endpoint","title":"Health Check Endpoint","text":"<p>The application includes built-in health checks: <pre><code>curl http://localhost:8080/_stcore/health\n</code></pre></p>"},{"location":"deployment/docker-deployment/#container-logs","title":"Container Logs","text":"<pre><code># View logs\ndocker-compose logs -f rxflow-pharmacy-assistant\n\n# View specific container logs\ndocker logs rxflow-pharmacy-assistant -f\n</code></pre>"},{"location":"deployment/docker-deployment/#resource-monitoring","title":"Resource Monitoring","text":"<pre><code># Monitor resource usage\ndocker stats rxflow-pharmacy-assistant\n\n# Check container info\ndocker inspect rxflow-pharmacy-assistant\n</code></pre>"},{"location":"deployment/docker-deployment/#production-optimizations","title":"\ud83d\udd27 Production Optimizations","text":"<p>The Docker image is optimized for production:</p> <ul> <li>Multi-stage build for minimal image size</li> <li>Non-root user for security</li> <li>Health checks for container orchestration</li> <li>Resource limits in docker-compose</li> <li>Proper signal handling for graceful shutdowns</li> </ul>"},{"location":"deployment/docker-deployment/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"deployment/docker-deployment/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Port 8080 already in use <pre><code># Change port in docker-compose.yml\nports:\n  - \"8081:8080\"  # Use port 8081 instead\n</code></pre></p> </li> <li> <p>OpenAI API key not working <pre><code># Check environment variables\ndocker exec rxflow-pharmacy-assistant env | grep OPENAI\n</code></pre></p> </li> <li> <p>Container won't start <pre><code># Check logs for errors\ndocker logs rxflow-pharmacy-assistant\n</code></pre></p> </li> <li> <p>Out of memory <pre><code># Increase memory limit in docker-compose.yml\ndeploy:\n  resources:\n    limits:\n      memory: 4G\n</code></pre></p> </li> </ol>"},{"location":"deployment/docker-deployment/#image-information","title":"\ud83d\udcca Image Information","text":"<ul> <li>Base Image: python:3.12-slim</li> <li>Final Size: ~500MB (optimized)</li> <li>Architecture: Multi-arch (amd64, arm64)</li> <li>Security: Non-root user, minimal dependencies</li> </ul>"},{"location":"deployment/docker-deployment/#updates-and-rollbacks","title":"\ud83d\udd04 Updates and Rollbacks","text":""},{"location":"deployment/docker-deployment/#update-to-new-version","title":"Update to New Version","text":"<pre><code># Pull latest image\ndocker-compose pull\n\n# Recreate containers\ndocker-compose up -d\n\n# Or update to specific version\ndocker-compose -f docker-compose.yml up -d zarreh/rxflow-pharmacy-assistant:v1.1.0\n</code></pre>"},{"location":"deployment/docker-deployment/#rollback","title":"Rollback","text":"<pre><code># Rollback to previous version\ndocker-compose -f docker-compose.yml up -d zarreh/rxflow-pharmacy-assistant:v1.0.0\n</code></pre>"},{"location":"deployment/docker-isolation-report/","title":"\ud83d\udd12 Docker Image Isolation Report","text":""},{"location":"deployment/docker-isolation-report/#issue-identified","title":"Issue Identified","text":"<p>During the initial Docker build and push, some layers were being \"Mounted from zarreh/genai-job-finder\", indicating Docker was reusing layers from another project. This could potentially cause conflicts or unexpected behavior between projects.</p>"},{"location":"deployment/docker-isolation-report/#solution-implemented","title":"Solution Implemented","text":""},{"location":"deployment/docker-isolation-report/#1-unique-stage-names","title":"1. Unique Stage Names","text":"<p>Changed generic stage names to project-specific ones: - <code>builder</code> \u2192 <code>rxflow-builder</code> - <code>stage-1</code> \u2192 <code>rxflow-production</code></p>"},{"location":"deployment/docker-isolation-report/#2-project-specific-user","title":"2. Project-Specific User","text":"<p>Created a dedicated user for this project: - Changed from generic <code>appuser</code> to <code>rxflowuser</code> - This prevents any potential permission conflicts</p>"},{"location":"deployment/docker-isolation-report/#3-unique-environment-variables","title":"3. Unique Environment Variables","text":"<p>Added project-specific environment variables: - <code>RXFLOW_APP=true</code> - <code>APP_NAME=\"RxFlow Pharmacy Assistant\"</code></p>"},{"location":"deployment/docker-isolation-report/#4-image-labels","title":"4. Image Labels","text":"<p>Added comprehensive labels for identification: <pre><code>LABEL maintainer=\"zarreh\" \\\n      project=\"rxflow-pharmacy-assistant\" \\\n      version=\"1.0.0\" \\\n      description=\"RxFlow Pharmacy Assistant - AI-powered prescription refill system\"\n</code></pre></p>"},{"location":"deployment/docker-isolation-report/#5-clean-build-process","title":"5. Clean Build Process","text":"<ul> <li>Removed old images completely</li> <li>Rebuilt with <code>--no-cache</code> flag</li> <li>Used versioned tags (<code>v1.0.0</code> and <code>latest</code>)</li> </ul>"},{"location":"deployment/docker-isolation-report/#verification-results","title":"Verification Results","text":""},{"location":"deployment/docker-isolation-report/#image-information","title":"\u2705 Image Information","text":"<pre><code>REPOSITORY                         TAG       IMAGE ID       SIZE\nzarreh/rxflow-pharmacy-assistant   v1.0.0    d82b7f47c12a   864MB\nzarreh/rxflow-pharmacy-assistant   latest    d82b7f47c12a   864MB\n</code></pre>"},{"location":"deployment/docker-isolation-report/#unique-image-id","title":"\u2705 Unique Image ID","text":"<ul> <li>New Image ID: <code>d82b7f47c12a</code> (completely different from genai-job-finder)</li> <li>Clean SHA: <code>sha256:d82b7f47c12ae089f6d0ba0678dbe6db80e27db9376899a76509673e604d11de</code></li> </ul>"},{"location":"deployment/docker-isolation-report/#labels-verification","title":"\u2705 Labels Verification","text":"<pre><code>{\n  \"Labels\": {\n    \"description\": \"RxFlow Pharmacy Assistant - AI-powered prescription refill system\",\n    \"maintainer\": \"zarreh\", \n    \"project\": \"rxflow-pharmacy-assistant\",\n    \"version\": \"1.0.0\"\n  },\n  \"User\": \"rxflowuser\"\n}\n</code></pre>"},{"location":"deployment/docker-isolation-report/#layer-sharing-status","title":"Layer Sharing Status","text":""},{"location":"deployment/docker-isolation-report/#expected-layer-sharing-safe","title":"\ud83d\udfe2 Expected Layer Sharing (Safe)","text":"<p>Some layers may still show as \"Layer already exists\" during push because: - Base image layers (python:3.12-slim) - This is expected and safe - Common dependency layers - Normal Docker optimization</p>"},{"location":"deployment/docker-isolation-report/#project-isolation-achieved","title":"\ud83d\udfe2 Project Isolation Achieved","text":"<ul> <li>Unique runtime user: <code>rxflowuser</code> </li> <li>Unique stage names: <code>rxflow-builder</code>, <code>rxflow-production</code></li> <li>Unique environment: Project-specific env vars</li> <li>Unique identification: Comprehensive labels</li> </ul>"},{"location":"deployment/docker-isolation-report/#docker-hub-status","title":"Docker Hub Status","text":"<p>Public Repository: https://hub.docker.com/r/zarreh/rxflow-pharmacy-assistant</p> <p>Available Tags: - <code>zarreh/rxflow-pharmacy-assistant:latest</code> - <code>zarreh/rxflow-pharmacy-assistant:v1.0.0</code></p>"},{"location":"deployment/docker-isolation-report/#deployment-commands","title":"Deployment Commands","text":""},{"location":"deployment/docker-isolation-report/#pull-and-run","title":"Pull and Run","text":"<pre><code># Pull the isolated image\ndocker pull zarreh/rxflow-pharmacy-assistant:latest\n\n# Run with docker-compose (recommended)\ndocker-compose up -d\n\n# Or run directly\ndocker run -d -p 8080:8080 --env-file .env zarreh/rxflow-pharmacy-assistant:latest\n</code></pre>"},{"location":"deployment/docker-isolation-report/#security-features","title":"\ud83d\udd10 Security Features","text":"<ol> <li>Non-root execution: Runs as <code>rxflowuser</code> (UID/GID created specifically for this app)</li> <li>Minimal attack surface: Production dependencies only</li> <li>Health checks: Built-in container health monitoring</li> <li>Read-only data: Application data mounted read-only where possible</li> </ol>"},{"location":"deployment/docker-isolation-report/#final-image-metrics","title":"\ud83d\udcca Final Image Metrics","text":"<ul> <li>Size: 864MB (optimized for production)</li> <li>Layers: 14 layers (multi-stage build optimization)</li> <li>Security: Non-root user + minimal dependencies</li> <li>Isolation: \u2705 Fully isolated from other projects</li> </ul>"},{"location":"deployment/docker-isolation-report/#conclusion","title":"\u2705 Conclusion","text":"<p>The RxFlow Pharmacy Assistant Docker image is now completely isolated from your genai-job-finder project. While some base layer sharing may occur (which is normal and beneficial for disk space), the application runtime, user permissions, and environment are entirely separate and cannot conflict with your other projects.</p> <p>The image is production-ready and available at <code>zarreh/rxflow-pharmacy-assistant:latest</code> on Docker Hub.</p>"},{"location":"developer-guide/","title":"Developer Guide","text":""},{"location":"developer-guide/#architecture-overview","title":"Architecture Overview","text":"<p>RxFlow Pharmacy Assistant is built with a modular, scalable architecture designed for healthcare applications. The system follows clean architecture principles with clear separation of concerns.</p> <pre><code>graph TB\n    subgraph \"Presentation Layer\"\n        A[Streamlit UI]\n        B[CLI Interface]\n        C[API Endpoints]\n    end\n\n    subgraph \"Application Layer\"\n        D[Conversation Manager]\n        E[Workflow Engine]\n        F[State Machine]\n    end\n\n    subgraph \"Domain Layer\"\n        G[Patient Tools]\n        H[Pharmacy Tools]\n        I[RxNorm Tools]\n        J[Escalation Tools]\n    end\n\n    subgraph \"Infrastructure Layer\"\n        K[LLM Service]\n        L[Mock Data Service]\n        M[Logging Service]\n        N[Configuration]\n    end\n\n    A --&gt; D\n    B --&gt; E\n    C --&gt; F\n    D --&gt; G\n    E --&gt; H\n    F --&gt; I\n    G --&gt; K\n    H --&gt; L\n    I --&gt; M\n    J --&gt; N</code></pre>"},{"location":"developer-guide/#core-components","title":"Core Components","text":""},{"location":"developer-guide/#1-conversation-management","title":"1. Conversation Management","text":"<p>The conversation system manages AI-powered interactions with multiple conversation types:</p> <pre><code># rxflow/workflow/conversation_manager.py\nclass ConversationManager:\n    \"\"\"Manages different types of conversations and their lifecycles\"\"\"\n\n    def __init__(self):\n        self.conversation_types = {\n            'simple': SimpleConversation,\n            'refill': RefillConversation,\n            'clinical': ClinicalConversation\n        }\n        self.active_conversations = {}\n\n    def start_conversation(self, conversation_type: str, \n                         conversation_id: str) -&gt; ConversationState:\n        \"\"\"Initialize a new conversation of specified type\"\"\"\n        if conversation_type not in self.conversation_types:\n            raise ValueError(f\"Unknown conversation type: {conversation_type}\")\n\n        conversation_class = self.conversation_types[conversation_type]\n        conversation = conversation_class(conversation_id)\n\n        self.active_conversations[conversation_id] = conversation\n        return conversation.get_state()\n</code></pre>"},{"location":"developer-guide/#extending-conversation-types","title":"Extending Conversation Types","text":"<p>To create a custom conversation type:</p> <pre><code>from rxflow.workflow.conversation_manager import BaseConversation\nfrom rxflow.workflow.state import ConversationState\n\nclass CustomConversation(BaseConversation):\n    \"\"\"Custom conversation for specific use case\"\"\"\n\n    def __init__(self, conversation_id: str):\n        super().__init__(conversation_id)\n        self.conversation_type = \"custom\"\n\n    def process_message(self, message: str) -&gt; ConversationState:\n        \"\"\"Process user message and return updated state\"\"\"\n        # Custom processing logic\n        response = self._generate_response(message)\n\n        # Update conversation state\n        self.state.add_message(\"user\", message)\n        self.state.add_message(\"assistant\", response)\n\n        return self.state\n\n    def _generate_response(self, message: str) -&gt; str:\n        \"\"\"Generate appropriate response for custom conversation\"\"\"\n        # Implement custom response logic\n        pass\n\n# Register the new conversation type\nfrom rxflow.workflow.conversation_manager import ConversationManager\n\nConversationManager.register_conversation_type(\"custom\", CustomConversation)\n</code></pre>"},{"location":"developer-guide/#2-tool-development","title":"2. Tool Development","text":"<p>Tools provide the core functionality for pharmacy operations. Each tool follows a consistent pattern:</p> <pre><code># Template for new tools\nfrom typing import Dict, Any, Optional\nfrom rxflow.utils.logger import get_logger\n\nlogger = get_logger(__name__)\n\nclass NewTool:\n    \"\"\"Template for creating new pharmacy tools\"\"\"\n\n    def __init__(self, config: Optional[Dict[str, Any]] = None):\n        self.config = config or {}\n        self.logger = logger\n\n    def primary_function(self, query: str) -&gt; Dict[str, Any]:\n        \"\"\"Main function of the tool\n\n        Args:\n            query (str): Input query or parameters\n\n        Returns:\n            Dict[str, Any]: Structured response with success/error status\n\n        Examples:\n            &gt;&gt;&gt; tool = NewTool()\n            &gt;&gt;&gt; result = tool.primary_function(\"sample query\")\n            &gt;&gt;&gt; print(result['success'])\n            True\n        \"\"\"\n        try:\n            # Validate input\n            if not query or not isinstance(query, str):\n                return {\n                    \"success\": False,\n                    \"error\": \"Invalid query parameter\"\n                }\n\n            # Process request\n            result = self._process_query(query)\n\n            # Log successful operation\n            self.logger.info(f\"Tool operation successful\", extra={\n                \"tool\": self.__class__.__name__,\n                \"query\": query[:100],  # Truncate for privacy\n                \"success\": True\n            })\n\n            return {\n                \"success\": True,\n                \"data\": result,\n                \"timestamp\": self._get_timestamp()\n            }\n\n        except Exception as e:\n            # Log error\n            self.logger.error(f\"Tool operation failed\", extra={\n                \"tool\": self.__class__.__name__,\n                \"query\": query[:100],\n                \"error\": str(e)\n            })\n\n            return {\n                \"success\": False,\n                \"error\": f\"Tool operation failed: {str(e)}\"\n            }\n\n    def _process_query(self, query: str) -&gt; Dict[str, Any]:\n        \"\"\"Internal processing logic - implement in subclass\"\"\"\n        raise NotImplementedError(\"Subclasses must implement _process_query\")\n\n    def _get_timestamp(self) -&gt; str:\n        \"\"\"Get current timestamp in ISO format\"\"\"\n        from datetime import datetime\n        return datetime.utcnow().isoformat() + \"Z\"\n\n# Safety wrapper function for the tool\ndef safe_new_tool_operation(query: str) -&gt; Dict[str, Any]:\n    \"\"\"Safe wrapper for NewTool operations\n\n    Args:\n        query (str): Input query\n\n    Returns:\n        Dict[str, Any]: Tool response with error handling\n\n    Examples:\n        &gt;&gt;&gt; result = safe_new_tool_operation(\"test query\")\n        &gt;&gt;&gt; if result.get(\"success\"):\n        ...     print(\"Operation successful\")\n    \"\"\"\n    try:\n        tool = NewTool()\n        return tool.primary_function(query)\n    except Exception as e:\n        return {\n            \"success\": False,\n            \"error\": f\"Safety wrapper caught error: {str(e)}\"\n        }\n</code></pre>"},{"location":"developer-guide/#tool-integration-pattern","title":"Tool Integration Pattern","text":"<p>Integrate tools with the conversation system:</p> <pre><code># rxflow/tools/tool_manager.py\nfrom typing import Dict, Any, List\nfrom .patient_history_tool import PatientHistoryTool, safe_medication_history\nfrom .pharmacy_tools import PharmacyTool, safe_pharmacy_lookup\n\nclass ToolManager:\n    \"\"\"Manages available tools and their execution\"\"\"\n\n    def __init__(self):\n        self.tools = {\n            \"patient_history\": PatientHistoryTool(),\n            \"pharmacy\": PharmacyTool(),\n            # Add new tools here\n        }\n\n        self.safe_functions = {\n            \"safe_medication_history\": safe_medication_history,\n            \"safe_pharmacy_lookup\": safe_pharmacy_lookup,\n            # Add new safe functions here\n        }\n\n    def get_available_tools(self) -&gt; List[str]:\n        \"\"\"Get list of available tool names\"\"\"\n        return list(self.tools.keys())\n\n    def execute_tool(self, tool_name: str, function_name: str, \n                    params: Dict[str, Any]) -&gt; Dict[str, Any]:\n        \"\"\"Execute a specific tool function safely\"\"\"\n\n        if tool_name not in self.tools:\n            return {\n                \"success\": False,\n                \"error\": f\"Unknown tool: {tool_name}\"\n            }\n\n        tool = self.tools[tool_name]\n\n        if not hasattr(tool, function_name):\n            return {\n                \"success\": False,\n                \"error\": f\"Tool {tool_name} does not have function {function_name}\"\n            }\n\n        try:\n            function = getattr(tool, function_name)\n            result = function(**params)\n            return result\n\n        except Exception as e:\n            return {\n                \"success\": False,\n                \"error\": f\"Tool execution failed: {str(e)}\"\n            }\n\n    def execute_safe_function(self, function_name: str, \n                            params: Any) -&gt; Dict[str, Any]:\n        \"\"\"Execute a safe wrapper function\"\"\"\n\n        if function_name not in self.safe_functions:\n            return {\n                \"success\": False,\n                \"error\": f\"Unknown safe function: {function_name}\"\n            }\n\n        try:\n            function = self.safe_functions[function_name]\n            result = function(params)\n            return result\n\n        except Exception as e:\n            return {\n                \"success\": False,\n                \"error\": f\"Safe function execution failed: {str(e)}\"\n            }\n</code></pre>"},{"location":"developer-guide/#3-state-management","title":"3. State Management","text":"<p>The state machine manages conversation flow and context:</p> <pre><code># rxflow/workflow/state_machine.py\nfrom enum import Enum\nfrom typing import Dict, Any, Optional, List\nfrom dataclasses import dataclass, field\n\nclass ConversationState(Enum):\n    \"\"\"Possible conversation states\"\"\"\n    INITIALIZED = \"initialized\"\n    GATHERING_INFO = \"gathering_info\"\n    PROCESSING = \"processing\"\n    AWAITING_CONFIRMATION = \"awaiting_confirmation\"\n    COMPLETED = \"completed\"\n    ERROR = \"error\"\n\n@dataclass\nclass ConversationContext:\n    \"\"\"Context data for conversations\"\"\"\n    conversation_id: str\n    user_id: Optional[str] = None\n    patient_id: Optional[str] = None\n    current_medication: Optional[str] = None\n    selected_pharmacy: Optional[str] = None\n    collected_data: Dict[str, Any] = field(default_factory=dict)\n    conversation_history: List[Dict[str, str]] = field(default_factory=list)\n\nclass StateMachine:\n    \"\"\"Manages conversation state transitions\"\"\"\n\n    def __init__(self, initial_state: ConversationState = ConversationState.INITIALIZED):\n        self.current_state = initial_state\n        self.context = ConversationContext(\"\")\n        self.state_handlers = {\n            ConversationState.INITIALIZED: self._handle_initialized,\n            ConversationState.GATHERING_INFO: self._handle_gathering_info,\n            ConversationState.PROCESSING: self._handle_processing,\n            ConversationState.AWAITING_CONFIRMATION: self._handle_awaiting_confirmation,\n            ConversationState.COMPLETED: self._handle_completed,\n            ConversationState.ERROR: self._handle_error,\n        }\n\n    def transition_to(self, new_state: ConversationState, \n                     context_updates: Optional[Dict[str, Any]] = None) -&gt; bool:\n        \"\"\"Transition to a new state with optional context updates\"\"\"\n\n        if not self._is_valid_transition(self.current_state, new_state):\n            return False\n\n        # Update context if provided\n        if context_updates:\n            for key, value in context_updates.items():\n                if hasattr(self.context, key):\n                    setattr(self.context, key, value)\n                else:\n                    self.context.collected_data[key] = value\n\n        # Perform transition\n        old_state = self.current_state\n        self.current_state = new_state\n\n        # Log state transition\n        logger.info(\"State transition\", extra={\n            \"conversation_id\": self.context.conversation_id,\n            \"from_state\": old_state.value,\n            \"to_state\": new_state.value,\n            \"context_updates\": list(context_updates.keys()) if context_updates else []\n        })\n\n        return True\n\n    def process_input(self, user_input: str) -&gt; Dict[str, Any]:\n        \"\"\"Process user input based on current state\"\"\"\n\n        if self.current_state not in self.state_handlers:\n            return {\n                \"success\": False,\n                \"error\": f\"No handler for state: {self.current_state}\"\n            }\n\n        handler = self.state_handlers[self.current_state]\n        return handler(user_input)\n\n    def _is_valid_transition(self, from_state: ConversationState, \n                           to_state: ConversationState) -&gt; bool:\n        \"\"\"Check if state transition is valid\"\"\"\n        valid_transitions = {\n            ConversationState.INITIALIZED: [\n                ConversationState.GATHERING_INFO,\n                ConversationState.ERROR\n            ],\n            ConversationState.GATHERING_INFO: [\n                ConversationState.PROCESSING,\n                ConversationState.GATHERING_INFO,  # Stay in same state\n                ConversationState.ERROR\n            ],\n            ConversationState.PROCESSING: [\n                ConversationState.AWAITING_CONFIRMATION,\n                ConversationState.COMPLETED,\n                ConversationState.ERROR\n            ],\n            ConversationState.AWAITING_CONFIRMATION: [\n                ConversationState.PROCESSING,  # User wants changes\n                ConversationState.COMPLETED,\n                ConversationState.ERROR\n            ],\n            ConversationState.COMPLETED: [\n                ConversationState.INITIALIZED  # Start new conversation\n            ],\n            ConversationState.ERROR: [\n                ConversationState.INITIALIZED,  # Restart\n                ConversationState.GATHERING_INFO  # Retry\n            ]\n        }\n\n        return to_state in valid_transitions.get(from_state, [])\n</code></pre>"},{"location":"developer-guide/#testing-framework","title":"Testing Framework","text":""},{"location":"developer-guide/#unit-testing","title":"Unit Testing","text":"<p>RxFlow uses pytest for comprehensive testing:</p> <pre><code># tests/test_patient_history_tool.py\nimport pytest\nfrom unittest.mock import Mock, patch\nfrom rxflow.tools.patient_history_tool import PatientHistoryTool, safe_medication_history\n\nclass TestPatientHistoryTool:\n    \"\"\"Test cases for PatientHistoryTool\"\"\"\n\n    def setup_method(self):\n        \"\"\"Setup test fixtures\"\"\"\n        self.tool = PatientHistoryTool()\n        self.sample_patient_id = \"12345\"\n        self.sample_medication = \"lisinopril\"\n\n    def test_get_medication_history_success(self):\n        \"\"\"Test successful medication history retrieval\"\"\"\n        query = f\"{self.sample_patient_id}:{self.sample_medication}\"\n\n        with patch.object(self.tool, '_fetch_patient_data') as mock_fetch:\n            mock_fetch.return_value = {\n                \"medications\": [\n                    {\n                        \"name\": \"lisinopril\",\n                        \"strength\": \"10mg\", \n                        \"condition\": \"hypertension\",\n                        \"last_filled\": \"2025-01-10\"\n                    }\n                ]\n            }\n\n            result = self.tool.get_medication_history(query)\n\n            assert result[\"success\"] is True\n            assert len(result[\"medications\"]) == 1\n            assert result[\"medications\"][0][\"name\"] == \"lisinopril\"\n\n    def test_get_medication_history_invalid_query(self):\n        \"\"\"Test handling of invalid query format\"\"\"\n        invalid_query = \"invalid_format\"\n\n        result = self.tool.get_medication_history(invalid_query)\n\n        assert result[\"success\"] is False\n        assert \"Invalid query format\" in result[\"error\"]\n\n    def test_safe_medication_history_wrapper(self):\n        \"\"\"Test safety wrapper function\"\"\"\n        query = f\"{self.sample_patient_id}:{self.sample_medication}\"\n\n        with patch.object(PatientHistoryTool, 'get_medication_history') as mock_method:\n            mock_method.return_value = {\"success\": True, \"medications\": []}\n\n            result = safe_medication_history(query)\n\n            assert result[\"success\"] is True\n            mock_method.assert_called_once_with(query)\n\n    @pytest.mark.parametrize(\"adherence_score,expected_level\", [\n        (95, \"Excellent\"),\n        (85, \"Good\"),\n        (70, \"Fair\"),\n        (50, \"Poor\"),\n        (30, \"Very Poor\")\n    ])\n    def test_adherence_level_calculation(self, adherence_score, expected_level):\n        \"\"\"Test adherence level calculation with different scores\"\"\"\n        query = f\"{self.sample_patient_id}:{self.sample_medication}\"\n\n        with patch.object(self.tool, '_calculate_adherence_score') as mock_calc:\n            mock_calc.return_value = adherence_score\n\n            result = self.tool.check_adherence(query)\n\n            assert result[\"adherence_level\"] == expected_level\n\n# Integration tests\nclass TestIntegration:\n    \"\"\"Integration tests for tool interactions\"\"\"\n\n    def test_complete_refill_workflow(self):\n        \"\"\"Test complete prescription refill workflow\"\"\"\n        from rxflow.workflow.refill_conversation import RefillConversation\n        from rxflow.tools.patient_history_tool import PatientHistoryTool\n        from rxflow.tools.pharmacy_tools import PharmacyTool\n\n        # Mock external dependencies\n        with patch.object(PatientHistoryTool, 'get_medication_history') as mock_history, \\\n             patch.object(PatientHistoryTool, 'check_adherence') as mock_adherence, \\\n             patch.object(PharmacyTool, 'find_nearby_pharmacies') as mock_pharmacies:\n\n            # Setup mocks\n            mock_history.return_value = {\n                \"success\": True,\n                \"medications\": [{\"name\": \"lisinopril\", \"refills_remaining\": 2}]\n            }\n            mock_adherence.return_value = {\n                \"adherence_score\": 85,\n                \"adherence_level\": \"Good\"\n            }\n            mock_pharmacies.return_value = {\n                \"success\": True, \n                \"pharmacies\": [{\"id\": \"CVS001\", \"name\": \"CVS Pharmacy\"}]\n            }\n\n            # Test workflow\n            conversation = RefillConversation(\"test_123\")\n            result = conversation.process_message(\n                \"I need to refill my blood pressure medication\"\n            )\n\n            assert result.current_state != \"error\"\n            assert \"lisinopril\" in str(result.context.collected_data)\n\n# Performance tests\nclass TestPerformance:\n    \"\"\"Performance benchmarks for critical operations\"\"\"\n\n    def test_medication_lookup_performance(self):\n        \"\"\"Test medication lookup response time\"\"\"\n        import time\n\n        tool = PatientHistoryTool()\n        query = \"12345:lisinopril\"\n\n        start_time = time.time()\n        result = tool.get_medication_history(query)\n        end_time = time.time()\n\n        response_time = end_time - start_time\n\n        # Should complete within 2 seconds\n        assert response_time &lt; 2.0\n        assert result is not None\n\n# Run tests with: pytest tests/ -v --cov=rxflow --cov-report=html\n</code></pre>"},{"location":"developer-guide/#mocking-external-services","title":"Mocking External Services","text":"<p>For testing without external dependencies:</p> <pre><code># tests/conftest.py\nimport pytest\nfrom unittest.mock import Mock\n\n@pytest.fixture\ndef mock_llm_service():\n    \"\"\"Mock LLM service for testing\"\"\"\n    mock = Mock()\n    mock.generate_response.return_value = \"Mocked LLM response\"\n    return mock\n\n@pytest.fixture  \ndef mock_patient_data():\n    \"\"\"Mock patient data for testing\"\"\"\n    return {\n        \"12345\": {\n            \"medications\": [\n                {\n                    \"name\": \"lisinopril\",\n                    \"strength\": \"10mg\",\n                    \"condition\": \"hypertension\", \n                    \"last_filled\": \"2025-01-10\",\n                    \"refills_remaining\": 2\n                }\n            ],\n            \"allergies\": [\n                {\n                    \"allergen\": \"penicillin\",\n                    \"reaction\": \"rash\",\n                    \"severity\": \"Moderate\"\n                }\n            ]\n        }\n    }\n\n@pytest.fixture\ndef mock_pharmacy_data():\n    \"\"\"Mock pharmacy data for testing\"\"\"\n    return {\n        \"90210\": [\n            {\n                \"id\": \"CVS001\",\n                \"name\": \"CVS Pharmacy #1234\",\n                \"address\": \"123 Main St\",\n                \"distance\": 1.2,\n                \"rating\": 4.5\n            }\n        ]\n    }\n</code></pre>"},{"location":"developer-guide/#configuration-management","title":"Configuration Management","text":""},{"location":"developer-guide/#environment-based-configuration","title":"Environment-based Configuration","text":"<pre><code># rxflow/config/settings.py\nimport os\nfrom typing import Dict, Any, Optional\nfrom dataclasses import dataclass\n\n@dataclass\nclass DatabaseConfig:\n    \"\"\"Database configuration settings\"\"\"\n    host: str = \"localhost\"\n    port: int = 5432\n    username: str = \"rxflow\"\n    password: str = \"\"\n    database: str = \"rxflow_dev\"\n\n@dataclass \nclass LLMConfig:\n    \"\"\"LLM service configuration\"\"\"\n    provider: str = \"openai\"  # openai, anthropic, etc.\n    api_key: str = \"\"\n    model: str = \"gpt-4\"\n    temperature: float = 0.1\n    max_tokens: int = 1000\n\n@dataclass\nclass SecurityConfig:\n    \"\"\"Security and encryption settings\"\"\"\n    secret_key: str = \"\"\n    encryption_key: str = \"\"\n    jwt_expiry_hours: int = 24\n    rate_limit_per_minute: int = 60\n\nclass Settings:\n    \"\"\"Application settings with environment overrides\"\"\"\n\n    def __init__(self, environment: str = \"development\"):\n        self.environment = environment\n        self.load_environment_variables()\n\n        # Configuration objects\n        self.database = DatabaseConfig(\n            host=os.getenv(\"DB_HOST\", \"localhost\"),\n            port=int(os.getenv(\"DB_PORT\", \"5432\")),\n            username=os.getenv(\"DB_USERNAME\", \"rxflow\"),\n            password=os.getenv(\"DB_PASSWORD\", \"\"),\n            database=os.getenv(\"DB_DATABASE\", f\"rxflow_{environment}\")\n        )\n\n        self.llm = LLMConfig(\n            provider=os.getenv(\"LLM_PROVIDER\", \"openai\"),\n            api_key=os.getenv(\"LLM_API_KEY\", \"\"),\n            model=os.getenv(\"LLM_MODEL\", \"gpt-4\"),\n            temperature=float(os.getenv(\"LLM_TEMPERATURE\", \"0.1\")),\n            max_tokens=int(os.getenv(\"LLM_MAX_TOKENS\", \"1000\"))\n        )\n\n        self.security = SecurityConfig(\n            secret_key=os.getenv(\"SECRET_KEY\", \"dev-secret-key\"),\n            encryption_key=os.getenv(\"ENCRYPTION_KEY\", \"\"),\n            jwt_expiry_hours=int(os.getenv(\"JWT_EXPIRY_HOURS\", \"24\")),\n            rate_limit_per_minute=int(os.getenv(\"RATE_LIMIT_PER_MINUTE\", \"60\"))\n        )\n\n    def load_environment_variables(self):\n        \"\"\"Load environment-specific variables from .env files\"\"\"\n        env_file = f\".env.{self.environment}\"\n\n        if os.path.exists(env_file):\n            from dotenv import load_dotenv\n            load_dotenv(env_file)\n        elif os.path.exists(\".env\"):\n            from dotenv import load_dotenv  \n            load_dotenv(\".env\")\n\n    def validate_configuration(self) -&gt; Dict[str, Any]:\n        \"\"\"Validate all configuration settings\"\"\"\n        validation_errors = []\n\n        # Validate required LLM settings\n        if not self.llm.api_key:\n            validation_errors.append(\"LLM_API_KEY is required\")\n\n        # Validate security settings for production\n        if self.environment == \"production\":\n            if self.security.secret_key == \"dev-secret-key\":\n                validation_errors.append(\"Production SECRET_KEY must be set\")\n\n            if not self.security.encryption_key:\n                validation_errors.append(\"Production ENCRYPTION_KEY is required\")\n\n        # Validate database connection\n        if self.environment != \"test\":\n            if not self.database.password and self.environment == \"production\":\n                validation_errors.append(\"Production database password required\")\n\n        return {\n            \"valid\": len(validation_errors) == 0,\n            \"errors\": validation_errors\n        }\n\n# Usage\nsettings = Settings(os.getenv(\"ENVIRONMENT\", \"development\"))\nvalidation = settings.validate_configuration()\n\nif not validation[\"valid\"]:\n    raise ValueError(f\"Configuration errors: {validation['errors']}\")\n</code></pre>"},{"location":"developer-guide/#feature-flags","title":"Feature Flags","text":"<p>Implement feature flags for gradual rollouts:</p> <pre><code># rxflow/config/feature_flags.py\nfrom typing import Dict, Any, Optional\nimport json\nimport os\n\nclass FeatureFlags:\n    \"\"\"Manages feature flags for gradual feature rollouts\"\"\"\n\n    def __init__(self, config_file: Optional[str] = None):\n        self.config_file = config_file or \"feature_flags.json\"\n        self.flags = self._load_flags()\n\n    def _load_flags(self) -&gt; Dict[str, Any]:\n        \"\"\"Load feature flags from configuration file\"\"\"\n        default_flags = {\n            \"enhanced_drug_checking\": True,\n            \"multi_pharmacy_comparison\": True,  \n            \"advanced_adherence_analytics\": False,\n            \"integration_epic_ehr\": False,\n            \"ai_clinical_recommendations\": True,\n            \"real_time_inventory\": False,\n            \"patient_mobile_app\": False\n        }\n\n        if os.path.exists(self.config_file):\n            try:\n                with open(self.config_file, 'r') as f:\n                    file_flags = json.load(f)\n                    default_flags.update(file_flags)\n            except Exception as e:\n                print(f\"Error loading feature flags: {e}\")\n\n        return default_flags\n\n    def is_enabled(self, feature_name: str, user_id: Optional[str] = None) -&gt; bool:\n        \"\"\"Check if a feature is enabled for a user\"\"\"\n\n        # Check if feature exists\n        if feature_name not in self.flags:\n            return False\n\n        flag_config = self.flags[feature_name]\n\n        # Simple boolean flag\n        if isinstance(flag_config, bool):\n            return flag_config\n\n        # Complex flag with rollout percentage or user targeting\n        if isinstance(flag_config, dict):\n\n            # Check if feature is globally enabled\n            if not flag_config.get(\"enabled\", False):\n                return False\n\n            # Check user whitelist\n            whitelist = flag_config.get(\"whitelist_users\", [])\n            if user_id and user_id in whitelist:\n                return True\n\n            # Check rollout percentage\n            rollout_percentage = flag_config.get(\"rollout_percentage\", 0)\n            if rollout_percentage &gt; 0 and user_id:\n                # Simple hash-based percentage rollout\n                user_hash = hash(user_id) % 100\n                return user_hash &lt; rollout_percentage\n\n            return rollout_percentage == 100\n\n        return False\n\n    def get_flag_value(self, feature_name: str, default_value: Any = None) -&gt; Any:\n        \"\"\"Get the raw value of a feature flag\"\"\"\n        return self.flags.get(feature_name, default_value)\n\n    def set_flag(self, feature_name: str, value: Any) -&gt; None:\n        \"\"\"Set a feature flag value (for testing)\"\"\"\n        self.flags[feature_name] = value\n\n# Usage throughout the application\nfeature_flags = FeatureFlags()\n\n# In conversation processing\nif feature_flags.is_enabled(\"ai_clinical_recommendations\", user_id):\n    # Enable AI clinical recommendations\n    recommendations = generate_clinical_recommendations(patient_data)\n\n# In pharmacy tools\nif feature_flags.is_enabled(\"real_time_inventory\", user_id):\n    # Use real-time inventory checking\n    inventory = check_real_time_inventory(pharmacy_id, medication)\nelse:\n    # Use cached inventory data\n    inventory = check_cached_inventory(pharmacy_id, medication)\n</code></pre>"},{"location":"developer-guide/#deployment","title":"Deployment","text":""},{"location":"developer-guide/#docker-configuration","title":"Docker Configuration","text":"<pre><code># Dockerfile\nFROM python:3.11-slim\n\n# Set working directory\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    gcc \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\n# Copy dependency files\nCOPY pyproject.toml poetry.lock ./\n\n# Install Poetry and dependencies\nRUN pip install poetry &amp;&amp; \\\n    poetry config virtualenvs.create false &amp;&amp; \\\n    poetry install --no-dev\n\n# Copy application code\nCOPY . .\n\n# Create non-root user\nRUN useradd -m -u 1001 rxflow &amp;&amp; \\\n    chown -R rxflow:rxflow /app\nUSER rxflow\n\n# Health check\nHEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n    CMD python -c \"import requests; requests.get('http://localhost:8000/health')\" || exit 1\n\n# Expose port\nEXPOSE 8000\n\n# Start application\nCMD [\"python\", \"-m\", \"rxflow.main\"]\n</code></pre>"},{"location":"developer-guide/#docker-compose-for-development","title":"Docker Compose for Development","text":"<pre><code># docker-compose.yml\nversion: '3.8'\n\nservices:\n  rxflow-app:\n    build: .\n    ports:\n      - \"8000:8000\"\n      - \"8501:8501\"  # Streamlit port\n    environment:\n      - ENVIRONMENT=development\n      - LLM_API_KEY=${LLM_API_KEY}\n      - DB_HOST=postgres\n      - DB_PASSWORD=rxflow_dev_pass\n    depends_on:\n      - postgres\n      - redis\n    volumes:\n      - ./logs:/app/logs\n      - ./data:/app/data\n    networks:\n      - rxflow-network\n\n  postgres:\n    image: postgres:15\n    environment:\n      - POSTGRES_DB=rxflow_dev\n      - POSTGRES_USER=rxflow\n      - POSTGRES_PASSWORD=rxflow_dev_pass\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n      - ./init.sql:/docker-entrypoint-initdb.d/init.sql\n    networks:\n      - rxflow-network\n\n  redis:\n    image: redis:7-alpine\n    ports:\n      - \"6379:6379\"\n    volumes:\n      - redis_data:/data\n    networks:\n      - rxflow-network\n\n  nginx:\n    image: nginx:alpine\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx.conf:/etc/nginx/nginx.conf\n      - ./ssl:/etc/nginx/ssl\n    depends_on:\n      - rxflow-app\n    networks:\n      - rxflow-network\n\nvolumes:\n  postgres_data:\n  redis_data:\n\nnetworks:\n  rxflow-network:\n    driver: bridge\n</code></pre>"},{"location":"developer-guide/#kubernetes-deployment","title":"Kubernetes Deployment","text":"<pre><code># k8s/deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: rxflow-app\n  labels:\n    app: rxflow-app\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: rxflow-app\n  template:\n    metadata:\n      labels:\n        app: rxflow-app\n    spec:\n      containers:\n      - name: rxflow-app\n        image: rxflow:latest\n        ports:\n        - containerPort: 8000\n        env:\n        - name: ENVIRONMENT\n          value: \"production\"\n        - name: LLM_API_KEY\n          valueFrom:\n            secretKeyRef:\n              name: rxflow-secrets\n              key: llm-api-key\n        - name: DB_HOST\n          value: \"postgres-service\"\n        - name: DB_PASSWORD\n          valueFrom:\n            secretKeyRef:\n              name: rxflow-secrets\n              key: db-password\n        livenessProbe:\n          httpGet:\n            path: /health\n            port: 8000\n          initialDelaySeconds: 30\n          periodSeconds: 10\n        readinessProbe:\n          httpGet:\n            path: /ready\n            port: 8000\n          initialDelaySeconds: 5\n          periodSeconds: 5\n        resources:\n          requests:\n            memory: \"512Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"1Gi\"\n            cpu: \"500m\"\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: rxflow-service\nspec:\n  selector:\n    app: rxflow-app\n  ports:\n  - protocol: TCP\n    port: 80\n    targetPort: 8000\n  type: LoadBalancer\n</code></pre>"},{"location":"developer-guide/#monitoring-and-observability","title":"Monitoring and Observability","text":""},{"location":"developer-guide/#structured-logging","title":"Structured Logging","text":"<pre><code># rxflow/utils/logger.py\nimport logging\nimport json\nimport sys\nfrom datetime import datetime\nfrom typing import Dict, Any, Optional\n\nclass StructuredLogger:\n    \"\"\"Structured logging for better observability\"\"\"\n\n    def __init__(self, name: str, level: str = \"INFO\"):\n        self.logger = logging.getLogger(name)\n        self.logger.setLevel(getattr(logging, level.upper()))\n\n        # Create structured formatter\n        formatter = StructuredFormatter()\n\n        # Console handler\n        console_handler = logging.StreamHandler(sys.stdout)\n        console_handler.setFormatter(formatter)\n        self.logger.addHandler(console_handler)\n\n        # File handler for production\n        if os.getenv(\"ENVIRONMENT\") == \"production\":\n            file_handler = logging.FileHandler(\"logs/rxflow.log\")\n            file_handler.setFormatter(formatter)\n            self.logger.addHandler(file_handler)\n\n    def info(self, message: str, **kwargs):\n        \"\"\"Log info level message with structured data\"\"\"\n        self.logger.info(message, extra={\"structured_data\": kwargs})\n\n    def warning(self, message: str, **kwargs):\n        \"\"\"Log warning level message with structured data\"\"\"\n        self.logger.warning(message, extra={\"structured_data\": kwargs})\n\n    def error(self, message: str, **kwargs):\n        \"\"\"Log error level message with structured data\"\"\"\n        self.logger.error(message, extra={\"structured_data\": kwargs})\n\nclass StructuredFormatter(logging.Formatter):\n    \"\"\"Custom formatter for structured logging\"\"\"\n\n    def format(self, record):\n        log_entry = {\n            \"timestamp\": datetime.utcnow().isoformat() + \"Z\",\n            \"level\": record.levelname,\n            \"message\": record.getMessage(),\n            \"logger\": record.name,\n            \"module\": record.module,\n            \"function\": record.funcName,\n            \"line\": record.lineno\n        }\n\n        # Add structured data if available\n        if hasattr(record, \"structured_data\"):\n            log_entry.update(record.structured_data)\n\n        # Add exception info if present\n        if record.exc_info:\n            log_entry[\"exception\"] = self.formatException(record.exc_info)\n\n        return json.dumps(log_entry)\n\n# Usage throughout application\nlogger = StructuredLogger(__name__)\n\nlogger.info(\"Patient medication lookup\", \n           patient_id=\"12345\",\n           medication=\"lisinopril\", \n           lookup_type=\"history\",\n           response_time_ms=150)\n</code></pre>"},{"location":"developer-guide/#metrics-collection","title":"Metrics Collection","text":"<pre><code># rxflow/utils/metrics.py\nimport time\nfrom functools import wraps\nfrom typing import Dict, Any, Callable\nfrom collections import defaultdict, Counter\nfrom threading import Lock\n\nclass MetricsCollector:\n    \"\"\"Collects and tracks application metrics\"\"\"\n\n    def __init__(self):\n        self.counters = Counter()\n        self.histograms = defaultdict(list)\n        self.gauges = {}\n        self.lock = Lock()\n\n    def increment_counter(self, name: str, value: int = 1, tags: Dict[str, str] = None):\n        \"\"\"Increment a counter metric\"\"\"\n        with self.lock:\n            metric_name = self._build_metric_name(name, tags)\n            self.counters[metric_name] += value\n\n    def record_histogram(self, name: str, value: float, tags: Dict[str, str] = None):\n        \"\"\"Record a histogram value\"\"\"\n        with self.lock:\n            metric_name = self._build_metric_name(name, tags)\n            self.histograms[metric_name].append(value)\n\n    def set_gauge(self, name: str, value: float, tags: Dict[str, str] = None):\n        \"\"\"Set a gauge value\"\"\"\n        with self.lock:\n            metric_name = self._build_metric_name(name, tags)\n            self.gauges[metric_name] = value\n\n    def _build_metric_name(self, name: str, tags: Dict[str, str] = None) -&gt; str:\n        \"\"\"Build metric name with tags\"\"\"\n        if not tags:\n            return name\n\n        tag_string = \",\".join(f\"{k}={v}\" for k, v in sorted(tags.items()))\n        return f\"{name}[{tag_string}]\"\n\n    def get_metrics_summary(self) -&gt; Dict[str, Any]:\n        \"\"\"Get summary of all metrics\"\"\"\n        with self.lock:\n            return {\n                \"counters\": dict(self.counters),\n                \"histograms\": {\n                    name: {\n                        \"count\": len(values),\n                        \"min\": min(values) if values else 0,\n                        \"max\": max(values) if values else 0,\n                        \"avg\": sum(values) / len(values) if values else 0\n                    }\n                    for name, values in self.histograms.items()\n                },\n                \"gauges\": dict(self.gauges)\n            }\n\n# Global metrics collector\nmetrics = MetricsCollector()\n\ndef track_performance(metric_name: str, tags: Dict[str, str] = None):\n    \"\"\"Decorator to track function performance\"\"\"\n    def decorator(func: Callable) -&gt; Callable:\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            start_time = time.time()\n\n            try:\n                result = func(*args, **kwargs)\n\n                # Record success\n                success_tags = (tags or {}).copy()\n                success_tags[\"status\"] = \"success\"\n                metrics.increment_counter(f\"{metric_name}.calls\", tags=success_tags)\n\n                return result\n\n            except Exception as e:\n                # Record error\n                error_tags = (tags or {}).copy()\n                error_tags[\"status\"] = \"error\"\n                error_tags[\"error_type\"] = type(e).__name__\n                metrics.increment_counter(f\"{metric_name}.calls\", tags=error_tags)\n                raise\n\n            finally:\n                # Record execution time\n                execution_time = time.time() - start_time\n                metrics.record_histogram(f\"{metric_name}.duration\", \n                                       execution_time * 1000, tags=tags)\n\n        return wrapper\n    return decorator\n\n# Usage\n@track_performance(\"patient_history_lookup\", tags={\"tool\": \"patient_history\"})\ndef get_medication_history(self, query: str) -&gt; Dict[str, Any]:\n    # Function implementation\n    pass\n\n# Track business metrics\nmetrics.increment_counter(\"prescription_refills\", tags={\"pharmacy\": \"CVS001\"})\nmetrics.record_histogram(\"adherence_scores\", 85.5, tags={\"medication\": \"lisinopril\"})\nmetrics.set_gauge(\"active_conversations\", 23)\n</code></pre>"},{"location":"developer-guide/#security-considerations","title":"Security Considerations","text":""},{"location":"developer-guide/#data-protection","title":"Data Protection","text":"<pre><code># rxflow/utils/encryption.py\nfrom cryptography.fernet import Fernet\nfrom cryptography.hazmat.primitives import hashes\nfrom cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC\nimport base64\nimport os\nfrom typing import Union\n\nclass DataEncryption:\n    \"\"\"Handles encryption/decryption of sensitive data\"\"\"\n\n    def __init__(self, password: str = None):\n        if password is None:\n            password = os.getenv(\"ENCRYPTION_KEY\", \"default-dev-key\")\n\n        self.key = self._derive_key(password)\n        self.cipher = Fernet(self.key)\n\n    def _derive_key(self, password: str) -&gt; bytes:\n        \"\"\"Derive encryption key from password\"\"\"\n        password_bytes = password.encode()\n        salt = b\"rxflow_salt_2025\"  # In production, use random salt per encryption\n\n        kdf = PBKDF2HMAC(\n            algorithm=hashes.SHA256(),\n            length=32,\n            salt=salt,\n            iterations=100000,\n        )\n\n        key = base64.urlsafe_b64encode(kdf.derive(password_bytes))\n        return key\n\n    def encrypt(self, data: Union[str, bytes]) -&gt; str:\n        \"\"\"Encrypt sensitive data\"\"\"\n        if isinstance(data, str):\n            data = data.encode()\n\n        encrypted_data = self.cipher.encrypt(data)\n        return base64.urlsafe_b64encode(encrypted_data).decode()\n\n    def decrypt(self, encrypted_data: str) -&gt; str:\n        \"\"\"Decrypt sensitive data\"\"\"\n        encrypted_bytes = base64.urlsafe_b64decode(encrypted_data.encode())\n        decrypted_data = self.cipher.decrypt(encrypted_bytes)\n        return decrypted_data.decode()\n\n# Usage for sensitive patient data\nencryption = DataEncryption()\n\n# Encrypt patient ID before storing in logs\nencrypted_patient_id = encryption.encrypt(\"patient_12345\")\nlogger.info(\"Patient lookup\", patient_id_encrypted=encrypted_patient_id)\n\n# Encrypt medication names in transit\nencrypted_medication = encryption.encrypt(\"lisinopril\")\n</code></pre>"},{"location":"developer-guide/#input-validation","title":"Input Validation","text":"<pre><code># rxflow/utils/validation.py\nimport re\nfrom typing import Any, Dict, List, Optional, Union\nfrom dataclasses import dataclass\n\n@dataclass\nclass ValidationRule:\n    \"\"\"Defines a validation rule\"\"\"\n    field: str\n    required: bool = True\n    min_length: Optional[int] = None\n    max_length: Optional[int] = None\n    pattern: Optional[str] = None\n    allowed_values: Optional[List[str]] = None\n    custom_validator: Optional[callable] = None\n\nclass InputValidator:\n    \"\"\"Validates user inputs for security and data integrity\"\"\"\n\n    def __init__(self):\n        self.patient_id_pattern = r\"^[A-Za-z0-9]{1,20}$\"\n        self.medication_name_pattern = r\"^[A-Za-z0-9\\s\\-\\.]{1,100}$\"\n        self.zip_code_pattern = r\"^\\d{5}(-\\d{4})?$\"\n\n    def validate_patient_lookup(self, query: str) -&gt; Dict[str, Any]:\n        \"\"\"Validate patient lookup query\"\"\"\n\n        if not query or not isinstance(query, str):\n            return {\n                \"valid\": False,\n                \"errors\": [\"Query must be a non-empty string\"]\n            }\n\n        # Check for potential injection attempts\n        dangerous_patterns = [\n            r\"[&lt;&gt;\\\"'`]\",  # HTML/SQL injection characters\n            r\"javascript:\",  # XSS attempts\n            r\"data:\",  # Data URI schemes\n            r\"\\.\\./\",  # Path traversal\n        ]\n\n        for pattern in dangerous_patterns:\n            if re.search(pattern, query, re.IGNORECASE):\n                return {\n                    \"valid\": False,\n                    \"errors\": [\"Query contains potentially dangerous characters\"]\n                }\n\n        # Validate format (patient_id:medication or just patient_id)\n        parts = query.split(\":\")\n        if len(parts) &gt; 2:\n            return {\n                \"valid\": False,\n                \"errors\": [\"Invalid query format. Use 'patient_id' or 'patient_id:medication'\"]\n            }\n\n        # Validate patient ID\n        patient_id = parts[0].strip()\n        if not re.match(self.patient_id_pattern, patient_id):\n            return {\n                \"valid\": False,\n                \"errors\": [\"Invalid patient ID format\"]\n            }\n\n        # Validate medication name if provided\n        if len(parts) == 2:\n            medication = parts[1].strip()\n            if medication and not re.match(self.medication_name_pattern, medication):\n                return {\n                    \"valid\": False,\n                    \"errors\": [\"Invalid medication name format\"]\n                }\n\n        return {\"valid\": True, \"errors\": []}\n\n    def validate_pharmacy_lookup(self, zip_code: str) -&gt; Dict[str, Any]:\n        \"\"\"Validate pharmacy lookup by ZIP code\"\"\"\n\n        if not zip_code or not isinstance(zip_code, str):\n            return {\n                \"valid\": False,\n                \"errors\": [\"ZIP code must be provided\"]\n            }\n\n        zip_code = zip_code.strip()\n\n        if not re.match(self.zip_code_pattern, zip_code):\n            return {\n                \"valid\": False,\n                \"errors\": [\"Invalid ZIP code format. Use XXXXX or XXXXX-XXXX\"]\n            }\n\n        return {\"valid\": True, \"errors\": []}\n\n    def sanitize_output(self, data: Any) -&gt; Any:\n        \"\"\"Sanitize output data to prevent information leakage\"\"\"\n\n        if isinstance(data, dict):\n            sanitized = {}\n            for key, value in data.items():\n                # Remove sensitive fields from output\n                if key.lower() in [\"password\", \"ssn\", \"api_key\", \"token\"]:\n                    sanitized[key] = \"[REDACTED]\"\n                else:\n                    sanitized[key] = self.sanitize_output(value)\n            return sanitized\n\n        elif isinstance(data, list):\n            return [self.sanitize_output(item) for item in data]\n\n        elif isinstance(data, str):\n            # Remove potential script tags or dangerous content\n            sanitized = re.sub(r\"&lt;script.*?&lt;/script&gt;\", \"[SCRIPT_REMOVED]\", data, flags=re.IGNORECASE | re.DOTALL)\n            return sanitized\n\n        else:\n            return data\n\n# Usage in tools\nvalidator = InputValidator()\n\ndef safe_patient_lookup(query: str) -&gt; Dict[str, Any]:\n    \"\"\"Safe patient lookup with input validation\"\"\"\n\n    # Validate input\n    validation = validator.validate_patient_lookup(query)\n    if not validation[\"valid\"]:\n        return {\n            \"success\": False,\n            \"error\": f\"Validation failed: {', '.join(validation['errors'])}\"\n        }\n\n    try:\n        # Perform lookup\n        tool = PatientHistoryTool()\n        result = tool.get_medication_history(query)\n\n        # Sanitize output\n        sanitized_result = validator.sanitize_output(result)\n\n        return sanitized_result\n\n    except Exception as e:\n        logger.error(\"Patient lookup failed\", \n                    query_hash=hash(query), \n                    error=str(e))\n\n        return {\n            \"success\": False,\n            \"error\": \"Lookup failed due to system error\"\n        }\n</code></pre> <p>This comprehensive developer guide provides the foundation for extending and maintaining the RxFlow Pharmacy Assistant system. It covers architecture, testing, deployment, monitoring, and security considerations essential for healthcare applications.</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>Get RxFlow Pharmacy Assistant up and running in your environment with this comprehensive installation guide.</p>"},{"location":"getting-started/installation/#prerequisites","title":"\ud83d\udccb Prerequisites","text":"<p>Before installing RxFlow, ensure you have the following prerequisites:</p>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":"Python EnvironmentOperating SystemsHardware <ul> <li>Python 3.8+ (Python 3.9+ recommended)</li> <li>pip package manager</li> <li>Git for version control</li> </ul> <ul> <li>Linux: Ubuntu 18.04+, CentOS 7+, Debian 9+</li> <li>macOS: 10.14+ (Mojave or newer)</li> <li>Windows: 10+ with WSL2 (recommended) or native</li> </ul> <ul> <li>RAM: 4GB minimum, 8GB recommended</li> <li>Storage: 2GB available space</li> <li>Network: Internet connection for API services</li> </ul>"},{"location":"getting-started/installation/#api-keys-required","title":"API Keys Required","text":"<p>API Configuration</p> <p>RxFlow requires the following API keys for full functionality:</p> <ul> <li>OpenAI API Key - For LLM processing (GPT-4)</li> <li>RxNorm API - For medication verification (free NIH service)</li> <li>Optional: GoodRx API - For prescription pricing</li> </ul>"},{"location":"getting-started/installation/#quick-installation","title":"\ud83d\ude80 Quick Installation","text":""},{"location":"getting-started/installation/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code># Clone the repository\ngit clone https://github.com/zarreh/rxflow-pharmacy-assistant.git\ncd rxflow-pharmacy-assistant\n</code></pre>"},{"location":"getting-started/installation/#2-set-up-python-environment","title":"2. Set Up Python Environment","text":"Using Poetry (Recommended)Using pip + venvUsing conda <pre><code># Install Poetry if not already installed\ncurl -sSL https://install.python-poetry.org | python3 -\n\n# Install dependencies\npoetry install\n\n# Activate the virtual environment\npoetry shell\n</code></pre> <pre><code># Create virtual environment\npython3 -m venv rxflow-env\n\n# Activate virtual environment\n# On Linux/macOS:\nsource rxflow-env/bin/activate\n# On Windows:\n# rxflow-env\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\n</code></pre> <pre><code># Create conda environment\nconda create -n rxflow python=3.9\nconda activate rxflow\n\n# Install dependencies\npip install -r requirements.txt\n</code></pre>"},{"location":"getting-started/installation/#3-configure-environment-variables","title":"3. Configure Environment Variables","text":"<pre><code># Copy example environment file\ncp .env.example .env\n\n# Edit the configuration file\nnano .env  # or use your preferred editor\n</code></pre> <p>Required Configuration: <pre><code># OpenAI Configuration\nOPENAI_API_KEY=your_openai_api_key_here\n\n# Application Settings\nAPP_NAME=RxFlow Pharmacy Assistant\nLOG_LEVEL=INFO\n\n# Optional: Database Configuration\n# DATABASE_URL=postgresql://user:pass@localhost/rxflow\n\n# Optional: External APIs\n# GOODRX_API_KEY=your_goodrx_key_here\n</code></pre></p>"},{"location":"getting-started/installation/#4-verify-installation","title":"4. Verify Installation","text":"<pre><code># Run basic tests\npython -m pytest tests/ -v\n\n# Start the application\nstreamlit run app.py\n</code></pre> <p>Navigate to <code>http://localhost:8501</code> to verify the installation.</p>"},{"location":"getting-started/installation/#advanced-installation-options","title":"\ud83d\udd27 Advanced Installation Options","text":""},{"location":"getting-started/installation/#docker-installation","title":"Docker Installation","text":"<p>For containerized deployment:</p> <pre><code># Build the Docker image\ndocker build -t rxflow-pharmacy-assistant .\n\n# Run the container\ndocker run -p 8501:8501 \\\n  -e OPENAI_API_KEY=your_key_here \\\n  rxflow-pharmacy-assistant\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>For contributors and developers:</p> <pre><code># Install with development dependencies\npoetry install --with dev\n\n# Install pre-commit hooks\npre-commit install\n\n# Run development server with auto-reload\nstreamlit run app.py --server.runOnSave=true\n</code></pre>"},{"location":"getting-started/installation/#dependencies-overview","title":"\ud83d\udee0\ufe0f Dependencies Overview","text":""},{"location":"getting-started/installation/#core-dependencies","title":"Core Dependencies","text":"Package Version Purpose <code>streamlit</code> ^1.28.0 Web interface framework <code>langchain</code> ^0.0.350 AI agent orchestration <code>openai</code> ^1.0.0 LLM integration <code>pydantic</code> ^2.0.0 Data validation <code>requests</code> ^2.31.0 HTTP client for APIs"},{"location":"getting-started/installation/#optional-dependencies","title":"Optional Dependencies","text":"Package Version Purpose <code>pandas</code> ^2.1.0 Data analysis and reporting <code>plotly</code> ^5.17.0 Interactive visualizations <code>python-dotenv</code> ^1.0.0 Environment management"},{"location":"getting-started/installation/#installation-verification","title":"\ud83d\udcca Installation Verification","text":"<p>After installation, verify everything is working:</p>"},{"location":"getting-started/installation/#1-check-system-health","title":"1. Check System Health","text":"<pre><code># Run the system check script\npython scripts/health_check.py\n</code></pre> <p>Expected output: <pre><code>\u2705 Python version: 3.9.x\n\u2705 Dependencies installed\n\u2705 API keys configured\n\u2705 Mock data loaded\n\u2705 All systems operational\n</code></pre></p>"},{"location":"getting-started/installation/#2-test-core-functionality","title":"2. Test Core Functionality","text":"<pre><code># Test conversation manager\npython -c \"\nfrom rxflow.workflow.conversation_manager import ConversationManager\ncm = ConversationManager()\nprint('\u2705 Conversation manager initialized')\n\"\n\n# Test patient tools\npython -c \"\nfrom rxflow.tools.patient_history_tool import PatientHistoryTool\ntool = PatientHistoryTool()\nresult = tool.get_medication_history('omeprazole')\nprint('\u2705 Patient tools working:', result.get('success', False))\n\"\n</code></pre>"},{"location":"getting-started/installation/#3-access-the-web-interface","title":"3. Access the Web Interface","text":"<ol> <li>Start the application: <code>streamlit run app.py</code></li> <li>Open browser to <code>http://localhost:8501</code></li> <li>Try the quick action: \"I need to refill my medication\"</li> <li>Verify you receive an AI response</li> </ol>"},{"location":"getting-started/installation/#troubleshooting","title":"\ud83d\udea8 Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"Import ErrorsAPI Key ErrorsPort Already in Use <pre><code># Issue: ModuleNotFoundError\n# Solution: Ensure virtual environment is activated\nwhich python  # Should point to your venv\npip list | grep streamlit  # Verify installation\n</code></pre> <pre><code># Issue: Invalid API key\n# Check environment variables\necho $OPENAI_API_KEY\n\n# Verify .env file is loaded\npython -c \"from rxflow.config.settings import get_settings; print(get_settings().openai_api_key[:10])\"\n</code></pre> <pre><code># Issue: Streamlit port 8501 busy\n# Use different port\nstreamlit run app.py --server.port 8502\n\n# Or kill existing process\npkill -f streamlit\n</code></pre>"},{"location":"getting-started/installation/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check Logs: Look in <code>logs/</code> directory for error details</li> <li>GitHub Issues: Report bugs</li> <li>Documentation: Review troubleshooting guide</li> </ol>"},{"location":"getting-started/installation/#performance-optimization","title":"\u26a1 Performance Optimization","text":""},{"location":"getting-started/installation/#for-production-deployment","title":"For Production Deployment","text":"<pre><code># Install production dependencies\npip install gunicorn uvicorn\n\n# Optimize Python\nexport PYTHONOPTIMIZE=1\n\n# Configure logging\nexport LOG_LEVEL=WARNING\n</code></pre>"},{"location":"getting-started/installation/#for-development","title":"For Development","text":"<pre><code># Enable debug mode\nexport LOG_LEVEL=DEBUG\n\n# Use development server\nstreamlit run app.py --server.runOnSave=true --server.address=0.0.0.0\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"\ud83c\udf89 Next Steps","text":"<p>Once installation is complete:</p> <ol> <li>Quick Start Guide - Learn basic usage patterns</li> <li>Configuration Guide - Customize your setup</li> <li>User Guide - Master the interface</li> <li>API Reference - Explore the APIs</li> </ol> <p>Installation Complete!</p> <p>You're ready to start using RxFlow! Head to the Quick Start Guide to begin your first prescription refill workflow.</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>Get up and running with RxFlow in just a few minutes! This guide walks you through your first prescription refill workflow.</p>"},{"location":"getting-started/quickstart/#your-first-refill","title":"\ud83c\udfaf Your First Refill","text":""},{"location":"getting-started/quickstart/#step-1-start-the-application","title":"Step 1: Start the Application","text":"<pre><code># Navigate to your RxFlow directory\ncd rxflow-pharmacy-assistant\n\n# Start the Streamlit interface\nstreamlit run app.py\n</code></pre> <p>The application will open in your browser at <code>http://localhost:8501</code>.</p>"},{"location":"getting-started/quickstart/#step-2-begin-a-conversation","title":"Step 2: Begin a Conversation","text":"<p>You'll see the RxFlow interface with a chat box. Try one of these starter messages:</p> <p>Starter Messages</p> Basic RefillMultiple MedicationsFind Cheapest OptionPharmacy Location <pre><code>I need to refill my omeprazole\n</code></pre> <pre><code>I need refills for my blood pressure medications\n</code></pre> <pre><code>What's the cheapest way to get my lisinopril?\n</code></pre> <pre><code>Where's the nearest CVS pharmacy?\n</code></pre>"},{"location":"getting-started/quickstart/#step-3-follow-ai-guidance","title":"Step 3: Follow AI Guidance","text":"<p>RxFlow will guide you step-by-step through the process:</p> <pre><code>graph LR\n    A[Start Chat] --&gt; B[Medication ID]\n    B --&gt; C[Safety Check]\n    C --&gt; D[Cost Options]\n    D --&gt; E[Pharmacy Selection]\n    E --&gt; F[Complete Order]</code></pre>"},{"location":"getting-started/quickstart/#interactive-workflow-example","title":"\ud83d\udca1 Interactive Workflow Example","text":"<p>Here's what a typical conversation looks like:</p> <p>Sample Conversation Flow</p> <p>You: \"I need to refill my omeprazole\"</p> <p>RxFlow: \"I found your omeprazole 20mg for acid reflux in your medication history. Is this the medication you want to refill?\"</p> <p>You: \"Yes, that's correct\"</p> <p>RxFlow: \"Great! Let me verify the dosage for safety... \u2705 Dosage verified. Now let me show you cost options:</p> <ul> <li>Generic Omeprazole: $12.99 (90-day supply)</li> <li>Prilosec Brand: $45.99 (90-day supply)  </li> <li>Your Savings: $33.00 with generic</li> </ul> <p>Which option would you prefer?\"</p> <p>You: \"I'll take the generic option\"</p> <p>RxFlow: \"Excellent choice! Now let me find nearby pharmacies with the best prices and shortest wait times...\"</p>"},{"location":"getting-started/quickstart/#quick-actions","title":"\ud83c\udfae Quick Actions","text":"<p>Use the Quick Actions sidebar for common requests:</p>"},{"location":"getting-started/quickstart/#medication-actions","title":"Medication Actions","text":"<ul> <li>\ud83d\udd04 \"Refill Medication\" - Start a basic refill request</li> <li>\ud83d\udc8a \"Check My Medications\" - View your medication history</li> <li>\u26a0\ufe0f \"Prior Authorization\" - Handle insurance issues</li> </ul>"},{"location":"getting-started/quickstart/#pharmacy-services","title":"Pharmacy Services","text":"<ul> <li>\ud83c\udfe5 \"Find Pharmacy\" - Locate nearby pharmacies</li> <li>\u23f1\ufe0f \"Check Wait Times\" - See current pharmacy queues</li> <li>\ud83d\udcb0 \"Compare Prices\" - Get cost comparisons</li> </ul>"},{"location":"getting-started/quickstart/#test-scenarios","title":"Test Scenarios","text":"<ul> <li>\ud83d\udeab \"No Refills Left\" - Handle prescription renewal</li> <li>\ud83d\udcb3 \"Insurance Denied\" - Work through coverage issues</li> <li>\u26a1 \"Emergency Refill\" - Urgent medication needs</li> </ul>"},{"location":"getting-started/quickstart/#interface-overview","title":"\ud83c\udf9b\ufe0f Interface Overview","text":""},{"location":"getting-started/quickstart/#main-chat-area","title":"Main Chat Area","text":"<ul> <li>Conversation History: All your interactions with RxFlow</li> <li>Message Input: Type your requests or questions</li> <li>Quick Send: Pre-written message buttons</li> </ul>"},{"location":"getting-started/quickstart/#sidebar-features","title":"Sidebar Features","text":"ConfigurationReal-time Status <ul> <li>Demo Data: Sample patient and pharmacy information</li> <li>Session Controls: Reset conversation or export data</li> <li>Debug Info: Toggle technical details</li> </ul> <ul> <li>Current State: See your workflow progress</li> <li>Tools Used: Monitor system operations</li> <li>Cost Tracking: View savings and comparisons</li> </ul>"},{"location":"getting-started/quickstart/#key-features-to-try","title":"\ud83d\udcf1 Key Features to Try","text":""},{"location":"getting-started/quickstart/#1-smart-medication-matching","title":"1. Smart Medication Matching","text":"<pre><code>Try: \"I need my heartburn medicine\"\nRxFlow will identify this as omeprazole from your history\n</code></pre>"},{"location":"getting-started/quickstart/#2-safety-escalation","title":"2. Safety Escalation","text":"<pre><code>Try: \"I need to refill my lorazepam\"  \nRxFlow will escalate controlled substances to a pharmacist\n</code></pre>"},{"location":"getting-started/quickstart/#3-cost-optimization","title":"3. Cost Optimization","text":"<pre><code>Try: \"Find me the cheapest option for my medications\"\nRxFlow will compare prices across multiple pharmacies\n</code></pre>"},{"location":"getting-started/quickstart/#4-location-services","title":"4. Location Services","text":"<pre><code>Try: \"Which pharmacy is closest to downtown?\"\nRxFlow will find nearby locations with distances\n</code></pre>"},{"location":"getting-started/quickstart/#safety-features-in-action","title":"\ud83d\udee1\ufe0f Safety Features in Action","text":"<p>RxFlow automatically protects you with:</p>"},{"location":"getting-started/quickstart/#automatic-safety-checks","title":"Automatic Safety Checks","text":"<ul> <li>\u2705 Drug Interactions: Checks against your medication list</li> <li>\u2705 Allergy Verification: Cross-references known allergies  </li> <li>\u2705 Dosage Validation: Ensures safe medication strengths</li> <li>\u2705 Controlled Substances: Escalates to pharmacist review</li> </ul>"},{"location":"getting-started/quickstart/#interactive-confirmations","title":"Interactive Confirmations","text":"<ul> <li>\ud83d\udd0d Medication Verification: \"Is this the correct medication?\"</li> <li>\ud83d\udc8a Dosage Confirmation: \"Is 20mg the right strength?\"</li> <li>\ud83c\udfe5 Pharmacy Selection: \"Would you like to use this pharmacy?\"</li> </ul>"},{"location":"getting-started/quickstart/#understanding-the-interface","title":"\ud83d\udcca Understanding the Interface","text":""},{"location":"getting-started/quickstart/#workflow-states","title":"Workflow States","text":"<p>Monitor your progress through these states:</p> State Description Next Steps \ud83c\udfc1 GREETING Initial welcome Share your medication needs \ud83d\udd0d MEDICATION_SEARCH Finding your medication Confirm medication details \u26a1 ESCALATED Safety review needed Wait for pharmacist contact \ud83d\udcb0 COST_ANALYSIS Comparing options Choose preferred option \ud83c\udfe5 PHARMACY_SELECTION Finding locations Select pharmacy \ud83d\udcdd ORDER_PROCESSING Submitting request Review and confirm \u2705 COMPLETED Process finished Pick up medication"},{"location":"getting-started/quickstart/#tool-activity-monitor","title":"Tool Activity Monitor","text":"<p>Watch real-time tool usage: - \ud83d\udc64 Patient Tools: Medication history, allergies - \ud83c\udfe5 Pharmacy Tools: Location, inventory, wait times - \ud83d\udc8a Medication Tools: RxNorm lookup, interactions - \ud83d\udcb0 Cost Tools: Insurance, pricing, savings - \ud83d\udee1\ufe0f Safety Tools: Escalation detection</p>"},{"location":"getting-started/quickstart/#pro-tips","title":"\ud83c\udfaf Pro Tips","text":""},{"location":"getting-started/quickstart/#efficient-communication","title":"Efficient Communication","text":"<p>Communication Best Practices</p> <ul> <li>Be Specific: \"omeprazole 20mg\" vs \"my heartburn pills\"</li> <li>Confirm Quickly: Respond \"yes\" or \"no\" to confirmation questions</li> <li>Ask Questions: \"What insurance do you accept?\" or \"How long is the wait?\"</li> </ul>"},{"location":"getting-started/quickstart/#using-demo-data","title":"Using Demo Data","text":"<p>The system includes sample data for testing: - Patient ID: 12345 (John Smith) - Sample Medications: omeprazole, lisinopril, metformin - Test Pharmacies: CVS Main St, Walgreens Downtown - Sample Insurance: BlueCross BlueShield</p>"},{"location":"getting-started/quickstart/#troubleshooting","title":"Troubleshooting","text":"Conversation Stuck?Unexpected Response?Need Help? <p>Use the \"Reset Conversation\" button in the sidebar to start fresh.</p> <p>Check the \"Debug Info\" toggle to see technical details.</p> <p>Try saying \"help\" or \"what can you do?\" for guidance.</p>"},{"location":"getting-started/quickstart/#advanced-usage","title":"\ud83d\ude80 Advanced Usage","text":""},{"location":"getting-started/quickstart/#multiple-medications","title":"Multiple Medications","text":"<p><pre><code>\"I need refills for omeprazole, lisinopril, and metformin\"\n</code></pre> RxFlow will process each medication individually with safety checks.</p>"},{"location":"getting-started/quickstart/#insurance-scenarios","title":"Insurance Scenarios","text":"<p><pre><code>\"My insurance denied my prescription, what are my options?\"\n</code></pre> RxFlow will explore alternatives, generic options, and assistance programs.</p>"},{"location":"getting-started/quickstart/#pharmacy-preferences","title":"Pharmacy Preferences","text":"<p><pre><code>\"I only want to use CVS pharmacies\"\n</code></pre> RxFlow will filter results to your preferred pharmacy chain.</p>"},{"location":"getting-started/quickstart/#next-steps","title":"\ud83d\udcc8 Next Steps","text":"<p>Once you're comfortable with the basics:</p> <ol> <li>User Guide - Master advanced features</li> <li>Safety Features - Understand safety protocols</li> <li>Pharmacy Services - Explore all pharmacy tools</li> <li>Configuration - Customize your experience</li> </ol> <p>You're Ready!</p> <p>You now know the basics of RxFlow! Start with a simple refill request and explore the features as you go. The system will guide you through each step safely and efficiently.</p> <p>Need more help? Check out our Complete User Guide or try the interactive demo scenarios!</p>"},{"location":"user-guide/","title":"User Guide","text":""},{"location":"user-guide/#getting-started","title":"Getting Started","text":"<p>RxFlow Pharmacy Assistant is designed to streamline pharmacy operations and provide intelligent assistance for medication management. This guide will walk you through the main features and workflows.</p>"},{"location":"user-guide/#overview","title":"Overview","text":"<p>The RxFlow system provides:</p> <ul> <li>AI-Powered Conversations: Natural language interaction for pharmacy tasks</li> <li>Patient Management: Comprehensive medication history and safety checking</li> <li>Pharmacy Operations: Inventory management, pricing, and availability</li> <li>Safety Systems: Drug interaction checking, allergy verification, and clinical decision support</li> <li>Workflow Automation: Streamlined processes for common pharmacy tasks</li> </ul>"},{"location":"user-guide/#main-features","title":"Main Features","text":""},{"location":"user-guide/#1-conversational-interface","title":"1. Conversational Interface","text":""},{"location":"user-guide/#starting-a-conversation","title":"Starting a Conversation","text":"<pre><code>from rxflow.workflow.conversation_manager import ConversationManager\n\n# Initialize the conversation system\nconversation = ConversationManager()\n\n# Start with a simple greeting\nresponse = conversation.process_message(\"Hello, I need help with a prescription refill\")\nprint(response.message)\n</code></pre> <p>The system supports natural language queries like: - \"Can you help me refill my blood pressure medication?\" - \"What's the cost of omeprazole at nearby pharmacies?\" - \"Check if I have any drug allergies that would conflict with this prescription\" - \"When did I last fill my diabetes medication?\"</p>"},{"location":"user-guide/#conversation-types","title":"Conversation Types","text":"<p>Simple Conversation: Basic question-and-answer interactions <pre><code>from rxflow.workflow.simple_conversation import SimpleConversation\n\nsimple = SimpleConversation()\nresponse = simple.process(\"What are the side effects of lisinopril?\")\n</code></pre></p> <p>Refill Conversation: Specialized workflow for prescription refills <pre><code>from rxflow.workflow.refill_conversation import RefillConversation\n\nrefill = RefillConversation()\nresponse = refill.process(\"I need to refill my omeprazole prescription\")\n</code></pre></p>"},{"location":"user-guide/#2-patient-management","title":"2. Patient Management","text":""},{"location":"user-guide/#medication-history-lookup","title":"Medication History Lookup","text":"<p>Access comprehensive patient medication records:</p> <pre><code>from rxflow.tools.patient_history_tool import PatientHistoryTool\n\nhistory_tool = PatientHistoryTool()\n\n# Get patient's medication history\nhistory = history_tool.get_medication_history(\"patient_id:lisinopril\")\n\nprint(f\"Patient has {history['total_medications']} medications on record\")\nfor med in history['medications']:\n    print(f\"- {med['name']} ({med['strength']}) - Last filled: {med['last_filled']}\")\n</code></pre>"},{"location":"user-guide/#adherence-monitoring","title":"Adherence Monitoring","text":"<p>Track and improve medication adherence:</p> <pre><code># Check adherence for a specific medication\nadherence = history_tool.check_adherence(\"patient_id:metformin\")\n\nprint(f\"Adherence Score: {adherence['adherence_score']}%\")\nprint(f\"Level: {adherence['adherence_level']}\")\n\nif adherence['adherence_score'] &lt; 80:\n    print(\"Improvement recommendations:\")\n    for rec in adherence['recommendations']:\n        print(f\"- {rec}\")\n</code></pre>"},{"location":"user-guide/#allergy-and-safety-checks","title":"Allergy and Safety Checks","text":"<p>Verify patient safety before dispensing:</p> <pre><code># Check patient allergies\nallergies = history_tool.get_allergies(\"patient_id\")\n\nif allergies['high_risk_allergies']:\n    print(\"\u26a0\ufe0f HIGH RISK ALLERGIES DETECTED:\")\n    for allergy in allergies['high_risk_allergies']:\n        print(f\"- {allergy['allergen']}: {allergy['reaction']} ({allergy['severity']})\")\n</code></pre>"},{"location":"user-guide/#3-pharmacy-operations","title":"3. Pharmacy Operations","text":""},{"location":"user-guide/#finding-nearby-pharmacies","title":"Finding Nearby Pharmacies","text":"<p>Locate pharmacies and check services:</p> <pre><code>from rxflow.tools.pharmacy_tools import PharmacyTool\n\npharmacy_tool = PharmacyTool()\n\n# Find pharmacies by ZIP code\npharmacies = pharmacy_tool.find_nearby_pharmacies(\"90210\")\n\nfor pharmacy in pharmacies['pharmacies'][:3]:  # Show top 3\n    print(f\"{pharmacy['name']}\")\n    print(f\"  Address: {pharmacy['address']}\")\n    print(f\"  Distance: {pharmacy['distance']} miles\")\n    print(f\"  Rating: {pharmacy['rating']}/5\")\n    print(f\"  Services: {', '.join(pharmacy['services'])}\")\n</code></pre>"},{"location":"user-guide/#medication-availability","title":"Medication Availability","text":"<p>Check stock levels and pickup times:</p> <pre><code># Check if medication is available\navailability = pharmacy_tool.check_medication_availability({\n    \"pharmacy_id\": \"CVS001\",\n    \"medication\": \"lisinopril 10mg\", \n    \"quantity\": 90\n})\n\nif availability['in_stock']:\n    print(f\"\u2705 Available: {availability['available_quantity']} units\")\n    print(f\"\ud83d\udcc5 Ready for pickup: {availability['pickup_time']}\")\nelse:\n    print(f\"\u274c Out of stock\")\n    if availability.get('expected_date'):\n        print(f\"\ud83d\udcc5 Expected: {availability['expected_date']}\")\n</code></pre>"},{"location":"user-guide/#price-comparison","title":"Price Comparison","text":"<p>Compare costs across pharmacies and insurance plans:</p> <pre><code># Compare prices across multiple pharmacies\nprice_comparison = pharmacy_tool.compare_prices({\n    \"medication\": \"omeprazole 20mg\",\n    \"quantity\": 30,\n    \"insurance\": \"Aetna PPO\"\n})\n\nprint(\"\ud83d\udcb0 Price Comparison:\")\nfor price in sorted(price_comparison['prices'], key=lambda x: x['copay']):\n    savings = f\"(Save ${price_comparison['prices'][0]['copay'] - price['copay']:.2f})\" if price['copay'] &lt; price_comparison['prices'][0]['copay'] else \"\"\n    print(f\"  {price['pharmacy']}: ${price['copay']} {savings}\")\n</code></pre>"},{"location":"user-guide/#4-clinical-safety-features","title":"4. Clinical Safety Features","text":""},{"location":"user-guide/#drug-interaction-checking","title":"Drug Interaction Checking","text":"<p>Verify safety of medication combinations:</p> <pre><code>from rxflow.tools.rxnorm_tool import RxNormTool\n\nrxnorm_tool = RxNormTool()\n\n# Check for drug interactions\ninteractions = rxnorm_tool.check_drug_interactions([\n    \"lisinopril\", \"metformin\", \"omeprazole\"\n])\n\nif interactions['high_severity']:\n    print(\"\u26a0\ufe0f HIGH SEVERITY INTERACTIONS:\")\n    for interaction in interactions['high_severity']:\n        print(f\"- {interaction['drugs']}: {interaction['description']}\")\n</code></pre>"},{"location":"user-guide/#clinical-decision-support","title":"Clinical Decision Support","text":"<p>Get evidence-based recommendations:</p> <pre><code># Get clinical information for a medication\nclinical_info = rxnorm_tool.get_clinical_info(\"lisinopril\")\n\nprint(f\"Medication: {clinical_info['name']}\")\nprint(f\"Class: {clinical_info['therapeutic_class']}\")\nprint(f\"Indications: {', '.join(clinical_info['indications'])}\")\n\nif clinical_info['contraindications']:\n    print(\"\u26a0\ufe0f Contraindications:\")\n    for contraindication in clinical_info['contraindications']:\n        print(f\"- {contraindication}\")\n</code></pre>"},{"location":"user-guide/#5-workflow-automation","title":"5. Workflow Automation","text":""},{"location":"user-guide/#prescription-refill-workflow","title":"Prescription Refill Workflow","text":"<p>Complete automated refill processing:</p> <pre><code>def automated_refill_workflow(patient_id: str, medication_name: str):\n    \"\"\"Complete prescription refill with safety checks\"\"\"\n\n    # Step 1: Verify patient medication history\n    history = history_tool.get_medication_history(f\"{patient_id}:{medication_name}\")\n    if not history.get('medications'):\n        return {\"error\": \"Medication not found in patient history\"}\n\n    # Step 2: Check medication adherence\n    adherence = history_tool.check_adherence(f\"{patient_id}:{medication_name}\")\n    if adherence['adherence_score'] &lt; 50:\n        return {\n            \"warning\": \"Poor adherence detected\", \n            \"recommendations\": adherence['recommendations']\n        }\n\n    # Step 3: Verify no allergy conflicts\n    allergies = history_tool.get_allergies(patient_id)\n    for allergy in allergies.get('allergies', []):\n        if medication_name.lower() in allergy['allergen'].lower():\n            return {\"error\": f\"Allergy conflict: {allergy['allergen']}\"}\n\n    # Step 4: Find available pharmacies\n    patient_zip = \"90210\"  # Would get from patient record\n    pharmacies = pharmacy_tool.find_nearby_pharmacies(patient_zip)\n\n    # Step 5: Check availability and pricing\n    best_option = None\n    best_score = 0\n\n    for pharmacy in pharmacies['pharmacies'][:3]:\n        availability = pharmacy_tool.check_medication_availability({\n            \"pharmacy_id\": pharmacy['id'],\n            \"medication\": medication_name,\n            \"quantity\": 90\n        })\n\n        if availability['in_stock']:\n            pricing = pharmacy_tool.get_pricing({\n                \"pharmacy_id\": pharmacy['id'],\n                \"medication\": medication_name,\n                \"insurance\": \"patient_insurance_here\"\n            })\n\n            # Calculate convenience score\n            score = (5 - pharmacy['distance']) * 10 + (5 - pricing['copay']/10)\n\n            if score &gt; best_score:\n                best_score = score\n                best_option = {\n                    \"pharmacy\": pharmacy,\n                    \"availability\": availability,\n                    \"pricing\": pricing\n                }\n\n    if not best_option:\n        return {\"error\": \"Medication not available at nearby pharmacies\"}\n\n    return {\n        \"success\": True,\n        \"recommendation\": best_option,\n        \"safety_verified\": True,\n        \"ready_for_processing\": True\n    }\n\n# Usage\nresult = automated_refill_workflow(\"12345\", \"lisinopril 10mg\")\nif result.get(\"success\"):\n    rec = result[\"recommendation\"]\n    print(f\"\u2705 Refill approved at {rec['pharmacy']['name']}\")\n    print(f\"\ud83d\udcb0 Cost: ${rec['pricing']['copay']}\")\n    print(f\"\ud83d\udcc5 Ready: {rec['availability']['pickup_time']}\")\n</code></pre>"},{"location":"user-guide/#medication-synchronization","title":"Medication Synchronization","text":"<p>Coordinate multiple refills for patient convenience:</p> <pre><code>def synchronize_medications(patient_id: str) -&gt; dict:\n    \"\"\"Synchronize all patient medications to same refill date\"\"\"\n\n    # Get all patient medications\n    all_meds = history_tool.get_medication_history(f\"{patient_id}:all\")\n\n    sync_plan = {\n        \"patient_id\": patient_id,\n        \"medications\": [],\n        \"target_sync_date\": None,\n        \"estimated_savings\": 0\n    }\n\n    # Analyze current refill patterns\n    for med in all_meds['medications']:\n        days_supply = med.get('days_supply', 30)\n        last_filled = med.get('last_filled')\n\n        # Calculate next refill date\n        next_refill = calculate_next_refill_date(last_filled, days_supply)\n\n        med_sync = {\n            \"medication\": med['name'],\n            \"current_next_refill\": next_refill,\n            \"days_supply\": days_supply,\n            \"early_refill_needed\": False,\n            \"cost_impact\": 0\n        }\n\n        sync_plan[\"medications\"].append(med_sync)\n\n    # Find optimal sync date (most common refill date)\n    refill_dates = [med[\"current_next_refill\"] for med in sync_plan[\"medications\"]]\n    target_date = max(set(refill_dates), key=refill_dates.count)\n    sync_plan[\"target_sync_date\"] = target_date\n\n    # Calculate adjustments needed\n    for med_sync in sync_plan[\"medications\"]:\n        if med_sync[\"current_next_refill\"] != target_date:\n            med_sync[\"early_refill_needed\"] = True\n            # Calculate partial fill or early refill cost\n\n    return sync_plan\n\n# Usage\nsync_plan = synchronize_medications(\"12345\")\nprint(f\"\ud83d\udd04 Medication Synchronization Plan\")\nprint(f\"Target Date: {sync_plan['target_sync_date']}\")\n\nearly_refills = [med for med in sync_plan['medications'] if med['early_refill_needed']]\nprint(f\"Medications needing adjustment: {len(early_refills)}\")\n</code></pre>"},{"location":"user-guide/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/#1-safety-first","title":"1. Safety First","text":"<p>Always perform safety checks before processing prescriptions:</p> <pre><code>def safety_checklist(patient_id: str, medication: str) -&gt; dict:\n    \"\"\"Comprehensive safety verification\"\"\"\n    checks = {\n        \"allergy_check\": False,\n        \"interaction_check\": False,\n        \"adherence_check\": False,\n        \"duplicate_therapy_check\": False,\n        \"all_clear\": False\n    }\n\n    # Check allergies\n    allergies = history_tool.get_allergies(patient_id)\n    checks[\"allergy_check\"] = not any(\n        medication.lower() in allergy['allergen'].lower() \n        for allergy in allergies.get('allergies', [])\n    )\n\n    # Check drug interactions with current medications\n    current_meds = history_tool.get_medication_history(f\"{patient_id}:all\")\n    medication_list = [med['name'] for med in current_meds.get('medications', [])]\n    medication_list.append(medication)\n\n    interactions = rxnorm_tool.check_drug_interactions(medication_list)\n    checks[\"interaction_check\"] = len(interactions.get('high_severity', [])) == 0\n\n    # Check adherence history\n    adherence = history_tool.check_adherence(f\"{patient_id}:{medication}\")\n    checks[\"adherence_check\"] = adherence.get('adherence_score', 0) &gt; 60\n\n    # All checks must pass\n    checks[\"all_clear\"] = all([\n        checks[\"allergy_check\"],\n        checks[\"interaction_check\"], \n        checks[\"adherence_check\"]\n    ])\n\n    return checks\n</code></pre>"},{"location":"user-guide/#2-error-handling","title":"2. Error Handling","text":"<p>Implement robust error handling for all operations:</p> <pre><code>from rxflow.tools.patient_history_tool import safe_medication_history\nfrom rxflow.tools.pharmacy_tools import safe_pharmacy_lookup\n\ndef robust_medication_lookup(query: str) -&gt; dict:\n    \"\"\"Medication lookup with comprehensive error handling\"\"\"\n    try:\n        result = safe_medication_history(query)\n\n        if result.get(\"success\"):\n            return result\n\n        # Try alternative approaches\n        if \"not found\" in result.get(\"error\", \"\").lower():\n            # Try generic name lookup\n            generic_result = safe_medication_history(f\"{query}:generic\")\n            if generic_result.get(\"success\"):\n                return generic_result\n\n        return {\n            \"success\": False,\n            \"error\": result.get(\"error\", \"Unknown error\"),\n            \"suggestions\": [\n                \"Verify medication spelling\",\n                \"Try using generic name\",\n                \"Check patient ID format\"\n            ]\n        }\n\n    except Exception as e:\n        return {\n            \"success\": False,\n            \"error\": f\"System error: {str(e)}\",\n            \"contact_support\": True\n        }\n</code></pre>"},{"location":"user-guide/#3-performance-optimization","title":"3. Performance Optimization","text":"<p>Use efficient patterns for multiple lookups:</p> <pre><code>import asyncio\nfrom concurrent.futures import ThreadPoolExecutor\n\nasync def parallel_pharmacy_check(medication: str, zip_code: str) -&gt; dict:\n    \"\"\"Check multiple pharmacies simultaneously\"\"\"\n\n    # Get list of pharmacies\n    pharmacies_result = safe_pharmacy_lookup(zip_code)\n    if not pharmacies_result.get(\"success\"):\n        return {\"error\": \"No pharmacies found\"}\n\n    pharmacies = pharmacies_result[\"pharmacies\"][:5]  # Top 5\n\n    # Check availability at all pharmacies in parallel\n    with ThreadPoolExecutor(max_workers=5) as executor:\n        futures = []\n\n        for pharmacy in pharmacies:\n            future = executor.submit(\n                safe_medication_availability,\n                {\n                    \"pharmacy_id\": pharmacy[\"id\"],\n                    \"medication\": medication,\n                    \"quantity\": 90\n                }\n            )\n            futures.append((pharmacy, future))\n\n        results = []\n        for pharmacy, future in futures:\n            try:\n                availability = future.result(timeout=10)  # 10 second timeout\n                results.append({\n                    \"pharmacy\": pharmacy,\n                    \"availability\": availability\n                })\n            except Exception as e:\n                print(f\"Error checking {pharmacy['name']}: {e}\")\n\n        return {\"pharmacies\": results}\n\n# Usage\n# results = asyncio.run(parallel_pharmacy_check(\"lisinopril 10mg\", \"90210\"))\n</code></pre>"},{"location":"user-guide/#4-logging-and-monitoring","title":"4. Logging and Monitoring","text":"<p>Implement comprehensive logging for audit trails:</p> <pre><code>from rxflow.utils.logger import get_logger\n\nlogger = get_logger(__name__)\n\ndef log_medication_lookup(patient_id: str, medication: str, result: dict):\n    \"\"\"Log medication lookup for audit trail\"\"\"\n\n    log_data = {\n        \"action\": \"medication_lookup\",\n        \"patient_id\": patient_id,\n        \"medication\": medication,\n        \"success\": result.get(\"success\", False),\n        \"timestamp\": \"2025-01-15T12:00:00Z\"\n    }\n\n    if result.get(\"success\"):\n        logger.info(\"Medication lookup successful\", extra=log_data)\n    else:\n        log_data[\"error\"] = result.get(\"error\")\n        logger.warning(\"Medication lookup failed\", extra=log_data)\n\n# Use in workflow\ndef logged_medication_history(patient_id: str, medication: str):\n    \"\"\"Get medication history with logging\"\"\"\n    result = safe_medication_history(f\"{patient_id}:{medication}\")\n    log_medication_lookup(patient_id, medication, result)\n    return result\n</code></pre>"},{"location":"user-guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/#common-issues","title":"Common Issues","text":"<ol> <li>\"Medication not found\"</li> <li>Verify spelling of medication name</li> <li>Try using generic name instead of brand name</li> <li> <p>Check if patient ID is correct format</p> </li> <li> <p>\"No pharmacies found\"</p> </li> <li>Verify ZIP code format (5 digits)</li> <li>Expand search radius</li> <li> <p>Check if area is served by supported pharmacy chains</p> </li> <li> <p>\"API timeout\"</p> </li> <li>Implement retry logic with exponential backoff</li> <li>Check network connectivity</li> <li> <p>Verify API credentials and rate limits</p> </li> <li> <p>\"Insurance not accepted\"</p> </li> <li>Verify insurance plan name spelling</li> <li>Check if pharmacy participates in plan</li> <li>Look for alternative pharmacies</li> </ol>"},{"location":"user-guide/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the logs for detailed error messages</li> <li>Verify your configuration in <code>rxflow/config/settings.py</code></li> <li>Test individual components using the safety wrapper functions</li> <li>Review the API documentation for parameter formats</li> <li>Contact support with specific error messages and steps to reproduce</li> </ol> <p>For more detailed technical information, see the API Reference section.</p>"}]}